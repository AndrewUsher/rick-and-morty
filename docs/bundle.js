!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!g[e])return;for(var n in g[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--y&&0===v&&E()}(e,n),t&&t(e,n)};var n,r=!0,o="b756bd7acb16f0b6590c",a=1e4,i={},s=[],l=[];function u(e){var t=C[e];if(!t)return O;var r=function(r){return t.hot.active?(C[r]?-1===C[r].parents.indexOf(e)&&C[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),O(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return O[e]},set:function(t){O[e]=t}}};for(var a in O)Object.prototype.hasOwnProperty.call(O,a)&&"e"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===f&&p("prepare"),v++,O.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===f&&(b[e]||k(e),0===v&&0===y&&E())}},r}var c=[],f="idle";function p(e){f=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var d,h,m,y=0,v=0,b={},g={},w={};function x(e){return+e+""===e?+e:e}function _(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=a,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=O.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;g={},b={},w=e.c,m=e.h,p("prepare");var t=new Promise(function(e,t){d={resolve:e,reject:t}});h={};return k(0),"prepare"===f&&0===v&&0===y&&E(),t});var t}function k(e){w[e]?(g[e]=!0,y++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=O.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):b[e]=!0}function E(){p("ready");var e=d;if(d=null,e)if(r)Promise.resolve().then(function(){return j(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(x(n));e.resolve(t)}}function j(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,a,l,u;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((l=C[a])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<l.parents.length;s++){var u=l.parents[s],c=C[u];if(c){if(c.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),d(n[u],[a])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var y={},v=[],b={},g=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var k;u=x(_);var E=!1,j=!1,P=!1,T="";switch((k=h[_]?c(u):{type:"disposed",moduleId:_}).chain&&(T="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(E=new Error("Aborted because of self decline: "+k.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(E=new Error("Aborted because "+u+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(k),j=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),P=!0;break;default:throw new Error("Unexception type "+k.type)}if(E)return p("abort"),Promise.reject(E);if(j)for(u in b[u]=h[u],d(v,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,u)&&(y[u]||(y[u]=[]),d(y[u],k.outdatedDependencies[u]));P&&(d(v,[k.moduleId]),b[u]=g)}var S,N=[];for(r=0;r<v.length;r++)u=v[r],C[u]&&C[u].hot._selfAccepted&&N.push({module:u,errorHandler:C[u].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var R,L,M=v.slice();M.length>0;)if(u=M.pop(),l=C[u]){var A={},I=l.hot._disposeHandlers;for(a=0;a<I.length;a++)(n=I[a])(A);for(i[u]=A,l.hot.active=!1,delete C[u],delete y[u],a=0;a<l.children.length;a++){var z=C[l.children[a]];z&&((S=z.parents.indexOf(u))>=0&&z.parents.splice(S,1))}}for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=C[u]))for(L=y[u],a=0;a<L.length;a++)R=L[a],(S=l.children.indexOf(R))>=0&&l.children.splice(S,1);for(u in p("apply"),o=m,b)Object.prototype.hasOwnProperty.call(b,u)&&(e[u]=b[u]);var U=null;for(u in y)if(Object.prototype.hasOwnProperty.call(y,u)&&(l=C[u])){L=y[u];var F=[];for(r=0;r<L.length;r++)if(R=L[r],n=l.hot._acceptedDependencies[R]){if(-1!==F.indexOf(n))continue;F.push(n)}for(r=0;r<F.length;r++){n=F[r];try{n(L)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:L[r],error:e}),t.ignoreErrored||U||(U=e)}}}for(r=0;r<N.length;r++){var D=N[r];u=D.module,s=[u];try{O(u)}catch(e){if("function"==typeof D.errorHandler)try{D.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||U||(U=n),U||(U=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||U||(U=e)}}return U?(p("fail"),Promise.reject(U)):(p("idle"),new Promise(function(e){e(v)}))}var C={};function O(t){if(C[t])return C[t].exports;var r=C[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:j,status:function(e){if(!e)return f;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(l=s,s=[],l),children:[]};return e[t].call(r.exports,r,r.exports,u(t)),r.l=!0,r.exports}O.m=e,O.c=C,O.d=function(e,t,n){O.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},O.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},O.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return O.d(t,"a",t),t},O.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},O.p="",O.h=function(){return o},u("./src/index.js")(O.s="./src/index.js")}({"./node_modules/change-emitter/lib/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createChangeEmitter=function(){var e=[],t=e;function n(){t===e&&(t=e.slice())}return{listen:function(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var r=!0;return n(),t.push(e),function(){if(r){r=!1,n();var o=t.indexOf(e);t.splice(o,1)}}},emit:function(){for(var n=e=t,r=0;r<n.length;r++)n[r].apply(n,arguments)}}}},"./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl":function(e,t,n){var r=n("./node_modules/css-loader/lib/url/escape.js");(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,"header {\n  background-color: #97ce4c;\n  align-items: center;\n  display: flex;\n  font-family: Abel, sans-serif;\n  justify-content: space-between;\n  padding: 10px 50px;\n}\nheader h1 {\n  color: #111;\n  display: inline-block;\n  font-size: 32px;\n  font-weight: normal;\n}\nheader nav {\n  display: flex;\n}\nheader nav li {\n  list-style: none;\n  margin-right: 20px;\n}\nheader nav li a:not(last-child) {\n  padding: 0 10px;\n}\nheader nav li a {\n  color: #111;\n  font-family: Abel, sans-serif;\n  font-size: 22px;\n  position: relative;\n  text-decoration: none;\n  transition: color 400ms;\n  z-index: 1;\n}\nheader nav li a:hover {\n  color: #fefefe;\n}\nheader nav li a:after {\n  display: block;\n  position: absolute;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  left: 0;\n  margin: auto;\n  width: 100%;\n  height: 1px;\n  content: '.';\n  color: transparent;\n  background: #6b9b2a;\n  visibility: none;\n  opacity: 0;\n  transition: all 300ms;\n  z-index: -1;\n}\nheader nav li a:hover:after {\n  opacity: 1;\n  visibility: visible;\n  height: 180%;\n}\n.Home {\n  background: url("+r(n("./src/assets/banner.png"))+") no-repeat center center fixed;\n  background-size: cover;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 94vh;\n  position: relative;\n}\n.Home:after {\n  position: absolute;\n  content: '';\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.55);\n}\n.Home h2 {\n  color: #f2f2f2;\n  font-family: Abel, sans-serif;\n  font-weight: normal;\n  max-width: 1200px;\n  position: relative;\n  top: -60px;\n  text-align: center;\n  font-size: 40px;\n  z-index: 2;\n}\n.List-Container {\n  background-color: #e4a788;\n  padding: 30px 50px;\n  text-align: center;\n}\n.List-Container h2 {\n  font-family: Abel;\n  font-size: 30px;\n  font-weight: normal;\n  margin-bottom: 30px;\n}\n.List-Container .List-Grid {\n  display: grid;\n  grid-gap: 50px 30px;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  margin-bottom: 50px;\n}\n.List-Container button {\n  background-color: #f0e14a;\n  box-shadow: 5px 5px 2px rgba(0,0,0,0.1);\n  cursor: pointer;\n  display: inline-block;\n  font-family: Abel, sans-serif;\n  font-size: 24px;\n  color: #333;\n  border: none;\n  padding: 10px 20px;\n  transition: background-color 200ms, box-shadow 250ms, color 300ms, transform 400ms;\n}\n.List-Container button:hover {\n  background-color: #eedc2d;\n  box-shadow: 10px 10px 2px rgba(0,0,0,0.1);\n  color: #fff;\n  transform: translate(-5px, -5px);\n}\n.List-Item {\n  background-color: rgba(255,255,255,0.8);\n  box-shadow: 2px 5px 0 rgba(0,0,0,0.03);\n  cursor: pointer;\n  font-family: Abel, sans-serif;\n  padding: 0 7% 10% 7%;\n  position: relative;\n  transition: box-shadow 200ms, background-color 250ms, transform 400ms;\n}\n.List-Item:hover {\n  box-shadow: 4px 10px rgba(0,0,0,0.03);\n  background-color: #fff;\n  transform: translate(-2px, -5px) scale(1.02);\n}\n.List-Item img {\n  position: relative;\n  left: -8%;\n  width: 116.2%;\n}\n.List-Item h3 {\n  font-family: Abel, sans-serif;\n  font-size: 24px;\n  font-weight: normal;\n  padding: 10px 0;\n}\n.List-Item p {\n  border-bottom: 1px solid rgba(0,0,0,0.3);\n  display: flex;\n  font-size: 15px;\n  padding: 16px 0;\n  justify-content: space-between;\n}\n.List-Item p span {\n  color: rgba(0,0,0,0.7);\n}\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},"./node_modules/css-loader/lib/url/escape.js":function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},"./node_modules/emotion/dist/index.es.js":function(e,t,n){"use strict";function r(e){return function(e,t){var n=1540483477,r=t^e.length,s=e.length,l=0;for(;s>=4;){var u=o(e,l);u=i(u,n),u=i(u^=u>>>24,n),r=i(r,n),r^=u,l+=4,s-=4}switch(s){case 3:r^=a(e,l),r=i(r^=e.charCodeAt(l+2)<<16,n);break;case 2:r=i(r^=a(e,l),n);break;case 1:r=i(r^=e.charCodeAt(l),n)}return r=i(r^=r>>>13,n),(r^=r>>>15)>>>0}(e,e.length).toString(36)}function o(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function a(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function i(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}n.r(t);var s="__emotion_styles",l="__emotion_target",u={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},c=n("./node_modules/emotion/node_modules/stylis-rule-sheet/index.js"),f=n.n(c);function p(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-emotion",""),e.appendChild(document.createTextNode("")),document.head.appendChild(e),e}n.d(t,"sheet",function(){return d}),n.d(t,"useStylisPlugin",function(){return b}),n.d(t,"registered",function(){return g}),n.d(t,"inserted",function(){return w}),n.d(t,"css",function(){return L}),n.d(t,"keyframes",function(){return M}),n.d(t,"injectGlobal",function(){return A}),n.d(t,"fontFace",function(){return I}),n.d(t,"getRegisteredStyles",function(){return z}),n.d(t,"merge",function(){return U}),n.d(t,"cx",function(){return F}),n.d(t,"hydrate",function(){return D}),n.d(t,"flush",function(){return H});var d=new(function(){function e(){this.isBrowser="undefined"!=typeof window,this.isSpeedy=!0,this.tags=[],this.ctr=0}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.isBrowser?this.tags[0]=p():this.sheet=[],this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isBrowser){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=p();this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(p())}else this.sheet.push(e)},t.flush=function(){this.isBrowser?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0):this.sheet=[],this.injected=!1},e}());d.inject();var h=new function e(t){function n(e,t,n){var o=t.trim().split(b);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var s=0;for(e=0===i?"":e[0]+" ";s<a;++s)t[s]=r(e,t[s],n,i).trim();break;default:var l=s=0;for(t=[];s<a;++s)for(var u=0;u<i;++u)t[l++]=r(e[u]+" ",o[s],n,i).trim()}return t}function r(e,t,n,r){var o=t.charCodeAt(0);switch(33>o&&(o=(t=t.trim()).charCodeAt(0)),o){case 38:switch(U+r){case 0:case 1:if(0===e.trim().length)break;default:return t.replace(g,"$1"+e.trim())}break;case 58:switch(t.charCodeAt(1)){case 103:if(0<D&&0<U)return t.replace(w,"$1").replace(g,"$1"+Z);break;default:return e.trim()+t}default:if(0<n*U&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var o=0,i=e+";";if(944==(t=2*t+3*n+4*r)){switch(o=i.length,e=i.indexOf(":",9)+1,n=i.substring(0,e).trim(),r=i.substring(e,o-1).trim(),i.charCodeAt(9)*Q){case 0:break;case 45:if(110!==i.charCodeAt(10))break;default:for(e=t=0,o=(i=r.split((r="",m))).length;t<o;e=0,++t){for(var s=i[t],l=s.split(y);s=l[e];){var u=s.charCodeAt(0);if(1===Q&&(64<u&&90>u||96<u&&123>u||95===u||45===u&&45!==s.charCodeAt(1)))switch(isNaN(parseFloat(s))+(-1!==s.indexOf("("))){case 1:switch(s){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:s+=X}}l[e++]=s}r+=(0===t?"":",")+l.join(" ")}}return r=n+r+";",1===F||2===F&&a(r,1)?"-webkit-"+r+r:r}if(0===F||2===F&&!a(i,1))return i;switch(t){case 1015:return 45===i.charCodeAt(9)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:return 45===i.charCodeAt(8)?"-webkit-"+i+i:i;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(e=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+e+i;case 1005:return d.test(i)?i.replace(p,":-webkit-")+i.replace(p,":-moz-")+i:i;case 1e3:switch(o=(e=i.substring(13).trim()).indexOf("-")+1,e.charCodeAt(0)+e.charCodeAt(o)){case 226:e=i.replace(S,"tb");break;case 232:e=i.replace(S,"tb-rl");break;case 220:e=i.replace(S,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+e+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(o=(i=e).length-10,t=(e=(33===i.charCodeAt(o)?i.substring(0,o):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|e.charCodeAt(7))){case 203:if(111>e.charCodeAt(8))break;case 115:i=i.replace(e,"-webkit-"+e)+";"+i;break;case 207:case 102:i=i.replace(e,"-webkit-"+(102<t?"inline-":"")+"box")+";"+i.replace(e,"-webkit-"+e)+";"+i.replace(e,"-ms-"+e+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return"-webkit-"+i+"-webkit-box-"+(e=i.replace("-items",""))+"-ms-flex-"+e+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(L,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","")+i}break;case 953:if(0<(o=i.indexOf("-content",9))&&109===i.charCodeAt(o-3)&&45!==i.charCodeAt(o-4))return"width:-webkit-"+(e=i.substring(o-3))+"width:-moz-"+e+"width:"+e;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),$(2!==t?r:r.replace(M,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(R," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,a,i,s,l){for(var c,f=0,p=t;f<K;++f)switch(c=q[f].call(u,e,p,n,r,o,a,i,s,l)){case void 0:case!1:case!0:case null:break;default:p=c}switch(p){case void 0:case!1:case!0:case null:case t:break;default:return p}}function l(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Q=0|n;break;case"global":D=0|n;break;case"cascade":U=0|n;break;case"compress":H=0|n;break;case"semicolon":B=0|n;break;case"preserve":W=0|n;break;case"prefix":$=null,n?"function"!=typeof n?F=1:(F=2,$=n):F=0}}return l}function u(t,r){if(void 0!==this&&this.constructor===u)return e(t);var l=t,p=l.charCodeAt(0);if(33>p&&(p=(l=l.trim()).charCodeAt(0)),0<Q&&(X=l.replace(x,91===p?"":"-")),p=1,1===U?Z=l:G=l,l=[Z],0<K){var d=s(-1,r,l,l,I,A,0,0,0);void 0!==d&&"string"==typeof d&&(r=d)}var h=function e(t,r,l,u,p){for(var d,h,m,y,b=0,g=0,w=0,x=0,j=0,C=0,O=0,P=0,S=0,R=0,L=0,M=0,H=h=0,q=0,$=0,J=l.length,ee=J-1,te="",ne="",re="",oe="";M<J;){if(m=l.charCodeAt(M),M===ee&&0!==g+x+w+b&&(0!==g&&(m=47===g?10:47),x=w=b=0,J++,ee++),0===g+x+w+b){if(M===ee&&(0<h&&(te=te.replace(f,"")),0<te.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:te+=l.charAt(M)}m=59}if(1===H)switch(m){case 123:case 125:case 59:case 34:case 39:case 40:case 41:case 44:H=0;case 9:case 13:case 10:case 32:break;default:for(H=0,$=M,d=m,M--,m=59;$<J;)switch(l.charCodeAt(++$)){case 10:case 13:case 59:M++,m=d;case 58:case 123:$=J}}switch(m){case 123:for(d=(te=te.trim()).charCodeAt(0),P=1,$=++M;M<J;){switch(m=l.charCodeAt(M)){case 123:P++;break;case 125:P--}if(0===P)break;M++}switch(R=l.substring($,M),0===d&&(d=(te=te.replace(c,"").trim()).charCodeAt(0)),d){case 64:switch(0<h&&(te=te.replace(f,"")),h=te.charCodeAt(1)){case 100:case 109:case 115:case 45:d=r;break;default:d=V}if($=(R=e(r,d,R,h,p+1)).length,0<W&&0===$&&($=te.length),0<K&&(y=s(3,R,d=n(V,te,q),r,I,A,$,h,p),te=d.join(""),void 0!==y&&0===($=(R=y.trim()).length)&&(h=0,R="")),0<$)switch(h){case 115:te=te.replace(N,i);case 100:case 109:case 45:R=te+"{"+R+"}";break;case 107:R=(te=te.replace(_,"$1 $2"+(0<Q?X:"")))+"{"+R+"}",R=1===F||2===F&&a("@"+R,3)?"@-webkit-"+R+"@"+R:"@"+R;break;default:R=te+R,112===u&&(ne+=R,R="")}else R="";break;default:R=e(r,n(r,te,q),R,u,p+1)}re+=R,R=q=h=L=H=S=0,te="",m=l.charCodeAt(++M);break;case 125:case 59:if(1<($=(te=(0<h?te.replace(f,""):te).trim()).length))switch(0===L&&(d=te.charCodeAt(0),45===d||96<d&&123>d)&&($=(te=te.replace(" ",":")).length),0<K&&void 0!==(y=s(1,te,r,t,I,A,ne.length,u,p))&&0===($=(te=y.trim()).length)&&(te="\0\0"),d=te.charCodeAt(0),h=te.charCodeAt(1),d+h){case 0:break;case 169:case 163:oe+=te+l.charAt(M);break;default:58!==te.charCodeAt($-1)&&(ne+=o(te,d,h,te.charCodeAt(2)))}q=h=L=H=S=0,te="",m=l.charCodeAt(++M)}}switch(m){case 13:case 10:if(0===g+x+w+b+B)switch(O){case 41:case 39:case 34:case 64:case 126:case 62:case 42:case 43:case 47:case 45:case 58:case 44:case 59:case 123:case 125:break;default:0<L&&(H=1)}47===g?g=0:0===U+S&&(h=1,te+="\0"),0<K*Y&&s(0,te,r,t,I,A,ne.length,u,p),A=1,I++;break;case 59:case 125:if(0===g+x+w+b){A++;break}default:switch(A++,d=l.charAt(M),m){case 9:case 32:if(0===x+b+g)switch(j){case 44:case 58:case 9:case 32:d="";break;default:32!==m&&(d=" ")}break;case 0:d="\\0";break;case 12:d="\\f";break;case 11:d="\\v";break;case 38:0===x+g+b&&0<U&&(h=q=1,d="\f"+d);break;case 108:if(0===x+g+b+z&&0<L)switch(M-L){case 2:112===j&&58===l.charCodeAt(M-3)&&(z=j);case 8:111===C&&(z=C)}break;case 58:0===x+g+b&&(L=M);break;case 44:0===g+w+x+b&&(h=1,d+="\r");break;case 34:case 39:0===g&&(x=x===m?0:0===x?m:x);break;case 91:0===x+g+w&&b++;break;case 93:0===x+g+w&&b--;break;case 41:0===x+g+b&&w--;break;case 40:if(0===x+g+b){if(0===S)switch(2*j+3*C){case 533:break;default:P=0,S=1}w++}break;case 64:0===g+w+x+b+L+R&&(R=1);break;case 42:case 47:if(!(0<x+b+w))switch(g){case 0:switch(2*m+3*l.charCodeAt(M+1)){case 235:g=47;break;case 220:$=M,g=42}break;case 42:47===m&&42===j&&(33===l.charCodeAt($+2)&&(ne+=l.substring($,M+1)),d="",g=0)}}if(0===g){if(0===U+x+b+R&&107!==u&&59!==m)switch(m){case 44:case 126:case 62:case 43:case 41:case 40:if(0===S){switch(j){case 9:case 32:case 10:case 13:d+="\0";break;default:d="\0"+d+(44===m?"":"\0")}h=1}else switch(m){case 40:S=++P;break;case 41:0==(S=--P)&&(h=1,d+="\0")}break;case 9:case 32:switch(j){case 0:case 123:case 125:case 59:case 44:case 12:case 9:case 32:case 10:case 13:break;default:0===S&&(h=1,d+="\0")}}te+=d,32!==m&&9!==m&&(O=m)}}C=j,j=m,M++}if($=ne.length,0<W&&0===$&&0===re.length&&0===r[0].length==0&&(109!==u||1===r.length&&(0<U?G:Z)===r[0])&&($=r.join(",").length+2),0<$){if(0===U&&107!==u){for(l=0,b=r.length,g=Array(b);l<b;++l){for(C="",O=0,J=(j=r[l].split(v)).length;O<J;++O)if(!(0===(P=(x=j[O]).length)&&1<J)){if(M=C.charCodeAt(C.length-1),q=x.charCodeAt(0),w="",0!==O)switch(M){case 42:case 126:case 62:case 43:case 32:case 40:break;default:w=" "}switch(q){case 38:x=w+G;case 126:case 62:case 43:case 32:case 41:case 40:break;case 91:x=w+x+G;break;case 58:switch(2*x.charCodeAt(1)+3*x.charCodeAt(2)){case 530:if(0<D){x=w+x.substring(8,P-1);break}default:(1>O||1>j[O-1].length)&&(x=w+G+x)}break;case 44:w="";default:x=1<P&&0<x.indexOf(":")?w+x.replace(T,"$1"+G+"$2"):w+x+G}C+=x}g[l]=C.replace(f,"").trim()}r=g}if(d=r,0<K&&void 0!==(y=s(2,ne,d,t,I,A,$,u,p))&&0===(ne=y).length)return oe+ne+re;if(ne=d.join(",")+"{"+ne+"}",0!=F*z){switch(2!==F||a(ne,2)||(z=0),z){case 111:ne=ne.replace(E,":-moz-$1")+ne;break;case 112:ne=ne.replace(k,"::-webkit-input-$1")+ne.replace(k,"::-moz-$1")+ne.replace(k,":-ms-input-$1")+ne}z=0}}return oe+ne+re}(V,l,r,0,0);return 0<K&&void 0!==(d=s(-2,h,l,l,I,A,h.length,0,0))&&"string"!=typeof(h=d)&&(p=0),G=Z=X="",z=0,A=I=1,0==H*p?h:h.replace(f,"").replace(j,"").replace(C,"$1").replace(O,"$1").replace(P," ")}var c=/^\0+/g,f=/[\0\r\f]/g,p=/: */g,d=/zoo|gra/,h=/([,: ])(transform)/g,m=/,+\s*(?![^(]*[)])/g,y=/ +\s*(?![^(]*[)])/g,v=/ *[\0] */g,b=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,w=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,x=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,k=/::(place)/g,E=/:(read-only)/g,j=/\s+(?=[{\];=:>])/g,C=/([[}=:>])\s+/g,O=/(\{[^{]+?);(?=\})/g,P=/\s{2,}/g,T=/([^\(])(:+) */g,S=/[svh]\w+-[tblr]{2}/,N=/\(\s*(.*)\s*\)/g,R=/([^]*?);/g,L=/-self|flex-/g,M=/[^]*?(:[rp][el]a[\w-]+)[^]*/,A=1,I=1,z=0,U=1,F=1,D=1,H=0,B=0,W=0,V=[],q=[],K=0,$=null,Y=0,Q=1,X="",G="",Z="";return u.use=function e(t){switch(t){case void 0:case null:K=q.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:q[K++]=t;break;case Boolean:Y=0|!!t}}return e},u.set=l,void 0!==t&&l(t),u}({keyframe:!1}),m=[],y=h.use;var v=f()(function(e){d.insert(e,x)}),b=function(e){m.push(e),y(null)(m)(v)},g={},w={},x="";function _(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":return void 0!==e[s]?"."+e[l]:_.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(S.has(e))return S.get(e);var t="";Array.isArray(e)?e.forEach(function(e){t+=_.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==g[e[n]]?t+=n+"{"+g[e[n]]+"}":t+=P(n)+":"+T(n,e[n])+";":t+=n+"{"+_.call(this,e[n],!1)+"}"},this);return S.set(e,t),t}.call(this,e);default:var n=g[e];return!1===t&&void 0!==n?n:e}}h.use(v);var k,E,j,C,O=/[A-Z]|^ms/g,P=(k=function(e){return e.replace(O,"-$&").toLowerCase()},E={},function(e){return void 0===E[e]&&(E[e]=k(e)),E[e]}),T=function(e,t){return void 0===t||null===t||"boolean"==typeof t?"":1===u[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},S=new WeakMap;var N=/label:\s*([^\s;\n]+)\s*[;\n]/g;function R(e){var t=!0,n="",o="";null==e||void 0===e.raw?(t=!1,n=_.call(this,e,!1)):n=e[0];for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];return i.forEach(function(r,o){var a;n+=_.call(this,r,46===(a=n).charCodeAt(a.length-1)),!0===t&&void 0!==e[o+1]&&(n+=e[o+1])},this),n=n.replace(N,function(e,t){return o+="-"+t,""}),j=r(n+o),C=j+o,n}function L(){var e=R.apply(this,arguments),t="css-"+C;return void 0===g[t]&&(g[t]=e),void 0===w[j]&&(h("."+t,e),w[j]=!0),t}function M(){var e=R.apply(this,arguments),t="animation-"+C;return void 0===w[j]&&(h("","@keyframes "+t+"{"+e+"}"),w[j]=!0),t}function A(){var e=R.apply(this,arguments);void 0===w[j]&&(h("",e),w[j]=!0)}function I(){var e=R.apply(void 0,arguments);void 0===w[j]&&(h("","@font-face{"+e+"}"),w[j]=!0)}function z(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==g[t]?e.push(t):n+=t+" "}),n}function U(e,t){var n=[],r=z(n,e);return n.length<2?e:r+L(n,t)}function F(){return U(function e(){for(var t=arguments.length,n=0,r="";n<t;n++){var o=arguments[n];if(null!=o){var a=r&&r+" "||r;switch(typeof o){case"boolean":break;case"function":r=a+e(o());break;case"object":if(Array.isArray(o))r=a+e.apply(null,o);else for(var i in o)o[i]&&(r&&(r+=" "),r+=i);break;default:r=a+o}}}return r}.apply(void 0,arguments))}function D(e){e.forEach(function(e){w[e]=!0})}function H(){d.flush(),w={},g={},d.inject()}},"./node_modules/emotion/node_modules/stylis-rule-sheet/index.js":function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,l,u,c){switch(n){case 1:0===c&&64===r.charCodeAt(0)&&e(r);break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+"/*|*/"}case-2:r.split("/*|*/}").forEach(t)}}}}()},"./node_modules/fbjs/lib/ExecutionEnvironment.js":function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},"./node_modules/fbjs/lib/containsNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isTextNode.js");e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},"./node_modules/fbjs/lib/emptyFunction.js":function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},"./node_modules/fbjs/lib/emptyObject.js":function(e,t,n){"use strict";e.exports={}},"./node_modules/fbjs/lib/getActiveElement.js":function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},"./node_modules/fbjs/lib/invariant.js":function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,s,l],f=0;(u=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},"./node_modules/fbjs/lib/isNode.js":function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},"./node_modules/fbjs/lib/isTextNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isNode.js");e.exports=function(e){return r(e)&&3==e.nodeType}},"./node_modules/fbjs/lib/shallowEqual.js":function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},"./node_modules/history/DOMUtils.js":function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},"./node_modules/history/LocationUtils.js":function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n("./node_modules/resolve-pathname/index.js")),a=s(n("./node_modules/value-equal/index.js")),i=n("./node_modules/history/PathUtils.js");function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,a){var s=void 0;"string"==typeof e?(s=(0,i.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),a?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,a.pathname)):s.pathname=a.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,a.default)(e.state,t.state)}},"./node_modules/history/PathUtils.js":function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},"./node_modules/history/createBrowserHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=f(n("./node_modules/warning/browser.js")),i=f(n("./node_modules/invariant/browser.js")),s=n("./node_modules/history/LocationUtils.js"),l=n("./node_modules/history/PathUtils.js"),u=f(n("./node_modules/history/createTransitionManager.js")),c=n("./node_modules/history/DOMUtils.js");function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,y=void 0===m?c.getConfirmation:m,v=e.keyLength,b=void 0===v?6:v,g=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return(0,a.default)(!g||(0,l.hasBasename)(i,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+g+'".'),g&&(i=(0,l.stripBasename)(i,g)),(0,s.createLocation)(i,r,n)},x=function(){return Math.random().toString(36).substr(2,b)},_=(0,u.default)(),k=function(e){o(I,e),I.length=t.length,_.notifyListeners(I.location,I.action)},E=function(e){(0,c.isExtraneousPopstateEvent)(e)||O(w(e.state))},j=function(){O(w(p()))},C=!1,O=function(e){C?(C=!1,k()):_.confirmTransitionTo(e,"POP",y,function(t){t?k({action:"POP",location:e}):P(e)})},P=function(e){var t=I.location,n=S.indexOf(t.key);-1===n&&(n=0);var r=S.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(C=!0,R(o))},T=w(p()),S=[T.key],N=function(e){return g+(0,l.createPath)(e)},R=function(e){t.go(e)},L=0,M=function(e){1===(L+=e)?((0,c.addEventListener)(window,"popstate",E),f&&(0,c.addEventListener)(window,"hashchange",j)):0===L&&((0,c.removeEventListener)(window,"popstate",E),f&&(0,c.removeEventListener)(window,"hashchange",j))},A=!1,I={length:t.length,action:"POP",location:T,createHref:N,push:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,x(),I.location);_.confirmTransitionTo(i,"PUSH",y,function(e){if(e){var r=N(i),o=i.key,s=i.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var l=S.indexOf(I.location.key),u=S.slice(0,-1===l?0:l+1);u.push(i.key),S=u,k({action:"PUSH",location:i})}else(0,a.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,x(),I.location);_.confirmTransitionTo(i,"REPLACE",y,function(e){if(e){var r=N(i),o=i.key,s=i.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var l=S.indexOf(I.location.key);-1!==l&&(S[l]=i.key),k({action:"REPLACE",location:i})}else(0,a.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:R,goBack:function(){return R(-1)},goForward:function(){return R(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=_.setPrompt(e);return A||(M(1),A=!0),function(){return A&&(A=!1,M(-1)),t()}},listen:function(e){var t=_.appendListener(e);return M(1),function(){M(-1),t()}}};return I}},"./node_modules/history/createHashHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n("./node_modules/warning/browser.js")),a=c(n("./node_modules/invariant/browser.js")),i=n("./node_modules/history/LocationUtils.js"),s=n("./node_modules/history/PathUtils.js"),l=c(n("./node_modules/history/createTransitionManager.js")),u=n("./node_modules/history/DOMUtils.js");function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(u.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,u.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?u.getConfirmation:c,m=e.hashType,y=void 0===m?"slash":m,v=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",b=f[y],g=b.encodePath,w=b.decodePath,x=function(){var e=w(p());return(0,o.default)(!v||(0,s.hasBasename)(e,v),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+v+'".'),v&&(e=(0,s.stripBasename)(e,v)),(0,i.createLocation)(e)},_=(0,l.default)(),k=function(e){r(z,e),z.length=t.length,_.notifyListeners(z.location,z.action)},E=!1,j=null,C=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=x(),r=z.location;if(!E&&(0,i.locationsAreEqual)(r,n))return;if(j===(0,s.createPath)(n))return;j=null,O(n)}},O=function(e){E?(E=!1,k()):_.confirmTransitionTo(e,"POP",h,function(t){t?k({action:"POP",location:e}):P(e)})},P=function(e){var t=z.location,n=R.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=R.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(E=!0,L(o))},T=p(),S=g(T);T!==S&&d(S);var N=x(),R=[(0,s.createPath)(N)],L=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},M=0,A=function(e){1===(M+=e)?(0,u.addEventListener)(window,"hashchange",C):0===M&&(0,u.removeEventListener)(window,"hashchange",C)},I=!1,z={length:t.length,action:"POP",location:N,createHref:function(e){return"#"+g(v+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,z.location);_.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(v+t);if(p()!==r){j=t,function(e){window.location.hash=e}(r);var a=R.lastIndexOf((0,s.createPath)(z.location)),i=R.slice(0,-1===a?0:a+1);i.push(t),R=i,k({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),k()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,z.location);_.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(v+t);p()!==r&&(j=t,d(r));var o=R.indexOf((0,s.createPath)(z.location));-1!==o&&(R[o]=t),k({action:"REPLACE",location:n})}})},go:L,goBack:function(){return L(-1)},goForward:function(){return L(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=_.setPrompt(e);return I||(A(1),I=!0),function(){return I&&(I=!1,A(-1)),t()}},listen:function(e){var t=_.appendListener(e);return A(1),function(){A(-1),t()}}};return z}},"./node_modules/history/createMemoryHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=u(n("./node_modules/warning/browser.js")),i=n("./node_modules/history/PathUtils.js"),s=n("./node_modules/history/LocationUtils.js"),l=u(n("./node_modules/history/createTransitionManager.js"));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,u=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),y=function(e){o(_,e),_.length=_.entries.length,m.notifyListeners(_.location,_.action)},v=function(){return Math.random().toString(36).substr(2,h)},b=c(p,0,u.length-1),g=u.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,v()):(0,s.createLocation)(e,void 0,e.key||v())}),w=i.createPath,x=function(e){var n=c(_.index+e,0,_.entries.length-1),r=_.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},_={length:g.length,action:"POP",location:g[b],index:b,entries:g,createHref:w,push:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,v(),_.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,v(),_.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(_.entries[_.index]=o,y({action:"REPLACE",location:o}))})},go:x,goBack:function(){return x(-1)},goForward:function(){return x(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return _}},"./node_modules/history/createTransitionManager.js":function(e,t,n){"use strict";t.__esModule=!0;var r,o=n("./node_modules/warning/browser.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,a.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):((0,a.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},"./node_modules/hoist-non-react-statics/index.js":function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,s=i&&i(Object);return function l(u,c,f){if("string"!=typeof c){if(s){var p=i(c);p&&p!==s&&l(u,p,f)}var d=r(c);o&&(d=d.concat(o(c)));for(var h=0;h<d.length;++h){var m=d[h];if(!(e[m]||t[m]||f&&f[m])){var y=a(c,m);try{n(u,m,y)}catch(e){}}}return u}return u}}()},"./node_modules/invariant/browser.js":function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},"./node_modules/object-assign/index.js":function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))o.call(n,u)&&(s[u]=n[u]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(s[i[c]]=n[i[c]])}}return s}},"./node_modules/prop-types/factoryWithThrowingShims.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/emptyFunction.js"),o=n("./node_modules/fbjs/lib/invariant.js"),a=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js");e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},"./node_modules/prop-types/index.js":function(e,t,n){e.exports=n("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-dom/cjs/react-dom.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/react/index.js"),o=n("./node_modules/fbjs/lib/ExecutionEnvironment.js"),a=n("./node_modules/object-assign/index.js"),i=n("./node_modules/fbjs/lib/emptyFunction.js"),s=n("./node_modules/fbjs/lib/getActiveElement.js"),l=n("./node_modules/fbjs/lib/shallowEqual.js"),u=n("./node_modules/fbjs/lib/containsNode.js"),c=n("./node_modules/fbjs/lib/emptyObject.js");function f(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||f("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,s,l){(function(e,t,n,r,o,a,i,s,l){this._hasCaughtError=!1,this._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,s,l){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var u=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=u)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}f("198")}};var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||f("96",e),!v[n])for(var r in t.extractEvents||f("97",e),v[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,s=r;b.hasOwnProperty(s)&&f("99",s),b[s]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],i,s);o=!0}else a.registrationName?(y(a.registrationName,i,s),o=!0):o=!1;o||f("98",r,e)}}}function y(e,t,n){g[e]&&f("100",e),g[e]=t,w[e]=t.eventTypes[n].dependencies}var v=[],b={},g={},w={};function x(e){d&&f("101"),d=Array.prototype.slice.call(e),m()}function _(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&f("102",t),h[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:v,eventNameDispatchConfigs:b,registrationNameModules:g,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:x,injectEventPluginsByName:_}),E=null,j=null,C=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function T(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var S=null;function N(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function R(e){return N(e,!0)}function L(e){return N(e,!1)}var M={injectEventPluginOrder:x,injectEventPluginsByName:_};function A(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function I(e,t){null!==e&&(S=P(S,e)),e=S,S=null,e&&(T(e,t?R:L),S&&f("95"),p.rethrowCaughtError())}function z(e,t,n,r){for(var o=null,a=0;a<v.length;a++){var i=v[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=P(o,i))}I(o,!1)}var U=Object.freeze({injection:M,getListener:A,runEventsInBatch:I,runExtractedEventsInBatch:z}),F=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+F,H="__reactEventHandlers$"+F;function B(e){if(e[D])return e[D];for(;!e[D];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[D]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function V(e){return e[H]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[D]=e},getClosestInstanceFromNode:B,getInstanceFromNode:function(e){return!(e=e[D])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[H]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Y(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Y,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?K(t):null,Y,e)}}function G(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&G(e._targetInst,null,e)}function J(e){T(e,Q)}function ee(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,s=o;s;s=K(s))i++;s=0;for(var l=a;l;l=K(l))s++;for(;0<i-s;)o=K(o),i--;for(;0<s-i;)a=K(a),s--;for(;i--;){if(o===a||o===a.alternate)break e;o=K(o),a=K(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=K(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=K(r);for(r=0;r<o.length;r++)G(o[r],"bubbled",e);for(e=n.length;0<e--;)G(n[e],"captured",t)}var te=Object.freeze({accumulateTwoPhaseDispatches:J,accumulateTwoPhaseDispatchesSkipTarget:function(e){T(e,X)},accumulateEnterLeaveDispatches:ee,accumulateDirectDispatches:function(e){T(e,Z)}}),ne=null;function re(){return!ne&&o.canUseDOM&&(ne="textContent"in document.documentElement?"textContent":"innerText"),ne}var oe={_root:null,_startText:null,_fallbackText:null};function ae(){if(oe._fallbackText)return oe._fallbackText;var e,t,n=oe._startText,r=n.length,o=ie(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe._fallbackText=o.slice(e,1<t?1-t:void 0),oe._fallbackText}function ie(){return"value"in oe._root?oe._root.value:oe._root[re()]}var se="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function fe(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=ce,e.release=fe}a(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<se.length;t++)this[se[t]]=null}}),ue.Interface=le,ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(ue);var de=ue.extend({data:null}),he=ue.extend({data:null}),me=[9,13,27,32],ye=o.canUseDOM&&"CompositionEvent"in window,ve=null;o.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var be=o.canUseDOM&&"TextEvent"in window&&!ve,ge=o.canUseDOM&&(!ye||ve&&8<ve&&11>=ve),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},_e=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Ee(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var je=!1;var Ce={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ye)e:{switch(e){case"topCompositionStart":o=xe.compositionStart;break e;case"topCompositionEnd":o=xe.compositionEnd;break e;case"topCompositionUpdate":o=xe.compositionUpdate;break e}o=void 0}else je?ke(e,n)&&(o=xe.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(ge&&(je||o!==xe.compositionStart?o===xe.compositionEnd&&je&&(a=ae()):(oe._root=r,oe._startText=ie(),je=!0)),o=de.getPooled(o,t,n,r),a?o.data=a:null!==(a=Ee(n))&&(o.data=a),J(o),a=o):a=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return Ee(t);case"topKeyPress":return 32!==t.which?null:(_e=!0,we);case"topTextInput":return(e=t.data)===we&&_e?null:e;default:return null}}(e,n):function(e,t){if(je)return"topCompositionEnd"===e||!ye&&ke(e,t)?(e=ae(),oe._root=null,oe._startText=null,oe._fallbackText=null,je=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return ge?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,J(t)):t=null,null===a?t:null===t?a:[a,t]}},Oe=null,Pe=null,Te=null;function Se(e){if(e=j(e)){Oe&&"function"==typeof Oe.restoreControlledState||f("194");var t=E(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}var Ne={injectFiberControlledHostComponent:function(e){Oe=e}};function Re(e){Pe?Te?Te.push(e):Te=[e]:Pe=e}function Le(){return null!==Pe||null!==Te}function Me(){if(Pe){var e=Pe,t=Te;if(Te=Pe=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}var Ae=Object.freeze({injection:Ne,enqueueStateRestore:Re,needsStateRestore:Le,restoreStateIfNeeded:Me});function Ie(e,t){return e(t)}function ze(e,t,n){return e(t,n)}function Ue(){}var Fe=!1;function De(e,t){if(Fe)return e(t);Fe=!0;try{return Ie(e,t)}finally{Fe=!1,Le()&&(Ue(),Me())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Be(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function We(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!o.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.call"):60104,Ze=Qe?Symbol.for("react.return"):60105,Je=Qe?Symbol.for("react.portal"):60106,et=Qe?Symbol.for("react.fragment"):60107,tt=Qe?Symbol.for("react.strict_mode"):60108,nt=Qe?Symbol.for("react.provider"):60109,rt=Qe?Symbol.for("react.context"):60110,ot=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,it="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||void 0===e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case et:return"ReactFragment";case Je:return"ReactPortal";case Ge:return"ReactCall";case Ze:return"ReactReturn"}return null}function ut(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),a=null;n&&(a=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-\:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!ft.hasOwnProperty(e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function gt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Et(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function xt(e,t){wt(e,t);var n=Et(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,Et(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _t(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Et(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var jt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Ct(e,t,n){return(e=ue.getPooled(jt.change,e,t,n)).type="change",Re(n),J(e),e}var Ot=null,Pt=null;function Tt(e){I(e,!1)}function St(e){if($e(W(e)))return e}function Nt(e,t){if("topChange"===e)return t}var Rt=!1;function Lt(){Ot&&(Ot.detachEvent("onpropertychange",Mt),Pt=Ot=null)}function Mt(e){"value"===e.propertyName&&St(Pt)&&De(Tt,e=Ct(Pt,e,We(e)))}function At(e,t,n){"topFocus"===e?(Lt(),Pt=n,(Ot=t).attachEvent("onpropertychange",Mt)):"topBlur"===e&&Lt()}function It(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return St(Pt)}function zt(e,t){if("topClick"===e)return St(t)}function Ut(e,t){if("topInput"===e||"topChange"===e)return St(t)}o.canUseDOM&&(Rt=Ve("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:jt,_isInputEventSupported:Rt,extractEvents:function(e,t,n,r){var o=t?W(t):window,a=void 0,i=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?a=Nt:Be(o)?Rt?a=Ut:(a=It,i=At):!(s=o.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=zt),a&&(a=a(e,t)))return Ct(a,n,r);i&&i(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},Dt=ue.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Wt(){return Bt}var Vt=Dt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:qt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?B(t):null):e=null,e===t)return null;var a=null==e?o:W(e);o=null==t?o:W(t);var i=Vt.getPooled(qt.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Vt.getPooled(qt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,ee(i,n,e,t),[i,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&f("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return Qt(o),e;if(i===r)return Qt(o),t;i=i.sibling}f("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}i||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}var Gt=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zt=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jt=Dt.extend({relatedTarget:null});function en(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var tn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},nn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rn=Dt.extend({key:function(e){if(e.key){var t=tn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=en(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?nn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?en(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?en(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),on=Vt.extend({dataTransfer:null}),an=Dt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),sn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un={},cn={};function fn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},un[e]=t,cn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){fn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){fn(e,!1)});var pn={eventTypes:un,isInteractiveTopLevelEventType:function(e){return void 0!==(e=cn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=cn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===en(n))return null;case"topKeyDown":case"topKeyUp":e=rn;break;case"topBlur":case"topFocus":e=Jt;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=on;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=an;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Gt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Dt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=Zt;break;default:e=ue}return J(t=e.getPooled(o,t,n,r)),t}},dn=pn.isInteractiveTopLevelEventType,hn=[];function mn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=B(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],z(e.topLevelType,t,e.nativeEvent,We(e.nativeEvent))}var yn=!0;function vn(e){yn=!!e}function bn(e,t,n){if(!n)return null;e=(dn(e)?wn:xn).bind(null,e),n.addEventListener(t,e,!1)}function gn(e,t,n){if(!n)return null;e=(dn(e)?wn:xn).bind(null,e),n.addEventListener(t,e,!0)}function wn(e,t){ze(xn,e,t)}function xn(e,t){if(yn){var n=We(t);if(null!==(n=B(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),hn.length){var r=hn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(mn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>hn.length&&hn.push(e)}}}var _n=Object.freeze({get _enabled(){return yn},setEnabled:vn,isEnabled:function(){return yn},trapBubbledEvent:bn,trapCapturedEvent:gn,dispatchEvent:xn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var En={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},jn={},Cn={};function On(e){if(jn[e])return jn[e];if(!En[e])return e;var t,n=En[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cn)return jn[e]=n[t];return e}o.canUseDOM&&(Cn=document.createElement("div").style,"AnimationEvent"in window||(delete En.animationend.animation,delete En.animationiteration.animation,delete En.animationstart.animation),"TransitionEvent"in window||delete En.transitionend.transition);var Pn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},Tn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Sn={},Nn=0,Rn="_reactListenersID"+(""+Math.random()).slice(2);function Ln(e){return Object.prototype.hasOwnProperty.call(e,Rn)||(e[Rn]=Nn++,Sn[e[Rn]]={}),Sn[e[Rn]]}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function An(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function In(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var zn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Fn=null,Dn=null,Hn=null,Bn=!1;function Wn(e,t){if(Bn||null==Fn||Fn!==s())return null;var n=Fn;return"selectionStart"in n&&In(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&l(Hn,n)?null:(Hn=n,(e=ue.getPooled(Un.select,Dn,e,t)).type="select",e.target=Fn,J(e),e)}var Vn={eventTypes:Un,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Ln(a),o=w.onSelect;for(var i=0;i<o.length;i++){var s=o[i];if(!a.hasOwnProperty(s)||!a[s]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?W(t):window,e){case"topFocus":(Be(a)||"true"===a.contentEditable)&&(Fn=a,Dn=t,Hn=null);break;case"topBlur":Hn=Dn=Fn=null;break;case"topMouseDown":Bn=!0;break;case"topContextMenu":case"topMouseUp":return Bn=!1,Wn(n,r);case"topSelectionChange":if(zn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function qn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Kn(e,t,n){var r=e.alternate;return null===r?((r=new qn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function $n(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case et:return Yn(e.children,t,n,o);case ot:a=11,t|=3;break;case tt:a=11,t|=2;break;case Ge:a=7;break;case Ze:a=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case nt:a=13;break;case rt:a=12;break;case at:a=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;f("130",null==r?r:typeof r,"")}else f("130",null==r?r:typeof r,"")}return(t=new qn(a,e,o,t)).type=r,t.expirationTime=n,t}function Yn(e,t,n,r){return(e=new qn(10,e,r,t)).expirationTime=n,e}function Qn(e,t,n){return(e=new qn(6,e,null,t)).expirationTime=n,e}function Xn(e,t,n){return(t=new qn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}M.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=q.getFiberCurrentPropsFromNode,j=q.getInstanceFromNode,C=q.getNodeFromInstance,M.injectEventPluginsByName({SimpleEventPlugin:pn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Ft,SelectEventPlugin:Vn,BeforeInputEventPlugin:Ce});var Gn=null,Zn=null;function Jn(e){return function(t){try{return e(t)}catch(e){}}}function er(e){"function"==typeof Gn&&Gn(e)}function tr(e){"function"==typeof Zn&&Zn(e)}function nr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function rr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var or=void 0,ar=void 0;function ir(e){or=ar=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=nr(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=nr(null)):e=null,or=n,ar=e!==n?e:null}function sr(e,t){ir(e),e=or;var n=ar;null===n?rr(e,t):null===e.last||null===n.last?(rr(e,t),rr(n,t)):(rr(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function ur(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,l=n.first,u=!1;null!==l;){var c=l.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),u||(u=!0,n.baseState=e)}else u||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=lr(l,r,e,o),s=!0):(c=lr(l,r,e,o))&&(e=s?a({},e,c):a(e,c),s=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),u||(n.baseState=e),e}function cr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&f("191",o),o.call(t)}}var fr=Array.isArray;function pr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===c?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function dr(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=pr(e,t,n),r.return=e,r):((r=$n(n,e.mode,r)).ref=pr(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=Yn(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=$n(t,e.mode,n)).ref=pr(e,null,t),n.return=e,n;case Je:return(t=Xn(t,e.mode,n)).return=e,t}if(fr(t)||st(t))return(t=Yn(t,e.mode,n,null)).return=e,t;dr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===et?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case Je:return n.key===o?u(e,t,n,r):null}if(fr(n)||st(n))return null!==o?null:c(e,t,n,r,null);dr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===et?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case Je:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fr(r)||st(r))return c(t,e=e.get(n)||null,r,o,null);dr(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,f=i,m=i=0,y=null;null!==f&&m<s.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=d(o,f,s[m],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,m),null===c?u=v:c.sibling=v,c=v,f=y}if(m===s.length)return n(o,f),u;if(null===f){for(;m<s.length;m++)(f=p(o,s[m],l))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<s.length;m++)(y=h(f,o,m,s[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?u=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),u}function y(o,i,s,l){var u=st(s);"function"!=typeof u&&f("150"),null==(s=u.call(s))&&f("151");for(var c=u=null,m=i,y=i=0,v=null,b=s.next();null!==m&&!b.done;y++,b=s.next()){m.index>y?(v=m,m=null):v=m.sibling;var g=d(o,m,b.value,l);if(null===g){m||(m=v);break}e&&m&&null===g.alternate&&t(o,m),i=a(g,i,y),null===c?u=g:c.sibling=g,c=g,m=v}if(b.done)return n(o,m),u;if(null===m){for(;!b.done;y++,b=s.next())null!==(b=p(o,b.value,l))&&(i=a(b,i,y),null===c?u=b:c.sibling=b,c=b);return u}for(m=r(o,m);!b.done;y++,b=s.next())null!==(b=h(m,o,y,b.value,l))&&(e&&null!==b.alternate&&m.delete(null===b.key?y:b.key),i=a(b,i,y),null===c?u=b:c.sibling=b,c=b);return e&&m.forEach(function(e){return t(o,e)}),u}return function(e,r,a,s){"object"==typeof a&&null!==a&&a.type===et&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case Xe:e:{var u=a.key;for(l=r;null!==l;){if(l.key===u){if(10===l.tag?a.type===et:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===et?a.props.children:a.props,s)).ref=pr(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===et?((r=Yn(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=$n(a,e.mode,s)).ref=pr(e,r,a),s.return=e,e=s)}return i(e);case Je:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xn(a,e.mode,s)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,a,s)):(n(e,r),r=Qn(a,e.mode,s)),r.return=e,i(e=r);if(fr(a))return m(e,r,a,s);if(st(a))return y(e,r,a,s);if(l&&dr(e,a),void 0===a)switch(e.tag){case 2:case 1:f("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mr=hr(!0),yr=hr(!1);function vr(e,t,n,r,o,i,s){function u(e,t,n){p(e,t,n,t.expirationTime)}function p(e,t,n,r){t.child=null===e?yr(t,null,n,r):mr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,a){if(d(e,t),!n&&!o)return r&&P(t,!1),v(e,t);n=t.stateNode,Ye.current=t;var i=o?null:n.render();return t.effectTag|=1,o&&(p(e,t,null,a),t.child=null),p(e,t,i,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?O(e,t.pendingContext,t.pendingContext!==t.context):t.context&&O(e,t.context,!1),x(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){a=o;break}a=a.return}o=a}}function v(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=Kn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var b=e.shouldSetTextContent,g=e.shouldDeprioritizeSubtree,w=t.pushHostContext,x=t.pushHostContainer,_=r.pushProvider,k=n.getMaskedContext,E=n.getUnmaskedContext,j=n.hasContextChanged,C=n.pushContextProvider,O=n.pushTopLevelContextObject,P=n.invalidateContextProvider,T=o.enterHydrationState,S=o.resetHydrationState,N=o.tryToClaimNextHydratableInstance,R=(e=function(e,t,n,r,o){function i(e,t,n,r,o,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function s(e,t){t.updater=v,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&v.enqueueReplaceState(t,t.state,null)}function f(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,v={isMounted:Yt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:f,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),i=o?d(e,r):c,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=l,null!==(t=f(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,a=e.pendingProps,i=h(e);o.props=a,o.state=e.memoizedState,o.refs=c,o.context=d(e,i),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&v.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=ur(r,e,n,o,a,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var l=e.memoizedProps,c=e.pendingProps,p=s.context,m=h(e);m=d(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==c||p!==m)&&u(e,s,c,m),p=e.memoizedState,t=null!==e.updateQueue?ur(null,e,e.updateQueue,s,c,t):p;var v=void 0;return l!==c&&(v=f(e,0,c,t)),null!==v&&void 0!==v&&(t=null===t||void 0===t?v:a({},t,v)),l!==c||p!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=i(e,l,c,p,t,m))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,c),o(e,t)),s.props=c,s.state=t,s.context=m,l):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var c=t.memoizedProps,p=t.pendingProps,m=l.context,v=h(t);v=d(t,v),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(c!==p||m!==v)&&u(t,l,p,v),m=t.memoizedState,n=null!==t.updateQueue?ur(e,t,t.updateQueue,l,p,n):m;var b=void 0;return c!==p&&(b=f(t,0,p,n)),null!==b&&void 0!==b&&(n=null===n||void 0===n?b:a({},n,b)),c!==p||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((b=i(t,c,p,m,n,v))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(p,n,v),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(p,n,v)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),l.props=p,l.state=n,l.context=v,b):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,L=e.callGetDerivedStateFromProps,M=e.constructClassInstance,A=e.mountClassInstance,I=e.resumeMountClassInstance,z=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:C(t);break;case 4:x(t,t.stateNode.containerInfo);break;case 13:_(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,i=E(t);return r=r(o,i=k(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=L(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=C(t),R(t,r),A(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,j()||t.memoizedProps!==n?(r=E(t),o=o(n,r=k(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 2:o=C(t),null===e?null===t.stateNode?(M(t,t.pendingProps),A(t,n),r=!0):r=I(t,n):r=z(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=ur(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){S(),e=v(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&T(t)?(t.effectTag|=2,t.child=yr(t,null,r,n)):(S(),u(e,t,r)),t.memoizedState=o,e=t.child}else S(),e=v(e,t);return e;case 5:return w(t),null===e&&N(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,j()||s!==r||((s=1&t.mode&&g(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,b(o,r)?s=null:i&&b(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&g(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=v(e,t),e;case 6:return null===e&&N(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,j()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?yr(t,t.stateNode,r,n):mr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return x(t,t.stateNode.containerInfo),o=t.pendingProps,j()||t.memoizedProps!==o?(null===e?t.child=mr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=v(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,j()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 11:return n=t.pendingProps.children,j()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=v(e,t),e;case 13:return function(e,t,n){var r=t.type.context,o=t.pendingProps,a=t.memoizedProps;if(!j()&&a===o)return t.stateNode=0,_(t),v(e,t);var i=o.value;if(t.memoizedProps=o,null===a)i=1073741823;else if(a.value===o.value){if(a.children===o.children)return t.stateNode=0,_(t),v(e,t);i=0}else{var s=a.value;if(s===i&&(0!==s||1/s==1/i)||s!=s&&i!=i){if(a.children===o.children)return t.stateNode=0,_(t),v(e,t);i=0}else if(i="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823,0==(i|=0)){if(a.children===o.children)return t.stateNode=0,_(t),v(e,t)}else y(t,r,i,n)}return t.stateNode=i,_(t),u(e,t,o.children),t.child}(e,t,n);case 12:r=t.type,i=t.pendingProps;var l=t.memoizedProps;return o=r._currentValue,s=r._changedBits,j()||0!==s||l!==i?(t.memoizedProps=i,void 0!==(l=i.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(s&l)&&y(t,r,s,n),u(e,t,n=(n=i.children)(o)),e=t.child):e=v(e,t),e;default:f("156")}}}}function br(e,t){var n=t.source;null===t.stack&&ut(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var gr={};function wr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)M(e),e=e.return;te=null,ne=0,ee=null,ae=!1}function n(e){return null!==ie&&ie.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=N(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var a=o.updateQueue;a=null===a?0:a.expirationTime;break e;default:a=0}for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ae=!0;break}e=n}else{if(null!==(e=L(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=S(e.alternate,e,ne);return null===t&&(t=r(e)),Ye.current=null,t}function i(e,n,a){J&&f("243"),J=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Kn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(a)for(;null!==ee&&!E();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){i=!0,j(e);break}var s=(a=ee).return;if(null===s){i=!0,j(e);break}R(s,a,e),ee=r(a)}break}return J=!1,i||null!==ee?null:ae?(e.pendingCommitExpirationTime=n,e.current.alternate):void f("262")}function s(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ut(e)},next:null}),p(t,r)}function l(e,t){e:{J&&!oe&&f("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function u(e){return e=0!==Z?Z:J?oe?1:ne:1&e.mode?xe?10*(1+((d()+50)/10|0)):25*(1+((d()+500)/25|0)):1,xe&&(0===he||e>he)&&(he=e),e}function p(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!J&&0!==ne&&n<ne&&t(),J&&!oe&&te===r||y(r,n),Ee>ke&&f("185")}e=e.return}n=void 0}return n}function d(){return X=V()-Q,2+(X/10|0)}function h(e,t,n,r,o){var a=Z;Z=1;try{return e(t,n,r,o)}finally{Z=a}}function m(e){if(0!==ue){if(e>ue)return;K(ce)}var t=V()-Q;ue=e,ce=q(b,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(se=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ge?we&&(pe=e,de=1,_(e,1,!1)):1===t?g():m(t))}function v(){var e=0,t=null;if(null!==le)for(var n=le,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&f("244"),r===r.nextScheduledRoot){se=le=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?Ee++:Ee=0,pe=t,de=e}function b(e){w(0,!0,e)}function g(){w(1,!1,null)}function w(e,t,n){if(be=n,v(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!me||d()>=de);)_(pe,de,!me),v();else for(;null!==pe&&0!==de&&(0===e||e>=de);)_(pe,de,!1),v();null!==be&&(ue=0,ce=-1),0!==de&&m(de),be=null,me=!1,x()}function x(){if(Ee=0,null!==_e){var e=_e;_e=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,ve=e)}}}if(ye)throw e=ve,ve=null,ye=!1,e}function _(e,t,n){fe&&f("245"),fe=!0,n?null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(E()?e.finishedWork=n:k(e,n,t))):null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&k(e,n,t)),fe=!1}function k(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===_e?_e=[r]:_e.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=J=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for($(n.containerInfo),re=a;null!==re;){var i=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&A(re.alternate,re),re=re.nextEffect}catch(e){i=!0,s=e}i&&(null===re&&f("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(re=a;null!==re;){i=!1,s=void 0;try{for(;null!==re;){var u=re.effectTag;if(16&u&&I(re),128&u){var c=re.alternate;null!==c&&W(c)}switch(14&u){case 2:z(re),re.effectTag&=-3;break;case 6:z(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){i=!0,s=e}i&&(null===re&&f("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(Y(n.containerInfo),n.current=t,re=a;null!==re;){u=!1,c=void 0;try{for(a=n,i=o,s=r;null!==re;){var p=re.effectTag;36&p&&D(a,re.alternate,re,i,s),256&p&&H(re,j),128&p&&B(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){u=!0,c=e}u&&(null===re&&f("178"),l(re,c),null!==re&&(re=re.nextEffect))}J=oe=!1,er(t.stateNode),0===(t=n.current.expirationTime)&&(ie=null),e.remainingExpirationTime=t}function E(){return!(null===be||be.timeRemaining()>je)&&(me=!0)}function j(e){null===pe&&f("246"),pe.remainingExpirationTime=0,ye||(ye=!0,ve=e)}var C=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),O=function(e,t){function n(e){return e===gr&&f("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var a=t.push,i=t.pop,s=e(gr),l=e(gr),u=e(gr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(u.current)},popHostContainer:function(e){i(s,e),i(l,e),i(u,e)},popHostContext:function(e){l.current===e&&(i(s,e),i(l,e))},pushHostContainer:function(e,t){a(u,t,e),t=o(t),a(l,e,e),a(s,t,e)},pushHostContext:function(e){var t=n(u.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(a(l,e,e),a(s,t,e))}}}(e,C),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",lt(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,l=o(c),u=o(!1),p=c;return{getUnmaskedContext:function(e){return n(e)?p:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return c;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=n[a];return o&&t(e,n,i),i},hasContextChanged:function(){return u.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(u,e),s(l,e))},popTopLevelContextObject:function(e){s(u,e),s(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&f("168"),i(l,t,e),i(u,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||c,p=l.current,i(l,t,e),i(u,u.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||f("169"),t){var o=r(e,p);n.__reactInternalMemoizedMergedChildContext=o,s(u,e),s(l,e),i(l,o,e)}else s(u,e);i(u,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&f("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||f("171")}return e.stateNode.context}}}(C);C=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),a=t(null),i=t(0);return{pushProvider:function(e){var t=e.type.context;n(i,t._changedBits,e),n(a,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=i.current,n=a.current;r(o,e),r(a,e),r(i,e),(e=e.type.context)._currentValue=n,e._changedBits=t}}}(C);var T=function(e){function t(e,t){var n=new qn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){f("175")},prepareToHydrateHostTextInstance:function(){f("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,s=e.getNextHydratableSibling,l=e.getFirstHydratableChild,u=e.hydrateInstance,c=e.hydrateTextInstance,p=null,d=null,h=!1;return{enterHydrationState:function(e){return d=l(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){d=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,d)}p=e,d=l(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=u(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=s(n);return r(e),d=p?s(e.stateNode):null,!0}}}(e),S=vr(e,O,P,C,T,p,u).beginWork,N=function(e,t,n,r,o){function a(e){e.effectTag|=4}var i=e.createInstance,s=e.createTextInstance,l=e.appendInitialChild,u=e.finalizeInitialChildren,c=e.prepareUpdate,p=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,v=n.popContextProvider,b=n.popTopLevelContextObject,g=r.popProvider,w=o.prepareToHydrateHostInstance,x=o.prepareToHydrateHostTextInstance,_=o.popHydrationState,k=void 0,E=void 0,j=void 0;return e.mutation?(k=function(){},E=function(e,t,n){(t.updateQueue=n)&&a(t)},j=function(e,t,n,r){n!==r&&a(t)}):f(p?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return v(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),b(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(_(t),t.effectTag&=-3),k(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var p=e.memoizedProps,C=t.stateNode,O=m();C=c(C,o,p,r,n,O),E(e,t,C,o,p,r,n,O),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&f("166"),null;if(e=m(),_(t))w(t,n,e)&&a(t);else{p=i(o,r,n,e,t);e:for(O=t.child;null!==O;){if(5===O.tag||6===O.tag)l(p,O.stateNode);else if(4!==O.tag&&null!==O.child){O.child.return=O,O=O.child;continue}if(O===t)break;for(;null===O.sibling;){if(null===O.return||O.return===t)break e;O=O.return}O.sibling.return=O.return,O=O.sibling}u(p,o,r,n,e)&&a(t),t.stateNode=p}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)j(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&f("166"),null;e=d(),n=m(),_(t)?x(t)&&a(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||f("165"),t.tag=8,o=[];e:for((p=t.stateNode)&&(p.return=t);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)f("247");else if(9===p.tag)o.push(p.pendingProps.value);else if(null!==p.child){p.child.return=p,p=p.child;continue}for(;null===p.sibling;){if(null===p.return||p.return===t)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}return r=(p=r.handler)(r.props,o),t.child=mr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),k(t),null;case 13:return g(t),null;case 12:return null;case 0:f("167");default:f("156")}}}}(e,O,P,C,T).completeWork,R=(O=function(e,t,n,r,o){var a=e.popHostContainer,i=e.popHostContext,s=t.popContextProvider,l=t.popTopLevelContextObject,u=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ut(t)};do{switch(e.tag){case 3:return ir(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ir(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return a(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return i(e),null;case 4:return a(e),null;case 13:return u(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:a(e),l(e);break;case 5:i(e);break;case 4:a(e);break;case 13:u(e)}}}}(O,P,C,0,n)).throwException,L=O.unwindWork,M=O.unwindInterruptedWork,A=(O=function(e,t,n,r,o){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function i(e){switch(tr(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:s(e.stateNode);break;case 4:p&&u(e)}}function s(e){for(var t=e;;)if(i(t),null===t.child||p&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function u(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?_(r,t.stateNode):x(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,p=e.mutation;e=e.persistence,p||f(e?"235":"236");var d=p.commitMount,h=p.commitUpdate,m=p.resetTextContent,y=p.commitTextUpdate,v=p.appendChild,b=p.appendChildToContainer,g=p.insertBefore,w=p.insertInContainerBefore,x=p.removeChild,_=p.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:f("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?w(t,o.stateNode,n):g(t,o.stateNode,n):r?b(t,o.stateNode):v(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){u(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&h(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&f("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:f("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&cr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}cr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:f("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&f("264");var a=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){var i=(r=a[n]).value,s=r.stack;br(e,r),t.componentDidCatch(i,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&f("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)br(e,r=a[n]),t(r.value);break;default:f("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ie?ie=new Set([e]):ie.add(e)})).commitBeforeMutationLifeCycles,I=O.commitResetTextContent,z=O.commitPlacement,U=O.commitDeletion,F=O.commitWork,D=O.commitLifeCycles,H=O.commitErrorLogging,B=O.commitAttachRef,W=O.commitDetachRef,V=e.now,q=e.scheduleDeferredCallback,K=e.cancelDeferredCallback,$=e.prepareForCommit,Y=e.resetAfterCommit,Q=V(),X=Q,G=0,Z=0,J=!1,ee=null,te=null,ne=0,re=null,oe=!1,ae=!1,ie=null,se=null,le=null,ue=0,ce=-1,fe=!1,pe=null,de=0,he=0,me=!1,ye=!1,ve=null,be=null,ge=!1,we=!1,xe=!1,_e=null,ke=1e3,Ee=0,je=1;return{recalculateCurrentTime:d,computeExpirationForFiber:u,scheduleWork:p,requestWork:y,flushRoot:function(e,t){fe&&f("253"),pe=e,de=t,_(e,t,!1),g(),x()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||g()}},unbatchedUpdates:function(e,t){if(ge&&!we){we=!0;try{return e(t)}finally{we=!1}}return e(t)},flushSync:function(e,t){fe&&f("187");var n=ge;ge=!0;try{return h(e,t)}finally{ge=n,g()}},flushControlled:function(e){var t=ge;ge=!0;try{h(e)}finally{(ge=t)||fe||w(1,!1,null)}},deferredUpdates:function(e){var t=Z;Z=25*(1+((d()+500)/25|0));try{return e()}finally{Z=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(xe)return e(t,n);ge||fe||0===he||(w(he,!1,null),he=0);var r=xe,o=ge;ge=xe=!0;try{return e(t,n)}finally{xe=r,(ge=o)||fe||g()}},flushInteractiveUpdates:function(){fe||0===he||(w(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:P}}function xr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var i=u(n);n=f(n)?p(n,i):i}else n=c;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),s(r,o),o}function n(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var r=e.getPublicInstance,o=(e=wr(e)).recalculateCurrentTime,i=e.computeExpirationForFiber,s=e.scheduleWork,l=e.legacyContext,u=l.findCurrentUnmaskedContext,f=l.isContextProvider,p=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new qn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,r,a){var s=n.current;return t(e,n,r,o(),s=i(s),a)},updateContainerAtExpirationTime:function(e,n,r,a,i){return t(e,n,r,o(),a,i)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return r(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:n,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Gn=Jn(function(e){return t.onCommitFiberRoot(n,e)}),Zn=Jn(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return n(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var _r=Object.freeze({default:xr}),kr=_r&&xr||_r,Er=kr.default?kr.default:kr;var jr="object"==typeof performance&&"function"==typeof performance.now,Cr=void 0;Cr=jr?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Pr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Tr=null,Sr=!1,Nr=-1,Rr=!1,Lr=0,Mr=33,Ar=33,Ir=void 0;Ir=jr?{didTimeout:!1,timeRemaining:function(){var e=Lr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Lr-Date.now();return 0<e?e:0}};var zr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===zr){if(Sr=!1,e=Cr(),0>=Lr-e){if(!(-1!==Nr&&Nr<=e))return void(Rr||(Rr=!0,requestAnimationFrame(Ur)));Ir.didTimeout=!0}else Ir.didTimeout=!1;Nr=-1,e=Tr,Tr=null,null!==e&&e(Ir)}},!1);var Ur=function(e){Rr=!1;var t=e-Lr+Ar;t<Ar&&Mr<Ar?(8>t&&(t=8),Ar=t<Mr?Mr:t):Mr=t,Lr=e+Ar,Sr||(Sr=!0,window.postMessage(zr,"*"))};Or=function(e,t){return Tr=e,null!=t&&"number"==typeof t.timeout&&(Nr=Cr()+t.timeout),Rr||(Rr=!0,requestAnimationFrame(Ur)),0},Pr=function(){Tr=null,Sr=!1,Nr=-1}}else Or=window.requestIdleCallback,Pr=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Fr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Dr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Br(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Vr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function qr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Kr="http://www.w3.org/1999/xhtml",$r="http://www.w3.org/2000/svg";function Yr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Xr,Gr=void 0,Zr=(Xr=function(e,t){if(e.namespaceURI!==$r||"innerHTML"in e)e.innerHTML=t;else{for((Gr=Gr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Gr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(e,t)})}:Xr);function Jr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},to=["Webkit","ms","Moz","O"];function no(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||eo.hasOwnProperty(o)&&eo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(eo).forEach(function(e){to.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),eo[t]=eo[e]})});var ro=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function oo(e,t,n){t&&(ro[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var io=Kr,so=i.thatReturns("");function lo(e,t){var n=Ln(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?gn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(gn("topFocus","focus",e),gn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Ve("cancel",!0)&&gn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(Ve("close",!0)&&gn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(o)&&bn(o,Pn[o],e),n[o]=!0)}}function uo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===io&&(r=Yr(e)),r===io?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":bn("topLoad","load",e);var s=n;break;case"video":case"audio":for(s in Tn)Tn.hasOwnProperty(s)&&bn(s,Tn[s],e);s=n;break;case"source":bn("topError","error",e),s=n;break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e),s=n;break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e),s=n;break;case"details":bn("topToggle","toggle",e),s=n;break;case"input":gt(e,n),s=bt(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":s=Fr(e,n);break;case"select":Hr(e,n),s=a({},n,{value:void 0}),bn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":Wr(e,n),s=Br(e,n),bn("topInvalid","invalid",e),lo(r,"onChange");break;default:s=n}oo(t,s,so);var l,u=s;for(l in u)if(u.hasOwnProperty(l)){var c=u[l];"style"===l?no(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Zr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&Jr(e,c):"number"==typeof c&&Jr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(g.hasOwnProperty(l)?null!=c&&lo(r,l):null!=c&&vt(e,l,c,o))}switch(t){case"input":Ke(e),_t(e,n);break;case"textarea":Ke(e),qr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Dr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Dr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=i)}}function po(e,t,n,r,o){var s=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),s=[];break;case"option":n=Fr(e,n),r=Fr(e,r),s=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),s=[];break;case"textarea":n=Br(e,n),r=Br(e,r),s=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=i)}oo(t,r,so),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(g.hasOwnProperty(e)?s||(s=[]):(s=s||[]).push(e,null));for(e in r){var c=r[e];if(u=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==u&&(null!=c||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&u[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(s||(s=[]),s.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(e,""+c)):"children"===e?u===c||"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(g.hasOwnProperty(e)?(null!=c&&lo(o,e),s||u===c||(s=[])):(s=s||[]).push(e,c))}return l&&(s=s||[]).push("style",l),s}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),ao(n,r),r=ao(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],s=t[a+1];"style"===i?no(e,s):"dangerouslySetInnerHTML"===i?Zr(e,s):"children"===i?Jr(e,s):vt(e,i,s,r)}switch(n){case"input":xt(e,o);break;case"textarea":Vr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Dr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Dr(e,!!o.multiple,o.defaultValue,!0):Dr(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":bn("topLoad","load",e);break;case"video":case"audio":for(var a in Tn)Tn.hasOwnProperty(a)&&bn(a,Tn[a],e);break;case"source":bn("topError","error",e);break;case"img":case"image":case"link":bn("topError","error",e),bn("topLoad","load",e);break;case"form":bn("topReset","reset",e),bn("topSubmit","submit",e);break;case"details":bn("topToggle","toggle",e);break;case"input":gt(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Hr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":Wr(e,n),bn("topInvalid","invalid",e),lo(o,"onChange")}for(var s in oo(t,n,so),r=null,n)n.hasOwnProperty(s)&&(a=n[s],"children"===s?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):g.hasOwnProperty(s)&&null!=a&&lo(o,s));switch(t){case"input":Ke(e),_t(e,n);break;case"textarea":Ke(e),qr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=i)}return r}function yo(e,t){return e.nodeValue!==t}var vo=Object.freeze({createElement:uo,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||f("90"),$e(r),xt(r,o)}}}break;case"textarea":Vr(e,n);break;case"select":null!=(t=n.value)&&Dr(e,!!n.multiple,t,!1)}}});Ne.injectFiberControlledHostComponent(vo);var bo=null,go=null;function wo(e){this._expirationTime=jo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function _o(e,t,n){this._internalRoot=jo.createContainer(e,t,n)}function ko(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Eo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}wo.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xo;return jo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},wo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,jo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},_o.prototype.render=function(e,t){var n=this._internalRoot,r=new xo;return null!==(t=void 0===t?null:t)&&r.then(t),jo.updateContainer(e,n,null,r._onCommit),r},_o.prototype.unmount=function(e){var t=this._internalRoot,n=new xo;return null!==(e=void 0===e?null:e)&&n.then(e),jo.updateContainer(null,t,null,n._onCommit),n},_o.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new xo;return null!==(n=void 0===n?null:n)&&o.then(n),jo.updateContainer(t,r,e,o._onCommit),o},_o.prototype.createBatch=function(){var e=new wo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var jo=Er({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){bo=yn;var e=s();if(In(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,l=-1,u=0,c=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(i=a+r),f!==o||0!==n&&3!==f.nodeType||(l=a+n),3===f.nodeType&&(a+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++u===r&&(i=a),p===o&&++c===n&&(l=a),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===i||-1===l?null:{start:i,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;go={focusedElem:e,selectionRange:t},vn(!1)},resetAfterCommit:function(){var e=go,t=s(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&u(document.documentElement,n)){if(In(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[re()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=An(n,e);var a=An(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}go=null,vn(bo),bo=null},createInstance:function(e,t,n,r,o){return(e=uo(e,t,n,r))[D]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),Eo(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[D]=r,e},now:Cr,mutation:{commitMount:function(e,t,n){Eo(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){Jr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[D]=a,e[H]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[D]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Pr}),Co=jo;function Oo(e,t,n,r,o){ko(n)||f("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=jo.getPublicRootInstance(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new _o(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=jo.getPublicRootInstance(a._internalRoot);s.call(e)}}jo.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return jo.getPublicRootInstance(a._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ko(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Je,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ie=Co.batchedUpdates,ze=Co.interactiveUpdates,Ue=Co.flushInteractiveUpdates;var To={createPortal:Po,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return jo.findHostInstance(t);"function"==typeof e.render?f("188"):f("213",Object.keys(e))},hydrate:function(e,t,n){return Oo(null,e,t,!0,n)},render:function(e,t,n){return Oo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),Oo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ko(e)||f("40"),!!e._reactRootContainer&&(jo.unbatchedUpdates(function(){Oo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:jo.batchedUpdates,unstable_deferredUpdates:jo.deferredUpdates,flushSync:jo.flushSync,unstable_flushControlled:jo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:k,EventPropagators:te,ReactControlledComponent:Ae,ReactDOMComponentTree:q,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new _o(e,!0,null!=t&&!0===t.hydrate)}};jo.injectIntoDevTools({findFiberByHostInstance:B,bundleType:0,version:"16.3.0",rendererPackageName:"react-dom"});var So=Object.freeze({default:To}),No=So&&To||So;e.exports=No.default?No.default:No},"./node_modules/react-dom/index.js":function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n("./node_modules/react-dom/cjs/react-dom.production.min.js")},"./node_modules/react-router-dom/es/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/warning/browser.js"),o=n.n(r),a=n("./node_modules/react/index.js"),i=n.n(a),s=n("./node_modules/prop-types/index.js"),l=n.n(s),u=n("./node_modules/history/createBrowserHistory.js"),c=n.n(u),f=n("./node_modules/invariant/browser.js"),p=n.n(f),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=h(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var y=m,v=y;function b(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var g=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=b(this,e.call.apply(e,[this].concat(a))),r.history=c()(r.props),b(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(v,{history:this.history,children:this.props.children})},t}(i.a.Component);g.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var w=g,x=n("./node_modules/history/createHashHistory.js"),_=n.n(x);function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var E=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=k(this,e.call.apply(e,[this].concat(a))),r.history=_()(r.props),k(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(v,{history:this.history,children:this.props.children})},t}(i.a.Component);E.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var j=E,C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var P=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},T=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=O(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!P(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return i.a.createElement("a",C({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(i.a.Component);T.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},T.defaultProps={replace:!1},T.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var S=T,N=n("./node_modules/history/createMemoryHistory.js"),R=n.n(N);function L(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var M=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=L(this,e.call.apply(e,[this].concat(a))),r.history=R()(r.props),L(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(y,{history:this.history,children:this.props.children})},t}(i.a.Component);M.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var A=M,I=n("./node_modules/react-router/node_modules/path-to-regexp/index.js"),z=n.n(I),U={},F=0,D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,a=n.exact,i=void 0!==a&&a,s=n.strict,l=void 0!==s&&s,u=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=U[n]||(U[n]={});if(r[e])return r[e];var o=[],a={re:z()(e,o,t),keys:o};return F<1e4&&(r[e]=a,F++),a}(o,{end:i,strict:l,sensitive:void 0!==u&&u}),f=c.re,p=c.keys,d=f.exec(e);if(!d)return null;var h=d[0],m=d.slice(1),y=e===h;return i&&!y?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:y,params:p.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function B(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var W=function(e){return 0===i.a.Children.count(e)},V=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=B(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},B(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:H({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,s=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,u=(r||l.location).pathname;return o?D(u,{path:o,strict:a,exact:i,sensitive:s}):l.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!W(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!W(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,s=a.history,l=a.route,u=a.staticContext,c={match:e,location:this.props.location||l.location,history:s,staticContext:u};return r?e?i.a.createElement(r,c):null:o?e?o(c):null:n?"function"==typeof n?n(c):W(n)?null:i.a.Children.only(n):null},t}(i.a.Component);V.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},V.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},V.childContextTypes={router:l.a.object.isRequired};var q=V,K=q,$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Q=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,s=e.className,l=e.activeStyle,u=e.style,c=e.isActive,f=e.ariaCurrent,p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return i.a.createElement(K,{path:"object"===(void 0===t?"undefined":Y(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return i.a.createElement(S,$({to:t,className:o?[s,a].filter(function(e){return e}).join(" "):s,style:o?$({},u,l):u,"aria-current":o&&f},p))}})};Q.propTypes={to:S.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},Q.defaultProps={activeClassName:"active",ariaCurrent:"true"};var X=Q;var G=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);G.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},G.defaultProps={when:!0},G.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var Z=G,J=n("./node_modules/resolve-pathname/index.js"),ee=n("./node_modules/value-equal/index.js"),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(J.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(i.a.Component);oe.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ae=oe,ie=n("./node_modules/history/PathUtils.js"),se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ue=function(e,t){return e?se({},t,{pathname:Object(ie.addLeadingSlash)(e)+t.pathname}):t},ce=function(e){return"string"==typeof e?Object(ie.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,a=void 0===o?"":o,i=t.hash,s=void 0===i?"":i,{pathname:r,search:"?"===a?"":a,hash:"#"===s?"":s});var t,n,r,o,a,i,s},fe=function(e){return"string"==typeof e?e:Object(ie.createPath)(e)},pe=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},de=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Object(ie.addLeadingSlash)(r.props.basename+fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=ue(n,ce(e)),o.url=fe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=ue(n,ce(e)),o.url=fe(o.location)},r.handleListen=function(){return de},r.handleBlock=function(){return de},le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ie.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:se({},t,{pathname:t.pathname.substr(n.length)})}(t,ce(n)),push:this.handlePush,replace:this.handleReplace,go:pe("go"),goBack:pe("goBack"),goForward:pe("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(y,se({},r,{history:o}))},t}(i.a.Component);he.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:l.a.object.isRequired};var me=he;var ye=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(i.a.isValidElement(t)){var a=t.props,s=a.path,l=a.exact,u=a.strict,c=a.sensitive,f=a.from,p=s||f;null==r&&(o=t,r=p?D(n.pathname,{path:p,exact:l,strict:u,sensitive:c}):e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);ye.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ye.propTypes={children:l.a.node,location:l.a.object};var ve=ye,be=D,ge=n("./node_modules/hoist-non-react-statics/index.js"),we=n.n(ge),xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var _e=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(q,{render:function(t){return i.a.createElement(e,xe({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},we()(t,e)};n.d(t,"BrowserRouter",function(){return w}),n.d(t,"HashRouter",function(){return j}),n.d(t,"Link",function(){return S}),n.d(t,"MemoryRouter",function(){return A}),n.d(t,"NavLink",function(){return X}),n.d(t,"Prompt",function(){return Z}),n.d(t,"Redirect",function(){return ae}),n.d(t,"Route",function(){return K}),n.d(t,"Router",function(){return v}),n.d(t,"StaticRouter",function(){return me}),n.d(t,"Switch",function(){return ve}),n.d(t,"matchPath",function(){return be}),n.d(t,"withRouter",function(){return _e})},"./node_modules/react-router/node_modules/isarray/index.js":function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},"./node_modules/react-router/node_modules/path-to-regexp/index.js":function(e,t,n){var r=n("./node_modules/react-router/node_modules/isarray/index.js");e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return s(a(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,s="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(s+=e.slice(i,d),i=d+f.length,p)s+=p[1];else{var h=e[i],m=n[2],y=n[3],v=n[4],b=n[5],g=n[6],w=n[7];s&&(r.push(s),s="");var x=null!=m&&null!=h&&h!==m,_="+"===g||"*"===g,k="?"===g||"*"===g,E=n[2]||c,j=v||b;r.push({name:y||a++,prefix:m||"",delimiter:E,optional:k,repeat:_,partial:x,asterisk:!!w,pattern:j?u(j):w?".*":"[^"+l(E)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",s=n||{},l=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,p=s[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)i+=l(u);else{var p=l(u.prefix),d="(?:"+u.pattern+")";t.push(u),u.repeat&&(d+="(?:"+p+d+")*"),i+=d=u.optional?u.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},"./node_modules/react-spinners/dist/helpers/index.js":function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.calculateRgba=function(e,t){if("#"===e[0]&&(e=e.slice(1)),3===e.length){var n="";e.split("").forEach(function(e){n+=e,n+=e}),e=n}var r=e.match(/.{2}/g).map(function(e){return parseInt(e,16)}).join(", ");return"rgba("+r+", "+t+")"}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/index.js":function(e,t,n){var r,o,a;o=[e,n("./node_modules/react-spinners/dist/spinners/BarLoader.js"),n("./node_modules/react-spinners/dist/spinners/BeatLoader.js"),n("./node_modules/react-spinners/dist/spinners/BounceLoader.js"),n("./node_modules/react-spinners/dist/spinners/CircleLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClipLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js"),n("./node_modules/react-spinners/dist/spinners/DotLoader.js"),n("./node_modules/react-spinners/dist/spinners/FadeLoader.js"),n("./node_modules/react-spinners/dist/spinners/GridLoader.js"),n("./node_modules/react-spinners/dist/spinners/HashLoader.js"),n("./node_modules/react-spinners/dist/spinners/MoonLoader.js"),n("./node_modules/react-spinners/dist/spinners/PacmanLoader.js"),n("./node_modules/react-spinners/dist/spinners/PropagateLoader.js"),n("./node_modules/react-spinners/dist/spinners/PulseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RingLoader.js"),n("./node_modules/react-spinners/dist/spinners/RiseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RotateLoader.js"),n("./node_modules/react-spinners/dist/spinners/ScaleLoader.js"),n("./node_modules/react-spinners/dist/spinners/SyncLoader.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a,i,s,l,u,c,f,p,d,h,m,y,v,b,g){"use strict";var w=F(t),x=F(n),_=F(r),k=F(o),E=F(a),j=F(i),C=F(s),O=F(l),P=F(u),T=F(c),S=F(f),N=F(p),R=F(d),L=F(h),M=F(m),A=F(y),I=F(v),z=F(b),U=F(g);function F(e){return e&&e.__esModule?e:{default:e}}e.exports={BarLoader:w.default,BeatLoader:x.default,BounceLoader:_.default,CircleLoader:k.default,ClipLoader:E.default,ClimbingBoxLoader:j.default,DotLoader:C.default,FadeLoader:O.default,GridLoader:P.default,HashLoader:T.default,MoonLoader:S.default,PacmanLoader:N.default,PropagateLoader:R.default,PulseLoader:L.default,RingLoader:M.default,RiseLoader:A.default,RotateLoader:I.default,ScaleLoader:z.default,SyncLoader:U.default}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BarLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=(0,r.keyframes)("0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}"),p=(0,r.keyframes)("0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}"),d=e.Loader=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;overflow:hidden;background-color:",o.props.color,";background-clip:padding-box;display:block;border-radius:2px;will-change:left,right;animation-fill-mode:forwards;animation:",1===e?f:p," 2.1s ",2===e?"1.15s":""," ",1===e?"cubic-bezier(0.65, 0.815, 0.735, 0.395)":"cubic-bezier(0.165, 0.84, 0.44, 1)"," infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.width,"px;height:",o.props.height,"px;overflow:hidden;background-color:",(0,a.calculateRgba)(o.props.color,.2),";background-clip:padding-box;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);d.propTypes={loading:s.default.bool,color:s.default.string,width:s.default.number,height:s.default.number},d.defaultProps={loading:!0,color:"#000000",width:100,height:4};var h=(0,o.onlyUpdateForKeys)(["loading","color","width","height"])(d);h.defaultProps=d.defaultProps,e.default=h})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BeatLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{transform:scale(0.75);opacity:0.2}100%{transform:scale(1);opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;animation:",c," 0.7s ",e%2?"0s":"0.35s"," infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BounceLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size,"px;width:",o.props.size,"px;background-color:",o.props.color,";border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation:",c," 2.1s ",1===e?"1s":"0s"," infinite ease-in-out;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/CircleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size*(1-e/10),"px;width:",o.props.size*(1-e/10),"px;border:1px solid ",o.props.color,";border-radius:100%;transition:2s;border-bottom:none;border-right:none;top:",.7*e*2.5,"%;left:",.35*e*2.5,"%;animation-fill-mode:'';animation:",c," 1s ",.2*e,"s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:50};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:translate(0,-1em) rotate(-45deg)}5%{transform:translate(0,-1em) rotate(-50deg)}20%{transform:translate(1em,-2em) rotate(47deg)}25%{transform:translate(1em,-2em) rotate(45deg)}30%{transform:translate(1em,-2em) rotate(40deg)}45%{transform:translate(2em,-3em) rotate(137deg)}50%{transform:translate(2em,-3em) rotate(135deg)}55%{transform:translate(2em,-3em) rotate(130deg)}70%{transform:translate(3em,-4em) rotate(217deg)}75%{transform:translate(3em,-4em) rotate(220deg)}100%{transform:translate(0,-1em) rotate(-225deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{position:absolute;left:0;bottom:-0.1em;height:1em;width:1em;background-color:transparent;border-radius:15%;border:0.25em solid ",o.props.color,";transform:translate(0,-1em) rotate(-45deg);animation-fill-mode:both;animation:",c," 2.5s infinite cubic-bezier(.79,0,.47,.97);}")},o.wrapper=function(){return(0,r.css)("{position:absolute;top:50%;left:50%;margin-top:-2.7em;margin-left:-2.7em;width:5.4em;height:5.4em;font-size:",o.props.size,";}")},o.hill=function(){return(0,r.css)("{position:absolute;width:7.1em;height:7.1em;top:1.7em;left:1.7em;border-left:0.25em solid ",o.props.color,";transform:rotate(45deg);}")},o.container=(0,r.css)("{position:relative;width:7.1em;height:7.1em;}"),u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.container},a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style()}),a.default.createElement("div",{className:this.hill()}))):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:15};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClipLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(0.8)}100%{transform:rotate(360deg) scale(1)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{background:transparent !important;width:",o.props.size,"px;height:",o.props.size,"px;border-radius:100%;border:2px solid;border-color:",o.props.color,";border-bottom-color:transparent;display:inline-block;animation:",c," 0.75s 0s infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.style()}):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:35};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/DotLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:",e%2?"0":"auto",";bottom:",e%2?"auto":"0",";height:",o.props.size/2,"px;width:",o.props.size/2,"px;background-color:",o.props.color,";border-radius:100%;animation-fill-mode:forwards;animation:",f," 2s ",2===e?"-1s":"0s"," infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;animation-fill-mode:forwards;animation:",c," 2s 0s infinite linear;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},p.defaultProps={loading:!0,color:"#000000",size:60};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/FadeLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{opacity:0.3}100%{opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;width:",o.props.width,"px;margin:",o.props.margin,";background-color:",o.props.color,";border-radius:",o.props.radius,";transition:2s;animation-fill-mode:'both';animation:",c," 1.2s ",.12*e,"s infinite ease-in-out;}")},o.radius=20,o.quarter=o.radius/2+o.radius/5.5,o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;top:",o.radius,"px;left:",o.radius,"px;width:",3*o.radius,"px;height:",3*o.radius,"px;}")},o.a=function(){return(0,r.css)("composes:",o.style(1),";top:",o.radius,";left:0;")},o.b=function(){return(0,r.css)("composes:",o.style(2),";top:",o.quarter,";left:",o.quarter,";transform:rotate(-45deg);")},o.c=function(){return(0,r.css)("composes:",o.style(3),";top:0;left:",o.radius,";transform:rotate(90deg);")},o.d=function(){return(0,r.css)("composes:",o.style(4),";top:",-o.quarter,";left:",o.quarter,";transform:rotate(45deg);")},o.e=function(){return(0,r.css)("composes:",o.style(5),";top:",-o.radius,";left:0;")},o.f=function(){return(0,r.css)("composes:",o.style(6),";top:",-o.quarter,";left:",-o.quarter,";transform:rotate(-45deg);")},o.g=function(){return(0,r.css)("composes:",o.style(7),";top:0;left:",-o.radius,";transform:rotate(90deg);")},o.h=function(){return(0,r.css)("composes:",o.style(8),";top:",o.quarter,";left:",-o.quarter,";transform:rotate(45deg);")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.a()}),a.default.createElement("div",{className:this.b()}),a.default.createElement("div",{className:this.c()}),a.default.createElement("div",{className:this.d()}),a.default.createElement("div",{className:this.e()}),a.default.createElement("div",{className:this.f()}),a.default.createElement("div",{className:this.g()}),a.default.createElement("div",{className:this.h()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},f.defaultProps={loading:!0,color:"#000000",height:15,width:5,margin:"2px",radius:2};var p=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/GridLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1)}50%{transform:scale(0.5);opacity:0.7}100%{transform:scale(1);opacity:1}"),f=function(e){return Math.random()*e},p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,";height:",o.props.size,";margin:",o.props.margin,";border-radius:100%;animation-fill-mode:'both';animation:",c," ",e/100+.6,"s ",e/100-.2,"s infinite ease;}")},o.wrapper=function(){return(0,r.css)("{width:",3*parseFloat(o.props.size)+6*parseFloat(o.props.margin),"px;font-size:0;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/HashLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.thickness=function(){return o.props.size/5},o.lat=function(){return(o.props.size-o.thickness())/2},o.offset=function(){return o.lat()-o.thickness()},o.color=function(){return(0,a.calculateRgba)(o.props.color,.75)},o.before=function(){return(0,r.keyframes)("0%{width:",o.thickness(),"px;box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}35%{width:",o.props.size,"px;box-shadow:0 ",-o.offset(),"px ",o.color(),",0 ",o.offset(),"px ",o.color(),"}70%{width:",o.thickness(),"px;box-shadow:",-o.lat(),"px ",-o.offset(),"px ",o.color(),",",o.lat(),"px ",o.offset(),"px ",o.color(),"}100%{box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}")},o.after=function(){return(0,r.keyframes)("0%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}35%{height:",o.props.size,"px;box-shadow:",o.offset(),"px 0 ",o.color(),",",-o.offset(),"px 0 ",o.color(),"}70%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",-o.lat(),"px ",o.color(),",",-o.offset(),"px ",o.lat(),"px ",o.color(),"}100%{box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}")},o.style=function(e){return(0,r.css)("{position:absolute;content:'';top:50%;left:50%;display:block;width:",o.props.size/5,"px;height:",o.props.size/5,"px;border-radius:",o.props.size/10,"px;transform:translate(-50%,-50%);animation-fill-mode:none;animation:",1===e?o.before():o.after()," 2s infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;transform:rotate(165deg);}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);f.propTypes={loading:s.default.bool,size:s.default.number,color:s.default.string},f.defaultProps={loading:!0,size:50,color:"#000000"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/MoonLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.moonSize=function(){return o.props.size/7},o.ballStyle=function(e){return(0,r.css)("{width:",e,"px;height:",e,"px;border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size+2*o.moonSize(),"px;height:",o.props.size+2*o.moonSize(),"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;}")},o.ball=function(){return(0,r.css)("composes:",o.ballStyle(o.moonSize()),";background-color:",o.props.color,";opacity:0.8;position:absolute;top:",o.props.size/2-o.moonSize()/2,"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;")},o.circle=function(){return(0,r.css)("composes:",o.ballStyle(o.props.size),";border:",o.moonSize(),"px solid ",o.props.color,";opacity:0.1;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.ball()}),a.default.createElement("div",{className:this.circle()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PacmanLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(-44deg)}"),(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(44deg)}")],f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.ball=function(){return(0,r.keyframes)("75%{opacity:0.7}100%{transform:translate(",-4*o.props.size,"px,",-o.props.size/4,"px)}")},o.ballStyle=function(e){return(0,r.css)("{width:10px;height:10px;background-color:",o.props.color,";margin:",o.props.margin,";border-radius:100%;transform:translate(0,",-o.props.size/4,"px);position:absolute;top:25px;left:100px;animation:",o.ball()," 1s ",.25*e,"s infinite linear;animation-fill-mode:both;}")},o.s1=function(){return o.props.size+"px solid transparent"},o.s2=function(){return o.props.size+"px solid "+o.props.color},o.pacmanStyle=function(e){return(0,r.css)("{width:0;height:0;border-right:",o.s1(),";border-top:",0===e?o.s1():o.s2(),";border-left:",o.s2(),";border-bottom:",0===e?o.s2():o.s1(),";border-radius:",o.props.size,"px;position:absolute;animation:",c[e]," 0.8s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;height:",o.props.size,"px;width:",o.props.size,"px;}")},o.pac=function(){return o.pacmanStyle(0)},o.man=function(){return(0,r.css)("composes:",o.pacmanStyle(1),";position:absolute;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.pac()}),a.default.createElement("div",{className:this.man()}),a.default.createElement("div",{className:this.ballStyle(2)}),a.default.createElement("div",{className:this.ballStyle(3)}),a.default.createElement("div",{className:this.ballStyle(4)}),a.default.createElement("div",{className:this.ballStyle(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:25,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PropagateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[1,3,5],f=[(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}75%{transform:translateX(-",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}75%{transform:translateX(",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}")],p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;font-size:",o.props.size/3,"px;width:",o.props.size,"px;height:",o.props.size,"px;background:",o.props.color,";border-radius:50%;animation:",f[e]," 1.5s  infinite;animation-fill-mode:forwards;}")},o.wrapper=function(){return(0,r.css)("{position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,size:i.default.number,color:i.default.string},p.defaultProps={loading:!0,size:15,color:"#000000"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PulseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1);opacity:1}45%{transform:scale(0.1);opacity:0.7}80%{transform:scale(1);opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.75s ",.12*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RingLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}"),f=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:0;left:0;width:",o.props.size,"px;height:",o.props.size,"px;border:",o.props.size/10,"px solid ",o.props.color,";opacity:0.4;border-radius:100%;animation-fill-mode:forwards;perspective:800px;animation:",1===e?c:f," 2s 0s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{width:",o.props.size,"px;height:",o.props.size,"px;position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},p.defaultProps={loading:!0,color:"#000000",size:60};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RiseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1.1)}25%{translateY(-",30,"px)}50%{transform:scale(0.4)}75%{transform:translateY(",30,"px)}100%{transform:translateY(0) scale(1.0)}"),f=(0,r.keyframes)("0%{transform:scale(0.4)}25%{translateY(",30,"px)}50%{transform:scale(1.1)}75%{transform:translateY(",-30,"px)}100%{transform:translateY(0) scale(0.75)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",e%2==0?c:f," 1s 0s infinite cubic-bezier(.15,.46,.9,.6);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RotateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{opacity:0.8;position:absolute;top:0;left:",e%2?-28:25,"px;}")},o.ball=function(){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("composes:",o.ball(),";display:inline-block;position:relative;animation-fill-mode:both;animation:",c," 1s 0s infinite cubic-bezier(.7,-.13,.22,.86);")},o.long=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(1),";")},o.short=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(2),";")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.long()}),a.default.createElement("div",{className:this.short()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ScaleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scaley(1.0)}50%{transform:scaley(0.4)}100%{transform:scaley(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.width,"px;height:",o.props.height,"px;margin:",o.props.margin,";border-radius:",o.props.radius,"px;display:inline-block;animation:",c," 1s ",.1*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},f.defaultProps={loading:!0,color:"#000000",height:35,width:4,margin:"2px",radius:2};var p=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/SyncLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("33%{transform:translateY(10px)}66%{transform:translateY(-10px)}100%{transform:translateY(0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.6s ",.07*e,"s infinite ease-in-out;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/index.js":function(e,t,n){e.exports=n("./node_modules/react-spinners/dist/index.js")},"./node_modules/react/cjs/react.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/object-assign/index.js"),o=n("./node_modules/fbjs/lib/emptyObject.js"),a=n("./node_modules/fbjs/lib/emptyFunction.js"),i="function"==typeof Symbol&&Symbol.for,s=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,f=i?Symbol.for("react.provider"):60109,p=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.async_mode"):60111,h=i?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||v}function g(){}function w(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=b.prototype;var x=w.prototype=new g;x.constructor=w,r(x,b.prototype),x.isPureReactComponent=!0;var _={current:null},k=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function j(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:s,type:e,key:a,ref:i,props:o,_owner:_.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var O=/\/+/g,P=[];function T(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function S(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function N(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case s:case l:a=!0}}if(a)return n(r,e,""===t?"."+R(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+R(o=e[i],i);a+=N(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=m&&e[m]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=N(o=o.value,u=t+R(o,i++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?A(e,r,n,a.thatReturnsArgument):null!=e&&(C(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function A(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(O,"$&/")+"/"),t=T(t,a,r,o),null==e||N(e,"",M,t),S(t)}var I={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return A(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=T(null,null,t,n),null==e||N(e,"",L,t),S(t)},count:function(e){return null==e?0:N(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return A(e,t,null,a.thatReturnsArgument),t},only:function(e){return C(e)||y("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:f,context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:u,StrictMode:c,unstable_AsyncMode:d,createElement:j,cloneElement:function(e,t,n){var o=void 0,a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!E.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:s,type:e.type,key:i,ref:l,props:a,_owner:u}},createFactory:function(e){var t=j.bind(null,e);return t.type=e,t},isValidElement:C,version:"16.3.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},z=Object.freeze({default:I}),U=z&&I||z;e.exports=U.default?U.default:U},"./node_modules/react/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react/cjs/react.production.min.js")},"./node_modules/recompose/es/Recompose.js":function(e,t,n){"use strict";n.r(t),n.d(t,"mapProps",function(){return m}),n.d(t,"withProps",function(){return x}),n.d(t,"withPropsOnChange",function(){return k}),n.d(t,"withHandlers",function(){return j}),n.d(t,"defaultProps",function(){return C}),n.d(t,"renameProp",function(){return P}),n.d(t,"renameProps",function(){return S}),n.d(t,"flattenProp",function(){return N}),n.d(t,"withState",function(){return R}),n.d(t,"withStateHandlers",function(){return L}),n.d(t,"withReducer",function(){return M}),n.d(t,"branch",function(){return I}),n.d(t,"renderComponent",function(){return z}),n.d(t,"renderNothing",function(){return F}),n.d(t,"shouldUpdate",function(){return D}),n.d(t,"pure",function(){return H}),n.d(t,"onlyUpdateForKeys",function(){return B}),n.d(t,"onlyUpdateForPropTypes",function(){return W}),n.d(t,"withContext",function(){return V}),n.d(t,"getContext",function(){return q}),n.d(t,"lifecycle",function(){return K}),n.d(t,"toClass",function(){return Y}),n.d(t,"setStatic",function(){return f}),n.d(t,"setPropTypes",function(){return Q}),n.d(t,"setDisplayName",function(){return p}),n.d(t,"compose",function(){return X}),n.d(t,"getDisplayName",function(){return d}),n.d(t,"wrapDisplayName",function(){return h}),n.d(t,"isClassComponent",function(){return $}),n.d(t,"createSink",function(){return G}),n.d(t,"componentFromProp",function(){return Z}),n.d(t,"nest",function(){return J}),n.d(t,"hoistStatics",function(){return ee}),n.d(t,"componentFromStream",function(){return ae}),n.d(t,"componentFromStreamWithConfig",function(){return oe}),n.d(t,"mapPropsStream",function(){return le}),n.d(t,"mapPropsStreamWithConfig",function(){return se}),n.d(t,"createEventHandler",function(){return ce}),n.d(t,"createEventHandlerWithConfig",function(){return ue}),n.d(t,"setObservableConfig",function(){return ne});var r=n("./node_modules/react/index.js"),o=n.n(r),a=n("./node_modules/fbjs/lib/shallowEqual.js"),i=n.n(a);n.d(t,"shallowEqual",function(){return i.a});var s=n("./node_modules/hoist-non-react-statics/index.js"),l=n.n(s),u=n("./node_modules/change-emitter/lib/index.js"),c=n("./node_modules/symbol-observable/es/index.js"),f=function(e,t){return function(n){return n[e]=t,n}},p=function(e){return f("displayName",e)},d=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0},h=function(e,t){return t+"("+d(e)+")"},m=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(e(t))}}},y=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},v=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},b=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},g=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},w=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},x=function(e){return m(function(t){return v({},t,"function"==typeof e?e(t):e)})},_=function(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r];e.hasOwnProperty(o)&&(n[o]=e[o])}return n},k=function(e,t){return function(n){var o=Object(r.createFactory)(n),a="function"==typeof e?e:function(t,n){return!i()(_(t,e),_(n,e))};return function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=w(this,e.call.apply(e,[this].concat(i))),o.computedProps=t(o.props),w(o,r)}return b(n,e),n.prototype.componentWillReceiveProps=function(e){a(this.props,e)&&(this.computedProps=t(e))},n.prototype.render=function(){return o(v({},this.props,this.computedProps))},n}(r.Component)}},E=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r));return n},j=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=w(this,e.call.apply(e,[this].concat(i))),a.call(r),w(r,n)}return b(t,e),t.prototype.componentWillReceiveProps=function(){this.cachedHandlers={}},t.prototype.render=function(){return n(v({},this.props,this.handlers))},t}(r.Component),a=function(){var t=this;this.cachedHandlers={},this.handlers=E("function"==typeof e?e(this.props):e,function(e,n){return function(){var r=t.cachedHandlers[n];if(r)return r.apply(void 0,arguments);var o=e(t.props);return t.cachedHandlers[n]=o,o.apply(void 0,arguments)}})};return o}},C=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){return n(e)};return o.defaultProps=e,o}},O=function(e,t){for(var n=g(e,[]),r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&delete n[o]}return n},P=function(e,t){return m(function(n){var r;return v({},O(n,[e]),((r={})[t]=n[e],r))})},T=Object.keys,S=function(e){return m(function(t){return v({},O(t,T(e)),(n=_(t,T(e)),r=function(t,n){return e[n]},T(n).reduce(function(e,t){var o=n[t];return e[r(o,t)]=o,e},{})));var n,r})},N=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(v({},t,t[e]))}}},R=function(e,t,n){return function(o){var a=Object(r.createFactory)(o);return function(r){function o(){var e,t;y(this,o);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return e=t=w(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:"function"==typeof n?n(t.props):n},t.updateStateValue=function(e,n){return t.setState(function(t){var n=t.stateValue;return{stateValue:"function"==typeof e?e(n):e}},n)},w(t,e)}return b(o,r),o.prototype.render=function(){var n;return a(v({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.updateStateValue,n)))},o}(r.Component)}},L=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=w(this,e.call.apply(e,[this].concat(a))),s.call(r),w(r,n)}return b(t,e),t.prototype.shouldComponentUpdate=function(e,t){var n=e!==this.props,r=!i()(t,this.state);return n||r},t.prototype.render=function(){return o(v({},this.props,this.state,this.stateUpdaters))},t}(r.Component),s=function(){var n=this;this.state="function"==typeof e?e(this.props):e,this.stateUpdaters=E(t,function(e){return function(t){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];t&&"function"==typeof t.persist&&t.persist(),n.setState(function(n,r){return e(n,r).apply(void 0,[t].concat(o))})}})};return a}},M=function(e,t,n,o){return function(a){var i=Object(r.createFactory)(a);return function(r){function a(){var e,t;y(this,a);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return e=t=w(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:t.initializeStateValue()},t.dispatch=function(e){return t.setState(function(t){var r=t.stateValue;return{stateValue:n(r,e)}})},w(t,e)}return b(a,r),a.prototype.initializeStateValue=function(){return void 0!==o?"function"==typeof o?o(this.props):o:n(void 0,{type:"@@recompose/INIT"})},a.prototype.render=function(){var n;return i(v({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.dispatch,n)))},a}(r.Component)}},A=function(e){return e},I=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:A;return function(o){var a=void 0,i=void 0;return function(s){return e(s)?(a=a||Object(r.createFactory)(t(o)))(s):(i=i||Object(r.createFactory)(n(o)))(s)}}},z=function(e){return function(t){var n=Object(r.createFactory)(e);return function(e){return n(e)}}},U=function(e){function t(){return y(this,t),w(this,e.apply(this,arguments))}return b(t,e),t.prototype.render=function(){return null},t}(r.Component),F=function(e){return U},D=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){function r(){return y(this,r),w(this,t.apply(this,arguments))}return b(r,t),r.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},r.prototype.render=function(){return n(this.props)},r}(r.Component)}},H=function(e){return D(function(e,t){return!i()(e,t)})(e)},B=function(e){return D(function(t,n){return!i()(_(n,e),_(t,e))})},W=function(e){var t=e.propTypes;var n=Object.keys(t||{});return B(n)(e)},V=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=w(this,e.call.apply(e,[this].concat(i))),o.getChildContext=function(){return t(o.props)},w(o,r)}return b(n,e),n.prototype.render=function(){return o(this.props)},n}(r.Component);return a.childContextTypes=e,a}},q=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e,t){return n(v({},e,t))};return o.contextTypes=e,o}},K=function(e){return function(t){var n=Object(r.createFactory)(t);var o=function(e){function t(){return y(this,t),w(this,e.apply(this,arguments))}return b(t,e),t.prototype.render=function(){return n(v({},this.props,this.state))},t}(r.Component);return Object.keys(e).forEach(function(t){return o.prototype[t]=e[t]}),o}},$=function(e){return Boolean(e&&e.prototype&&"function"==typeof e.prototype.render)},Y=function(e){if($(e))return e;var t=function(t){function n(){return y(this,n),w(this,t.apply(this,arguments))}return b(n,t),n.prototype.render=function(){return"string"==typeof e?o.a.createElement(e,this.props):e(this.props,this.context)},n}(r.Component);return t.displayName=d(e),t.propTypes=e.propTypes,t.contextTypes=e.contextTypes,t.defaultProps=e.defaultProps,t},Q=function(e){return f("propTypes",e)};function X(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var G=function(e){return function(t){function n(){return y(this,n),w(this,t.apply(this,arguments))}return b(n,t),n.prototype.componentWillMount=function(){e(this.props)},n.prototype.componentWillReceiveProps=function(t){e(t)},n.prototype.render=function(){return null},n}(r.Component)},Z=function(e){var t=function(t){return Object(r.createElement)(t[e],O(t,[e]))};return t.displayName="componentFromProp("+e+")",t},J=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.map(r.createFactory);return function(e){var t=g(e,[]),n=e.children;return o.reduceRight(function(e,n){return n(t,e)},n)}},ee=function(e){return function(t){var n=e(t);return l()(n,t),n}},te={fromESObservable:null,toESObservable:null},ne=function(e){te=e},re={fromESObservable:function(e){return"function"==typeof te.fromESObservable?te.fromESObservable(e):e},toESObservable:function(e){return"function"==typeof te.toESObservable?te.toESObservable(e):e}},oe=function(e){return function(t){return function(n){function r(){var o,a,i;y(this,r);for(var s=arguments.length,l=Array(s),f=0;f<s;f++)l[f]=arguments[f];return a=i=w(this,n.call.apply(n,[this].concat(l))),i.state={vdom:null},i.propsEmitter=Object(u.createChangeEmitter)(),i.props$=e.fromESObservable(((o={subscribe:function(e){return{unsubscribe:i.propsEmitter.listen(function(t){t?e.next(t):e.complete()})}}})[c.a]=function(){return this},o)),i.vdom$=e.toESObservable(t(i.props$)),w(i,a)}return b(r,n),r.prototype.componentWillMount=function(){var e=this;this.subscription=this.vdom$.subscribe({next:function(t){e.setState({vdom:t})}}),this.propsEmitter.emit(this.props)},r.prototype.componentWillReceiveProps=function(e){this.propsEmitter.emit(e)},r.prototype.shouldComponentUpdate=function(e,t){return t.vdom!==this.state.vdom},r.prototype.componentWillUnmount=function(){this.propsEmitter.emit(),this.subscription.unsubscribe()},r.prototype.render=function(){return this.state.vdom},r}(r.Component)}},ae=function(e){return oe(re)(e)},ie=function(e){return e},se=function(e){var t=oe({fromESObservable:ie,toESObservable:ie});return function(n){return function(o){var a=Object(r.createFactory)(o),i=e.fromESObservable,s=e.toESObservable;return t(function(e){var t;return(t={subscribe:function(t){var r=s(n(i(e))).subscribe({next:function(e){return t.next(a(e))}});return{unsubscribe:function(){return r.unsubscribe()}}}})[c.a]=function(){return this},t})}}},le=function(e){return se(re)(e)},ue=function(e){return function(){var t,n=Object(u.createChangeEmitter)(),r=e.fromESObservable(((t={subscribe:function(e){return{unsubscribe:n.listen(function(t){return e.next(t)})}}})[c.a]=function(){return this},t));return{handler:n.emit,stream:r}}},ce=ue(re)},"./node_modules/resolve-pathname/index.js":function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&r(e),s=t&&r(t),l=i||s;if(e&&r(e)?a=n:n.length&&(a.pop(),a=a.concat(n)),!a.length)return"/";var u=void 0;if(a.length){var c=a[a.length-1];u="."===c||".."===c||""===c}else u=!1;for(var f=0,p=a.length;p>=0;p--){var d=a[p];"."===d?o(a,p):".."===d?(o(a,p),f++):f&&(o(a,p),f--)}if(!l)for(;f--;f)a.unshift("..");!l||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return u&&"/"!==h.substr(-1)&&(h+="/"),h}},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,c=[],f=n("./node_modules/style-loader/lib/urls.js");function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(b(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(b(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");return e.attrs.type="text/css",v(t,e.attrs),h(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=l||(l=y(t)),r=x.bind(null,n,i,!1),o=x.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var g,w=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./node_modules/symbol-observable/es/index.js":function(e,t,n){"use strict";(function(e,r){var o,a=n("./node_modules/symbol-observable/es/ponyfill.js");o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/webpack/buildin/harmony-module.js")(e))},"./node_modules/symbol-observable/es/ponyfill.js":function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},"./node_modules/value-equal/index.js":function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var s=Object.keys(t),l=Object.keys(n);return s.length===l.length&&s.every(function(r){return e(t[r],n[r])})}return!1}},"./node_modules/warning/browser.js":function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/harmony-module.js":function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},"./src/assets/banner.png":function(e,t,n){e.exports=n.p+"3955ac9c71eef525e4fe7466052d3253.png"},"./src/components/Character.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.content;return a.default.createElement("div",{className:"List-Item"},a.default.createElement("img",{alt:t.name,src:t.image}),a.default.createElement("h3",null,t.name),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Species"),t.species),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Origin"),t.origin.name),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Location"),t.location.name),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Status"),t.status),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Gender"),t.gender))}},"./src/components/Characters.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=l(o),i=n("./node_modules/react-spinners/index.js"),s=l(n("./src/components/Character.js"));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:[],pageNumber:2},n.fetchCharacters=n.fetchCharacters.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.fetchCharacters()}},{key:"fetchCharacters",value:function(){var e=this;fetch("https://rickandmortyapi.com/api/character/").then(function(e){return e.json()}).then(function(t){var n=t.results;e.setState({data:n})})}},{key:"nextPage",value:function(e){var t=this;fetch("https://rickandmortyapi.com/api/character?page="+e).then(function(e){return e.json()}).then(function(e){var n=e.results;t.setState(function(e){return{data:e.data.concat(n),pageNumber:e.pageNumber+1}})})}},{key:"render",value:function(){var e=void 0;return e=this.state.data?a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement("div",{className:"List-Grid"},this.state.data.map(function(e){return a.default.createElement(s.default,{content:e,key:e.id})})),a.default.createElement("button",{onClick:this.nextPage.bind(this,this.state.pageNumber)},"Show More")):a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement(i.PropogateLoader,{size:25})),a.default.createElement("div",null,e)}}]),t}();t.default=u},"./src/components/Episode.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.content;return a.default.createElement("div",{className:"List-Item"},a.default.createElement("h3",null,t.name),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Air Date"),t.air_date),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Episode"),t.episode))}},"./src/components/Episodes.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=l(o),i=n("./node_modules/react-spinners/index.js"),s=l(n("./src/components/Episode.js"));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:[],pageNumber:2},n.fetchEpisodes=n.fetchEpisodes.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.fetchEpisodes()}},{key:"fetchEpisodes",value:function(){var e=this;fetch("https://rickandmortyapi.com/api/episode/").then(function(e){return e.json()}).then(function(t){var n=t.results;e.setState({data:n})})}},{key:"nextPage",value:function(e){var t=this;fetch("https://rickandmortyapi.com/api/episode?page="+e).then(function(e){return e.json()}).then(function(e){var n=e.results;t.setState(function(e){return{data:e.data.concat(n),pageNumber:e.pageNumber+1}})})}},{key:"render",value:function(){var e=void 0;return e=this.state.data?a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement("div",{className:"List-Grid"},this.state.data.map(function(e){return a.default.createElement(s.default,{content:e,key:e.id})})),a.default.createElement("button",{onClick:this.nextPage.bind(this,this.state.pageNumber)},"Show More")):a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement(i.PropogateLoader,{size:25})),a.default.createElement("div",null,e)}}]),t}();t.default=u},"./src/components/Home.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){return a.default.createElement("div",{className:"Home"},a.default.createElement("h2",null,"Welcome to Mortypedia, the home of everything Rick and Morty! Feel free to look around at the characters, locations, and episodes."))}},"./src/components/Location.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(e){var t=e.content;return a.default.createElement("div",{className:"List-Item"},a.default.createElement("h3",null,t.name),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Type"),t.type),a.default.createElement("p",null,a.default.createElement("span",{className:"title"},"Dimension"),t.dimension))}},"./src/components/Locations.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=l(o),i=n("./node_modules/react-spinners/index.js"),s=l(n("./src/components/Location.js"));function l(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={data:[],pageNumber:2},n.fetchLocations=n.fetchLocations.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"componentDidMount",value:function(){this.fetchLocations()}},{key:"fetchLocations",value:function(){var e=this;fetch("https://rickandmortyapi.com/api/location/").then(function(e){return e.json()}).then(function(t){var n=t.results;e.setState({data:n})})}},{key:"nextPage",value:function(e){var t=this;fetch("https://rickandmortyapi.com/api/location?page="+e).then(function(e){return e.json()}).then(function(e){var n=e.results;t.setState(function(e){return{data:e.data.concat(n),pageNumber:e.pageNumber+1}})})}},{key:"render",value:function(){var e=void 0;return e=this.state.data===[]?a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement(i.PropogateLoader,{size:25})):a.default.createElement("div",{className:"List-Container"},a.default.createElement("h2",null,"Like what you see? Watch the entire show on Netflix!"),a.default.createElement("div",{className:"List-Grid"},this.state.data.map(function(e){return a.default.createElement(s.default,{content:e,key:e.id})})),a.default.createElement("button",{onClick:this.nextPage.bind(this,this.state.pageNumber)},"Show More")),a.default.createElement("div",null,e)}}]),t}();t.default=u},"./src/components/Navbar.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r},i=n("./node_modules/react-router-dom/es/index.js");t.default=function(){return a.default.createElement("header",null,a.default.createElement("h1",null,"Mortypedia"),a.default.createElement("nav",null,a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/"},"Home")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/characters"},"Characters")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/locations"},"Locations")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/episodes"},"Episodes"))))}},"./src/containers/App.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=p(o),i=n("./node_modules/react-router-dom/es/index.js"),s=p(n("./src/components/Home.js")),l=p(n("./src/components/Navbar.js")),u=p(n("./src/components/Characters.js")),c=p(n("./src/components/Locations.js")),f=p(n("./src/components/Episodes.js"));function p(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement(i.BrowserRouter,null,a.default.createElement("div",null,a.default.createElement(l.default,null),a.default.createElement(i.Route,{exact:!0,path:"/",component:s.default}),a.default.createElement(i.Route,{exact:!0,path:"/characters",component:u.default}),a.default.createElement(i.Route,{exact:!0,path:"/locations",component:c.default}),a.default.createElement(i.Route,{exact:!0,path:"/episodes",component:f.default})))}}]),t}();t.default=d},"./src/index.js":function(e,t,n){"use strict";var r=i(n("./node_modules/react/index.js")),o=i(n("./node_modules/react-dom/index.js"));n("./src/styles/index.styl");var a=i(n("./src/containers/App.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.default,null),document.getElementById("root"))},"./src/styles/index.styl":function(e,t,n){var r=n("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=n("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl",function(t){!function(){var t=n("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(t)}()}),e.hot.dispose(function(){a()})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYW5nZS1lbWl0dGVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2luZGV4LnN0eWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uLXV0aWxzL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vtb3Rpb24vZGlzdC9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vdGlvbi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL1BhdGhVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVNZW1vcnlIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9oZWxwZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0JhckxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9CZWF0TG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0JvdW5jZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9DaXJjbGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQ2xpbWJpbmdCb3hMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQ2xpcExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Eb3RMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvRmFkZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9HcmlkTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0hhc2hMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvTW9vbkxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9QYWNtYW5Mb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUHJvcGFnYXRlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1B1bHNlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1JpbmdMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUmlzZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Sb3RhdGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvU2NhbGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvU3luY0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlY29tcG9zZS9lcy9SZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2Jhbm5lci5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvQ2hhcmFjdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0NoYXJhY3RlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRXBpc29kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9FcGlzb2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvY2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvY2F0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2luZGV4LnN0eWw/ZWYzMyJdLCJuYW1lcyI6WyJwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayIsIndpbmRvdyIsImNodW5rSWQiLCJtb3JlTW9kdWxlcyIsImhvdEF2YWlsYWJsZUZpbGVzTWFwIiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJtb2R1bGVJZCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImhvdFVwZGF0ZSIsImhvdFdhaXRpbmdGaWxlcyIsImhvdENodW5rc0xvYWRpbmciLCJob3RVcGRhdGVEb3dubG9hZGVkIiwiaG90QWRkVXBkYXRlQ2h1bmsiLCJob3RDdXJyZW50Q2hpbGRNb2R1bGUiLCJob3RBcHBseU9uVXBkYXRlIiwiaG90Q3VycmVudEhhc2giLCJob3RSZXF1ZXN0VGltZW91dCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaSIsImxlbmd0aCIsImhvdERlZmVycmVkIiwiaG90VXBkYXRlTmV3SGFzaCIsInRvTW9kdWxlSWQiLCJpZCIsImhvdENoZWNrIiwiYXBwbHkiLCJFcnJvciIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3RQYXRoIiwicCIsIm9wZW4iLCJ0aW1lb3V0Iiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJ1cGRhdGUiLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJjIiwiaCIsInByb21pc2UiLCJoZWFkIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiYXBwZW5kQ2hpbGQiLCJob3REb3dubG9hZFVwZGF0ZUNodW5rIiwiZGVmZXJyZWQiLCJob3RBcHBseSIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwic2xpY2UiLCJtYXAiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBvcCIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwidHlwZSIsIl9tYWluIiwicGFyZW50SWQiLCJwYXJlbnQiLCJfZGVjbGluZWREZXBlbmRlbmNpZXMiLCJjb25jYXQiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJpZHgiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImluc3RhbGxlZENodW5rcyIsImhvdERpc3Bvc2VDaHVuayIsImRlcGVuZGVuY3kiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsImRhdGEiLCJkaXNwb3NlSGFuZGxlcnMiLCJfZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJzcGxpY2UiLCJtb2R1bGVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwibCIsImFjY2VwdCIsImRlcCIsImNhbGxiYWNrIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiY2hlY2siLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsInVuZGVmaW5lZCIsImhvdENyZWF0ZU1vZHVsZSIsIm0iLCJkIiwiZ2V0dGVyIiwibyIsInIiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicyIsImNyZWF0ZUNoYW5nZUVtaXR0ZXIiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJsaXN0ZW4iLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImluZGV4IiwiZW1pdCIsImxpc3RlbmVycyIsImFyZ3VtZW50cyIsImVzY2FwZSIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ1cmwiLCJ0ZXN0IiwicmVwbGFjZSIsImhhc2hTdHJpbmciLCJzdHIiLCJzZWVkIiwiY3VycmVudEluZGV4IiwiayIsIlVJbnQzMiIsIlVtdWwzMiIsIlVJbnQxNiIsImNoYXJDb2RlQXQiLCJpbmRleF9lc19oYXNoIiwicG9zIiwiU1RZTEVTX0tFWSIsIlRBUkdFVF9LRVkiLCJ1bml0bGVzcyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImluZGV4X2VzX21ha2VTdHlsZVRhZyIsInRhZyIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZVRleHROb2RlIiwiaW5kZXhfZXNfc2hlZXQiLCJTdHlsZVNoZWV0IiwiaXNCcm93c2VyIiwiaXNTcGVlZHkiLCJ0YWdzIiwiY3RyIiwiX3Byb3RvIiwiaW5qZWN0IiwiaW5qZWN0ZWQiLCJzaGVldCIsInNwZWVkeSIsImJvb2wiLCJpbnNlcnQiLCJydWxlIiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJpbmRleF9lc19zaGVldEZvclRhZyIsImluc2VydFJ1bGUiLCJjc3NSdWxlcyIsIl90YWciLCJmbHVzaCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImluZGV4X2VzX3N0eWxpcyIsImZhIiwiaGEiLCJpYSIsInRyaW0iLCJzcGxpdCIsInhhIiwiZiIsIm1hIiwieiIsIk0iLCJZIiwieWEiLCJSIiwiamEiLCJzdWJzdHJpbmciLCJRIiwiemEiLCJBYSIsImlzTmFOIiwicGFyc2VGbG9hdCIsIlQiLCJ3IiwiVSIsIkJhIiwibmEiLCJhYSIsIkNhIiwiRGEiLCJiYSIsIkVhIiwic2EiLCJGYSIsIk8iLCJxIiwiRSIsImNhIiwiRiIsImVhIiwib2EiLCJrYSIsIlgiLCJjb25zdHJ1Y3RvciIsIkdhIiwiSyIsIkkiLCJ5IiwiViIsIkgiLCJ2IiwiQSIsIkIiLCJ4IiwiQyIsIkciLCJOIiwiTCIsInQiLCJEIiwiZyIsInUiLCJTIiwiUCIsImNoYXJBdCIsInFhIiwiVyIsInJhIiwidGEiLCJsYSIsIkoiLCJBcnJheSIsInVhIiwidmEiLCJ3YSIsIloiLCJIYSIsIklhIiwiSmEiLCJLYSIsInVzZSIsImRhIiwiRnVuY3Rpb24iLCJCb29sZWFuIiwia2V5ZnJhbWUiLCJpbmRleF9lc19leHRlcm5hbFN0eWxpc1BsdWdpbnMiLCJpbmRleF9lc191c2UiLCJpbmRleF9lc19pbnNlcnRpb25QbHVnaW4iLCJzdHlsaXNfcnVsZV9zaGVldF9kZWZhdWx0IiwiaW5kZXhfZXNfY3VycmVudFNvdXJjZU1hcCIsImluZGV4X2VzX3VzZVN0eWxpc1BsdWdpbiIsInBsdWdpbiIsImluZGV4X2VzX3JlZ2lzdGVyZWQiLCJpbmRleF9lc19pbnNlcnRlZCIsImluZGV4X2VzX2hhbmRsZUludGVycG9sYXRpb24iLCJpbnRlcnBvbGF0aW9uIiwiY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiY29udGV4dCIsIm9iaiIsImluZGV4X2VzX29iamVjdFRvU3RyaW5nQ2FjaGUiLCJoYXMiLCJzdHJpbmciLCJpc0FycmF5Iiwia2V5IiwiaW5kZXhfZXNfcHJvY2Vzc1N0eWxlTmFtZSIsImluZGV4X2VzX3Byb2Nlc3NTdHlsZVZhbHVlIiwiY2FjaGVkIiwiY2FjaGUiLCJkaXN0X2luZGV4X2VzX2hhc2giLCJpbmRleF9lc19uYW1lIiwiaW5kZXhfZXNfaHlwaGVuYXRlUmVnZXgiLCJzdHlsZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsImFyZyIsIldlYWtNYXAiLCJpbmRleF9lc19sYWJlbFBhdHRlcm4iLCJpbmRleF9lc19jcmVhdGVTdHlsZXMiLCJzdHJpbmdzIiwic3RyaW5nTW9kZSIsInN0eWxlcyIsImlkZW50aWZpZXJOYW1lIiwicmF3IiwiX2xlbiIsImludGVycG9sYXRpb25zIiwiX2tleSIsIm1hdGNoIiwicDEiLCJpbmRleF9lc19jc3MiLCJzZWxlY3RvciIsImluZGV4X2VzX2tleWZyYW1lcyIsImFuaW1hdGlvbiIsImluZGV4X2VzX2luamVjdEdsb2JhbCIsImluZGV4X2VzX2ZvbnRGYWNlIiwiaW5kZXhfZXNfZ2V0UmVnaXN0ZXJlZFN0eWxlcyIsInJlZ2lzdGVyZWRTdHlsZXMiLCJjbGFzc05hbWVzIiwicmF3Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiaW5kZXhfZXNfbWVyZ2UiLCJpbmRleF9lc19jeCIsImluZGV4X2VzX2NsYXNzbmFtZXMiLCJsZW4iLCJjbHMiLCJuZXh0IiwiaW5kZXhfZXNfaHlkcmF0ZSIsImlkcyIsImluZGV4X2VzX2ZsdXNoIiwidG9TaGVldCIsImJsb2NrIiwic2VsZWN0b3JzIiwibGluZSIsImNvbHVtbiIsImF0IiwiZGVwdGgiLCJkZWxpbWl0ZXIiLCJmYWN0b3J5IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwibm9kZSIsImV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwibWVzc2FnZSIsImNvbmZpcm0iLCJzdXBwb3J0c0hpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5Iiwic3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSIsInN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsInN0YXRlIiwibG9jYXRpb25zQXJlRXF1YWwiLCJjcmVhdGVMb2NhdGlvbiIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiX3Jlc29sdmVQYXRobmFtZTIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3ZhbHVlRXF1YWwyIiwiX1BhdGhVdGlscyIsImRlZmF1bHQiLCJwYXRoIiwiY3VycmVudExvY2F0aW9uIiwibG9jYXRpb24iLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3dhcm5pbmcyIiwiX2ludmFyaWFudDIiLCJfTG9jYXRpb25VdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJfRE9NVXRpbHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJwcm9wcyIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3JlZiIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJNYXRoIiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsIm5vdGlmeUxpc3RlbmVycyIsImFjdGlvbiIsImhhbmRsZVBvcFN0YXRlIiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwicHJvbXB0IiwidW5ibG9jayIsInNldFByb21wdCIsInVubGlzdGVuIiwiYXBwZW5kTGlzdGVuZXIiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiX3dhcm5pbmciLCJuZXh0UHJvbXB0IiwiaXNBY3RpdmUiLCJmaWx0ZXIiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGVzY3JpcHRvciIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImZ1bmMiLCJudW1iZXIiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwiZnJlZXplIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiY3VycmVudFRhcmdldCIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiT2EiLCJQYSIsIlFhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJhYiIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiYmIiLCJkaXNwYXRjaENvbmZpZyIsImRiIiwiX3RhcmdldEluc3QiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiYWx0ZXJuYXRlIiwiamIiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImtiIiwibGIiLCJkb2N1bWVudEVsZW1lbnQiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibWIiLCJuYiIsIm9iIiwicGIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkViIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIktiIiwiTGIiLCJrZXlDb2RlIiwiTWIiLCJkZXRhaWwiLCJOYiIsIlFiIiwid2hpY2giLCJPYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlBiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiVmIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiV2IiLCJYYiIsIlliIiwiWmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsImZjIiwiZ2MiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImhjIiwiaWMiLCJrYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiamMiLCJsYyIsImNoZWNrZWQiLCJtYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJuYyIsIm9jIiwicGMiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJCYyIsIkNjIiwiRGMiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwiSGMiLCJTYyIsInRvVXBwZXJDYXNlIiwiVGMiLCJGYyIsIkdjIiwiRWMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlVjIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJWYyIsIldjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlhjIiwiWWMiLCJaYyIsIiRjIiwidGFiSW5kZXgiLCJhZCIsImNoYW5nZSIsImJkIiwiY2QiLCJkZCIsImVkIiwiZmQiLCJnZCIsImhkIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsInBkIiwidmlldyIsInFkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInJkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInNkIiwidGQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiLCJ1ZCIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwidmQiLCJwYXJlbnRXaW5kb3ciLCJ3ZCIsImVmZmVjdFRhZyIsInhkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsInlkIiwiemQiLCJzaWJsaW5nIiwiY3VycmVudCIsIkNkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkRkIiwiY2xpcGJvYXJkRGF0YSIsIkVkIiwiRmQiLCJjaGFyQ29kZSIsIkdkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIkhkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIklkIiwicmVwZWF0IiwibG9jYWxlIiwiSmQiLCJkYXRhVHJhbnNmZXIiLCJLZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJMZCIsIk1kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJOZCIsIk9kIiwiUGQiLCJpc0ludGVyYWN0aXZlIiwiUWQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJSZCIsIlNkIiwiVGQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlVkIiwiVmQiLCJXZCIsIlhkIiwiYmluZCIsIllkIiwiWmQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiJGQiLCJhZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImJlIiwiY2UiLCJkZSIsInN0eWxlIiwidHJhbnNpdGlvbiIsImVlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJmZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJmaXJzdENoaWxkIiwibGUiLCJ0ZXh0Q29udGVudCIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiY29udGVudEVkaXRhYmxlIiwibmUiLCJvZSIsInNlbGVjdCIsInBlIiwicWUiLCJyZSIsInNlIiwidWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwid2UiLCJvblNlbGVjdCIsInhlIiwicmVmIiwicGVuZGluZ1Byb3BzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsIm1vZGUiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ5ZSIsInplIiwiaXNSZWFjdENvbXBvbmVudCIsIkFlIiwiJCR0eXBlb2YiLCJCZSIsIkNlIiwicGVuZGluZ0NoaWxkcmVuIiwiaW1wbGVtZW50YXRpb24iLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiYmFzZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwiY2FsbGJhY2tMaXN0IiwiaGFzRm9yY2VVcGRhdGUiLCJpc0luaXRpYWxpemVkIiwiY2FwdHVyZWRWYWx1ZXMiLCJLZSIsIlNldCIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJwYXJ0aWFsU3RhdGUiLCJRZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiY2FwdHVyZWRWYWx1ZSIsIlJlIiwiVGUiLCJVZSIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJyZWZzIiwiVmUiLCJXZSIsIk1hcCIsImRvbmUiLCJYZSIsIlllIiwiWmUiLCJyZW5kZXIiLCJwZW5kaW5nQ29udGV4dCIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0NvbnRleHRDaGFuZ2VkIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsIldhIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsIkJiIiwidHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2UiLCJKYyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwidXBkYXRlciIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJyZXN1bWVNb3VudENsYXNzSW5zdGFuY2UiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiU2UiLCJLYyIsIkxjIiwiQ2IiLCJNYyIsIkRiIiwiYmVnaW5Xb3JrIiwiaHlkcmF0ZSIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJiZiIsInN0YWNrIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsImRmIiwia2YiLCJYYSIsIk5jIiwicGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lIiwiT2MiLCJZYSIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImNvbXBvbmVudERpZENhdGNoIiwiRmIiLCJ3ZyIsInZlIiwiSWMiLCJQYyIsIkdiIiwieWciLCJRYyIsImxnIiwibmV4dFNjaGVkdWxlZFJvb3QiLCJyZW1haW5pbmdFeHBpcmF0aW9uVGltZSIsIkhiIiwiWmEiLCJJYiIsIl9vbkNvbXBsZXRlIiwidmciLCJKYiIsImZpbmlzaGVkV29yayIsImZpcnN0QmF0Y2giLCJfZXhwaXJhdGlvblRpbWUiLCJfZGVmZXIiLCJ6ZyIsIiRhIiwia2ciLCJ0ZSIsImdnIiwiQWciLCJoZyIsImlnIiwiamciLCJ0aW1lUmVtYWluaW5nIiwiQmciLCJjcmVhdGVDdXJzb3IiLCJpc0VtcHR5IiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2IiwiamYiLCJnZXRDaGlsZEhvc3RDb250ZXh0IiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0SG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250YWluZXIiLCJwb3BIb3N0Q29udGV4dCIsImVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiZ2V0Q2hpbGRDb250ZXh0IiwiaXNDb250ZXh0UHJvdmlkZXIiLCJwb3BDb250ZXh0UHJvdmlkZXIiLCJwb3BUb3BMZXZlbENvbnRleHRPYmplY3QiLCJjdXJzb3IiLCJwcm9jZXNzQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImdmIiwicG9wUHJvdmlkZXIiLCJoZiIsImh5ZHJhdGlvbiIsInByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSIsInBvcEh5ZHJhdGlvblN0YXRlIiwiY2FuSHlkcmF0ZUluc3RhbmNlIiwiY2FuSHlkcmF0ZVRleHRJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlU2libGluZyIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkIiwiaHlkcmF0ZUluc3RhbmNlIiwiaHlkcmF0ZVRleHRJbnN0YW5jZSIsImZmIiwiY3JlYXRlSW5zdGFuY2UiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiaGFuZGxlciIsIiRlIiwidGhyb3dFeGNlcHRpb24iLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYWYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImdldFB1YmxpY0luc3RhbmNlIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJpbnNlcnRCZWZvcmUiLCJpbnNlcnRJbkNvbnRhaW5lckJlZm9yZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImNvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlcyIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiY29tbWl0UmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFBsYWNlbWVudCIsImNvbW1pdERlbGV0aW9uIiwiY29tbWl0V29yayIsImNvbW1pdExpZmVDeWNsZXMiLCJjb21taXRFcnJvckxvZ2dpbmciLCJjb21wb25lbnRTdGFjayIsImNvbW1pdEF0dGFjaFJlZiIsImNvbW1pdERldGFjaFJlZiIsImNmIiwiYWRkIiwic2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrIiwiY2FuY2VsRGVmZXJyZWRDYWxsYmFjayIsInByZXBhcmVGb3JDb21taXQiLCJyZXNldEFmdGVyQ29tbWl0IiwiUmMiLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJsZWdhY3lDb250ZXh0IiwibGYiLCJBZCIsImNyZWF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lciIsInVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJCZCIsImluamVjdEludG9EZXZUb29scyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiR2UiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsIm1mIiwibmYiLCJvZiIsInFmIiwicGVyZm9ybWFuY2UiLCJyZiIsInNmIiwidGYiLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwidWYiLCJ2ZiIsIndmIiwieGYiLCJ5ZiIsInpmIiwiQWYiLCJCZiIsImRpZFRpbWVvdXQiLCJDZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkRmIiwicG9zdE1lc3NhZ2UiLCJzZXRUaW1lb3V0IiwiSW5maW5pdHkiLCJjbGVhclRpbWVvdXQiLCJGZiIsIkNoaWxkcmVuIiwiRWYiLCJHZiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiSGYiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwiSWYiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiUmYiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTZiIsIlRmIiwiVWYiLCJzZXRQcm9wZXJ0eSIsIlZmIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjZyIsIl9faHRtbCIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiZGciLCJlZyIsImZnIiwibWciLCJuZyIsInNldEluaXRpYWxQcm9wZXJ0aWVzIiwiZGlmZlByb3BlcnRpZXMiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFRleHQiLCJ3YXJuRm9yVW5tYXRjaGVkVGV4dCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVUZXh0Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50Iiwid2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJvZyIsInBnIiwicWciLCJfY2FsbGJhY2tzIiwiX25leHQiLCJfaGFzQ2hpbGRyZW4iLCJfZGlkQ29tcGxldGUiLCJfY2hpbGRyZW4iLCJyZyIsIl9kaWRDb21taXQiLCJfb25Db21taXQiLCJzZyIsIl9pbnRlcm5hbFJvb3QiLCJ0ZyIsInVnIiwiYXV0b0ZvY3VzIiwiY29tbWl0IiwidW5tb3VudCIsImxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNyZWF0ZUJhdGNoIiwidGFnTmFtZSIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsImhpZGRlbiIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlIiwiQ2ciLCJFZyIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJoYXNBdHRyaWJ1dGUiLCJEZyIsIkZnIiwicGYiLCJHZyIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9kZWZlcnJlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQiLCJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luUmVnaXN0cnkiLCJFdmVudFByb3BhZ2F0b3JzIiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50IiwiUmVhY3RET01Db21wb25lbnRUcmVlIiwiUmVhY3RET01FdmVudExpc3RlbmVyIiwidW5zdGFibGVfY3JlYXRlUm9vdCIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkhnIiwiSWciLCJjaGVja0RDRSIsIlJvdXRlcl9leHRlbmRzIiwiUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJSb3V0ZXJfUm91dGVyIiwiX1JlYWN0JENvbXBvbmVudCIsIlJvdXRlciIsIl90ZW1wIiwiX3RoaXMiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY29tcHV0ZU1hdGNoIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIlJvdXRlcl9pbmhlcml0cyIsInJvdXRlciIsInJvdXRlIiwicGFyYW1zIiwiaXNFeGFjdCIsIl90aGlzMiIsIl9wcm9wcyIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJyZWFjdF9kZWZhdWx0IiwiY291bnQiLCJuZXh0UHJvcHMiLCJicm93c2VyX2RlZmF1bHQiLCJvbmx5IiwiQ29tcG9uZW50IiwicHJvcF90eXBlc19kZWZhdWx0IiwiZXNfUm91dGVyIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZXIiLCJCcm93c2VyUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJCcm93c2VyUm91dGVyX0Jyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5X2RlZmF1bHQiLCJCcm93c2VyUm91dGVyX2luaGVyaXRzIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlSGFzaEhpc3RvcnlfZGVmYXVsdCIsIkhhc2hSb3V0ZXJfaW5oZXJpdHMiLCJlc19IYXNoUm91dGVyIiwiTGlua19leHRlbmRzIiwiTGlua19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTGlua19pc01vZGlmaWVkRXZlbnQiLCJMaW5rX0xpbmsiLCJMaW5rIiwiTGlua19jbGFzc0NhbGxDaGVjayIsImhhbmRsZUNsaWNrIiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJMaW5rX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZGVmYXVsdCIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsInJlYWN0X3JvdXRlcl9kb21fZXNfTWVtb3J5Um91dGVyIiwibWF0Y2hQYXRoX3BhdHRlcm5DYWNoZSIsIm1hdGNoUGF0aF9jYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJjb21waWxlZFBhdHRlcm4iLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiZXhlYyIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfdHlwZW9mIiwiTmF2TGlua19OYXZMaW5rIiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJnZXRJc0FjdGl2ZSIsImFyaWFDdXJyZW50IiwicmVzdCIsIk5hdkxpbmtfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfcmVmMiIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiTG9jYXRpb25VdGlsc19leHRlbmRzIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsInJlc29sdmVfcGF0aG5hbWUiLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwidmFsdWVfZXF1YWwiLCJSZWRpcmVjdF9SZWRpcmVjdCIsIlJlZGlyZWN0IiwiUmVkaXJlY3RfY2xhc3NDYWxsQ2hlY2siLCJSZWRpcmVjdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVkaXJlY3RfaW5oZXJpdHMiLCJpc1N0YXRpYyIsInBlcmZvcm0iLCJwcmV2UHJvcHMiLCJwcmV2VG8iLCJuZXh0VG8iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JlZGlyZWN0IiwiU3RhdGljUm91dGVyX2V4dGVuZHMiLCJTdGF0aWNSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN0YXRpY1JvdXRlcl9hZGRCYXNlbmFtZSIsIlBhdGhVdGlscyIsIlN0YXRpY1JvdXRlcl9jcmVhdGVMb2NhdGlvbiIsIl9vYmplY3QkcGF0aG5hbWUiLCJfb2JqZWN0JHNlYXJjaCIsIl9vYmplY3QkaGFzaCIsIlN0YXRpY1JvdXRlcl9jcmVhdGVVUkwiLCJTdGF0aWNSb3V0ZXJfc3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJTdGF0aWNSb3V0ZXJfbm9vcCIsIlN0YXRpY1JvdXRlcl9TdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVQdXNoIiwiaGFuZGxlUmVwbGFjZSIsIl90aGlzJHByb3BzMiIsImhhbmRsZUxpc3RlbiIsImhhbmRsZUJsb2NrIiwiU3RhdGljUm91dGVyX2luaGVyaXRzIiwiU3RhdGljUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImlzVmFsaWRFbGVtZW50IiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsImNsb25lRWxlbWVudCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3dpdGNoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19kZWZhdWx0IiwiYXJyIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJ0b2tlbiIsInNlZ21lbnQiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJjYWxjdWxhdGVSZ2JhIiwicmdiVmFsdWVzIiwiaGV4IiwicGFyc2VJbnQiLCJfQmFyTG9hZGVyIiwiX0JlYXRMb2FkZXIiLCJfQm91bmNlTG9hZGVyIiwiX0NpcmNsZUxvYWRlciIsIl9DbGlwTG9hZGVyIiwiX0NsaW1iaW5nQm94TG9hZGVyIiwiX0RvdExvYWRlciIsIl9GYWRlTG9hZGVyIiwiX0dyaWRMb2FkZXIiLCJfSGFzaExvYWRlciIsIl9Nb29uTG9hZGVyIiwiX1BhY21hbkxvYWRlciIsIl9Qcm9wYWdhdGVMb2FkZXIiLCJfUHVsc2VMb2FkZXIiLCJfUmluZ0xvYWRlciIsIl9SaXNlTG9hZGVyIiwiX1JvdGF0ZUxvYWRlciIsIl9TY2FsZUxvYWRlciIsIl9TeW5jTG9hZGVyIiwiX0JhckxvYWRlcjIiLCJfQmVhdExvYWRlcjIiLCJfQm91bmNlTG9hZGVyMiIsIl9DaXJjbGVMb2FkZXIyIiwiX0NsaXBMb2FkZXIyIiwiX0NsaW1iaW5nQm94TG9hZGVyMiIsIl9Eb3RMb2FkZXIyIiwiX0ZhZGVMb2FkZXIyIiwiX0dyaWRMb2FkZXIyIiwiX0hhc2hMb2FkZXIyIiwiX01vb25Mb2FkZXIyIiwiX1BhY21hbkxvYWRlcjIiLCJfUHJvcGFnYXRlTG9hZGVyMiIsIl9QdWxzZUxvYWRlcjIiLCJfUmluZ0xvYWRlcjIiLCJfUmlzZUxvYWRlcjIiLCJfUm90YXRlTG9hZGVyMiIsIl9TY2FsZUxvYWRlcjIiLCJfU3luY0xvYWRlcjIiLCJCYXJMb2FkZXIiLCJCZWF0TG9hZGVyIiwiQm91bmNlTG9hZGVyIiwiQ2lyY2xlTG9hZGVyIiwiQ2xpcExvYWRlciIsIkNsaW1iaW5nQm94TG9hZGVyIiwiRG90TG9hZGVyIiwiRmFkZUxvYWRlciIsIkdyaWRMb2FkZXIiLCJIYXNoTG9hZGVyIiwiTW9vbkxvYWRlciIsIlBhY21hbkxvYWRlciIsIlByb3BhZ2F0ZUxvYWRlciIsIlB1bHNlTG9hZGVyIiwiUmluZ0xvYWRlciIsIlJpc2VMb2FkZXIiLCJSb3RhdGVMb2FkZXIiLCJTY2FsZUxvYWRlciIsIlN5bmNMb2FkZXIiLCJfcmVhY3QiLCJfcHJvcFR5cGVzIiwiX2Vtb3Rpb24iLCJfcmVjb21wb3NlIiwiX2hlbHBlcnMiLCJMb2FkZXIiLCJfcmVhY3QyIiwiX3Byb3BUeXBlczIiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJsb25nIiwia2V5ZnJhbWVzIiwic2hvcnQiLCJfY2xhc3NDYWxsQ2hlY2siLCJjc3MiLCJoZWlnaHQiLCJ3cmFwcGVyIiwid2lkdGgiLCJfaW5oZXJpdHMiLCJsb2FkaW5nIiwib25seVVwZGF0ZUZvcktleXMiLCJiZWF0Iiwic2l6ZSIsIm1hcmdpbiIsImJvdW5jZSIsImNpcmNsZSIsImNsaW1iaW5nQm94IiwiaGlsbCIsImNvbnRhaW5lciIsImNsaXAiLCJyb3RhdGUiLCJmYWRlIiwicmFkaXVzIiwicXVhcnRlciIsImdyaWQiLCJyYW5kIiwidGhpY2tuZXNzIiwibGF0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJtb29uIiwibW9vblNpemUiLCJiYWxsU3R5bGUiLCJiYWxsIiwicGFjbWFuIiwiczEiLCJzMiIsInBhY21hblN0eWxlIiwicGFjIiwibWFuIiwiZGlzdGFuY2UiLCJwcm9wYWdhdGUiLCJwdWxzZSIsInJpZ2h0IiwiZXZlbiIsIm9kZCIsInNjYWxlIiwic3luYyIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsInRvQXJyYXkiLCJjcmVhdGVSZWYiLCJQdXJlQ29tcG9uZW50IiwiY3JlYXRlQ29udGV4dCIsIl9kZWZhdWx0VmFsdWUiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiZm9yd2FyZFJlZiIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsInVuc3RhYmxlX0FzeW5jTW9kZSIsImNyZWF0ZUZhY3RvcnkiLCJzZXRTdGF0aWMiLCJCYXNlQ29tcG9uZW50Iiwic2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIkNvbXBvbmVudCQkMSIsIndyYXBEaXNwbGF5TmFtZSIsImhvY05hbWUiLCJtYXBQcm9wcyIsInByb3BzTWFwcGVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzQ2FsbENoZWNrIiwiaW5oZXJpdHMiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsInBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJ3aXRoUHJvcHMiLCJwaWNrIiwid2l0aFByb3BzT25DaGFuZ2UiLCJzaG91bGRNYXBPcktleXMiLCJzaG91bGRNYXAiLCJmYmpzX2xpYl9zaGFsbG93RXF1YWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiX0NvbXBvbmVudCIsIldpdGhQcm9wc09uQ2hhbmdlIiwiY29tcHV0ZWRQcm9wcyIsIm1hcFZhbHVlcyIsIndpdGhIYW5kbGVycyIsImhhbmRsZXJzIiwiV2l0aEhhbmRsZXJzIiwiX2luaXRpYWxpc2VQcm9wcyIsImNhY2hlZEhhbmRsZXJzIiwiY3JlYXRlSGFuZGxlciIsImhhbmRsZXJOYW1lIiwiY2FjaGVkSGFuZGxlciIsIkRlZmF1bHRQcm9wcyIsIm93bmVyUHJvcHMiLCJvbWl0IiwicmVuYW1lUHJvcCIsIm9sZE5hbWUiLCJuZXdOYW1lIiwiX2JhYmVsSGVscGVycyRleHRlbmRzIiwicmVuYW1lUHJvcHMiLCJuYW1lTWFwIiwiXyIsImZsYXR0ZW5Qcm9wIiwid2l0aFN0YXRlIiwic3RhdGVOYW1lIiwic3RhdGVVcGRhdGVyTmFtZSIsImluaXRpYWxTdGF0ZSIsIldpdGhTdGF0ZSIsInN0YXRlVmFsdWUiLCJ1cGRhdGVTdGF0ZVZhbHVlIiwidXBkYXRlRm4iLCJ3aXRoU3RhdGVIYW5kbGVycyIsInN0YXRlVXBkYXRlcnMiLCJXaXRoU3RhdGVIYW5kbGVycyIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsIm1heUJlRXZlbnQiLCJfbGVuMiIsIl9rZXkyIiwid2l0aFJlZHVjZXIiLCJkaXNwYXRjaE5hbWUiLCJyZWR1Y2VyIiwiV2l0aFJlZHVjZXIiLCJpbml0aWFsaXplU3RhdGVWYWx1ZSIsImRpc3BhdGNoIiwiaWRlbnRpdHkiLCJicmFuY2giLCJsZWZ0RmFjdG9yeSIsInJpZ2h0RmFjdG9yeSIsInJlbmRlckNvbXBvbmVudCIsIk5vdGhpbmciLCJyZW5kZXJOb3RoaW5nIiwic2hvdWxkVXBkYXRlIiwiU2hvdWxkVXBkYXRlIiwicHVyZSIsImhvYyIsInByb3BLZXlzIiwib25seVVwZGF0ZUZvclByb3BUeXBlcyIsIndpdGhDb250ZXh0IiwiV2l0aENvbnRleHQiLCJnZXRDb250ZXh0IiwiR2V0Q29udGV4dCIsImxpZmVjeWNsZSIsInNwZWMiLCJMaWZlY3ljbGUiLCJob29rIiwiaXNDbGFzc0NvbXBvbmVudCIsInRvQ2xhc3MiLCJiYXNlQ29tcG9uZW50IiwiVG9DbGFzcyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInNldFByb3BUeXBlcyIsImNvbXBvc2UiLCJmdW5jcyIsImNyZWF0ZVNpbmsiLCJTaW5rIiwiY29tcG9uZW50RnJvbVByb3AiLCJuZXN0IiwiQ29tcG9uZW50cyIsImZhY3RvcmllcyIsInJlZHVjZVJpZ2h0IiwiaG9pc3RTdGF0aWNzIiwiaGlnaGVyT3JkZXJDb21wb25lbnQiLCJOZXdDb21wb25lbnQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJfY29uZmlnIiwiZnJvbUVTT2JzZXJ2YWJsZSIsInRvRVNPYnNlcnZhYmxlIiwiY29uZmlndXJlT2JzZXJ2YWJsZSIsImNvbmZpZyIsIm9ic2VydmFibGUiLCJzdHJlYW0iLCJjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyIsImNvbmZpZyQkMSIsInByb3BzVG9WZG9tIiwiQ29tcG9uZW50RnJvbVN0cmVhbSIsIl9jb25maWckZnJvbUVTT2JzZXJ2YSIsInZkb20iLCJwcm9wc0VtaXR0ZXIiLCJjaGFuZ2VfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHJvcHMkIiwic3Vic2NyaWJlIiwib2JzZXJ2ZXIiLCJ1bnN1YnNjcmliZSIsImNvbXBsZXRlIiwic3ltYm9sX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsInZkb20kIiwic3Vic2NyaXB0aW9uIiwiY29tcG9uZW50RnJvbVN0cmVhbSIsImlkZW50aXR5JDEiLCJtYXBQcm9wc1N0cmVhbVdpdGhDb25maWciLCJ0cmFuc2Zvcm0iLCJjaGlsZFByb3BzIiwibWFwUHJvcHNTdHJlYW0iLCJjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnIiwiZW1pdHRlciIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwiaGFzVHJhaWxpbmdTbGFzaCIsInVwIiwicGFydCIsInVuc2hpZnQiLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50Iiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInN0eWxlc0luc2VydGVkQXRUb3AiLCJmaXhVcmxzIiwiYWRkU3R5bGVzVG9Eb20iLCJkb21TdHlsZSIsImFkZFN0eWxlIiwibGlzdFRvU3R5bGVzIiwibmV3U3R5bGVzIiwibWVkaWEiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJpbnNlcnRJbnRvIiwibGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AiLCJpbnNlcnRBdCIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNyZWF0ZVN0eWxlRWxlbWVudCIsImF0dHJzIiwiYWRkQXR0cnMiLCJlbCIsInJlbW92ZSIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsInJvb3QiLCJfcG9ueWZpbGxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImdsb2JhbCIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsInZhbHVlRXF1YWwiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJldmFsIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJhbHQiLCJpbWFnZSIsInNwZWNpZXMiLCJvcmlnaW4iLCJnZW5kZXIiLCJfcmVhY3RTcGlubmVycyIsIkNoYXJhY3RlcnMiLCJwYWdlTnVtYmVyIiwiZmV0Y2hDaGFyYWN0ZXJzIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJyZXN1bHRzIiwiX3RoaXMzIiwicHJldlN0YXRlIiwib3V0cHV0IiwiY2hhcmFjdGVyIiwiX0NoYXJhY3RlcjIiLCJuZXh0UGFnZSIsIlByb3BvZ2F0ZUxvYWRlciIsImFpcl9kYXRlIiwiZXBpc29kZSIsIkVwaXNvZGVzIiwiZmV0Y2hFcGlzb2RlcyIsIl9FcGlzb2RlMiIsImRpbWVuc2lvbiIsIkxvY2F0aW9ucyIsImZldGNoTG9jYXRpb25zIiwiX0xvY2F0aW9uMiIsIl9yZWFjdFJvdXRlckRvbSIsIkFwcCIsIl9OYXZiYXIyIiwiX0hvbWUyIiwiX0NoYXJhY3RlcnMyIiwiX0xvY2F0aW9uczIiLCJfRXBpc29kZXMyIiwiX3JlYWN0RG9tMiIsIl9BcHAyIiwiZ2V0RWxlbWVudEJ5SWQiLCJobXIiLCJsb2NhbHMiLCJfX1dFQlBBQ0tfT1VUREFURURfREVQRU5ERU5DSUVTX18iLCJuZXdDb250ZW50Il0sIm1hcHBpbmdzIjoiYUFHQSxJQUFBQSxFQUFBQyxPQUFBLGlCQUNBQSxPQUFBLGlCQUNBLFNBQUFDLEVBQUFDLElBb1FBLFNBQUFELEVBQUFDLEdBQ0EsSUFBQUMsRUFBQUYsS0FBQUcsRUFBQUgsR0FDQSxPQUVBLFFBQUFJLEtBREFELEVBQUFILElBQUEsRUFDQUMsRUFDQUksT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVAsRUFBQUcsS0FDQUssRUFBQUwsR0FBQUgsRUFBQUcsSUFHQSxLQUFBTSxHQUFBLElBQUFDLEdBQ0FDLElBN1FBQyxDQUFBYixFQUFBQyxHQUNBSCxLQUFBRSxFQUFBQyxJQXVEQSxJQUlBYSxFQUpBQyxHQUFBLEVBQ0FDLEVBQUEsdUJBQ0FDLEVBQUEsSUFDQUMsS0FFQUMsS0FDQUMsS0FHQSxTQUFBQyxFQUFBakIsR0FDQSxJQUFBa0IsRUFBQUMsRUFBQW5CLEdBQ0EsSUFBQWtCLEVBQUEsT0FBQUUsRUFDQSxJQUFBQyxFQUFBLFNBQUFDLEdBbUJBLE9BbEJBSixFQUFBSyxJQUFBQyxRQUNBTCxFQUFBRyxJQUNBLElBQUFILEVBQUFHLEdBQUFHLFFBQUFDLFFBQUExQixJQUNBbUIsRUFBQUcsR0FBQUcsUUFBQUUsS0FBQTNCLElBRUFlLEdBQUFmLEdBQ0FVLEVBQUFZLElBRUEsSUFBQUosRUFBQVUsU0FBQUYsUUFBQUosSUFBQUosRUFBQVUsU0FBQUQsS0FBQUwsS0FFQU8sUUFBQUMsS0FDQSw0QkFDQVIsRUFDQSwwQkFDQXRCLEdBRUFlLE1BRUFLLEVBQUFFLElBRUFTLEVBQUEs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LE9BQU8rcEIsRUFBQXQ0QyxRQUFBbGIsY0FBQXVvRSxFQUFBcnRELFFBQUEsTUFBU3JiLFNBQVMyb0UsZUFBZSxvRENKakQsSUFBQTFoRSxFQUFBNUssRUFBQSxvR0FFQSxpQkFBQTRLLFFBQUFsRyxFQUFBN0MsRUFBQStJLEVBQUEsTUFPQSxJQUFBckcsR0FBZWdvRSxLQUFBLEVBRWZySSxlQVBBQSxFQVFBc0MsZ0JBQUF4OUQsR0FFQTdGLEVBQUFuRCxFQUFBLCtDQUFBQSxDQUFBNEssRUFBQXJHLEdBRUFxRyxFQUFBNGhFLFNBQUE5bkUsRUFBQTBELFFBQUF3QyxFQUFBNGhFLFFBR0E5bkUsRUFBQXZFLElBQUFtSSxPQUFBLDRHQUFBbWtFLElBQUEsV0FDQSxJQUFBQyxFQUFBMXNFLEVBQUEsb0dBaUJBLEdBZkEsaUJBQUEwc0UsUUFBQWhvRSxFQUFBN0MsRUFBQTZxRSxFQUFBLE9BRUEsU0FBQTVtRSxFQUFBQyxHQUNBLElBQUF3UixFQUFBelEsRUFBQSxFQUVBLElBQUF5USxLQUFBelIsRUFBQSxDQUNBLElBQUFDLEdBQUFELEVBQUF5UixLQUFBeFIsRUFBQXdSLEdBQUEsU0FDQXpRLElBR0EsSUFBQXlRLEtBQUF4UixFQUFBZSxJQUVBLFdBQUFBLEVBVkEsQ0FXRzhELEVBQUE0aEUsT0FBQUUsRUFBQUYsUUFFSCxVQUFBbnFFLE1BQUEsdURBRUFjLEVBQUF1cEUsR0FwQkEsS0F1QkFob0UsRUFBQXZFLElBQUF1SSxRQUFBLFdBQWdDdkYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHtcbiBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdH0gO1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHQ7XG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKVxuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiYjc1NmJkN2FjYjE2ZjBiNjU5MGNcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSlcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCJcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuIFx0XHRcdFx0dGhyb3cgZXJyO1xuIFx0XHRcdH0pO1xuXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xuIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbiBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpXG4gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSAwO1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vc3JjL2luZGV4LmpzXCIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgY3JlYXRlQ2hhbmdlRW1pdHRlciA9IGV4cG9ydHMuY3JlYXRlQ2hhbmdlRW1pdHRlciA9IGZ1bmN0aW9uIGNyZWF0ZUNoYW5nZUVtaXR0ZXIoKSB7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcblxuICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICBuZXh0TGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNTdWJzY3JpYmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXQoKSB7XG4gICAgY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsaXN0ZW46IGxpc3RlbixcbiAgICBlbWl0OiBlbWl0XG4gIH07XG59OyIsInZhciBlc2NhcGUgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL3VybC9lc2NhcGUuanNcIik7XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOTdjZTRjO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LWZhbWlseTogQWJlbCwgc2Fucy1zZXJpZjtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIHBhZGRpbmc6IDEwcHggNTBweDtcXG59XFxuaGVhZGVyIGgxIHtcXG4gIGNvbG9yOiAjMTExO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgZm9udC1zaXplOiAzMnB4O1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG59XFxuaGVhZGVyIG5hdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5oZWFkZXIgbmF2IGxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxufVxcbmhlYWRlciBuYXYgbGkgYTpub3QobGFzdC1jaGlsZCkge1xcbiAgcGFkZGluZzogMCAxMHB4O1xcbn1cXG5oZWFkZXIgbmF2IGxpIGEge1xcbiAgY29sb3I6ICMxMTE7XFxuICBmb250LWZhbWlseTogQWJlbCwgc2Fucy1zZXJpZjtcXG4gIGZvbnQtc2l6ZTogMjJweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG4gIHRyYW5zaXRpb246IGNvbG9yIDQwMG1zO1xcbiAgei1pbmRleDogMTtcXG59XFxuaGVhZGVyIG5hdiBsaSBhOmhvdmVyIHtcXG4gIGNvbG9yOiAjZmVmZWZlO1xcbn1cXG5oZWFkZXIgbmF2IGxpIGE6YWZ0ZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3R0b206IDA7XFxuICB0b3A6IDA7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IDA7XFxuICBtYXJnaW46IGF1dG87XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMXB4O1xcbiAgY29udGVudDogJy4nO1xcbiAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZDogIzZiOWIyYTtcXG4gIHZpc2liaWxpdHk6IG5vbmU7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogYWxsIDMwMG1zO1xcbiAgei1pbmRleDogLTE7XFxufVxcbmhlYWRlciBuYXYgbGkgYTpob3ZlcjphZnRlciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIGhlaWdodDogMTgwJTtcXG59XFxuLkhvbWUge1xcbiAgYmFja2dyb3VuZDogdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuLi9hc3NldHMvYmFubmVyLnBuZ1wiKSkgKyBcIikgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXIgZml4ZWQ7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogOTR2aDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLkhvbWU6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogJyc7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNTUpO1xcbn1cXG4uSG9tZSBoMiB7XFxuICBjb2xvcjogI2YyZjJmMjtcXG4gIGZvbnQtZmFtaWx5OiBBYmVsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIG1heC13aWR0aDogMTIwMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAtNjBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIHotaW5kZXg6IDI7XFxufVxcbi5MaXN0LUNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRhNzg4O1xcbiAgcGFkZGluZzogMzBweCA1MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uTGlzdC1Db250YWluZXIgaDIge1xcbiAgZm9udC1mYW1pbHk6IEFiZWw7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG59XFxuLkxpc3QtQ29udGFpbmVyIC5MaXN0LUdyaWQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtZ2FwOiA1MHB4IDMwcHg7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDI4MHB4LCAxZnIpKTtcXG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XFxufVxcbi5MaXN0LUNvbnRhaW5lciBidXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZTE0YTtcXG4gIGJveC1zaGFkb3c6IDVweCA1cHggMnB4IHJnYmEoMCwwLDAsMC4xKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBBYmVsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDIwMG1zLCBib3gtc2hhZG93IDI1MG1zLCBjb2xvciAzMDBtcywgdHJhbnNmb3JtIDQwMG1zO1xcbn1cXG4uTGlzdC1Db250YWluZXIgYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWRjMmQ7XFxuICBib3gtc2hhZG93OiAxMHB4IDEwcHggMnB4IHJnYmEoMCwwLDAsMC4xKTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTVweCwgLTVweCk7XFxufVxcbi5MaXN0LUl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjgpO1xcbiAgYm94LXNoYWRvdzogMnB4IDVweCAwIHJnYmEoMCwwLDAsMC4wMyk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LWZhbWlseTogQWJlbCwgc2Fucy1zZXJpZjtcXG4gIHBhZGRpbmc6IDAgNyUgMTAlIDclO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyMDBtcywgYmFja2dyb3VuZC1jb2xvciAyNTBtcywgdHJhbnNmb3JtIDQwMG1zO1xcbn1cXG4uTGlzdC1JdGVtOmhvdmVyIHtcXG4gIGJveC1zaGFkb3c6IDRweCAxMHB4IHJnYmEoMCwwLDAsMC4wMyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTJweCwgLTVweCkgc2NhbGUoMS4wMik7XFxufVxcbi5MaXN0LUl0ZW0gaW1nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGxlZnQ6IC04JTtcXG4gIHdpZHRoOiAxMTYuMiU7XFxufVxcbi5MaXN0LUl0ZW0gaDMge1xcbiAgZm9udC1mYW1pbHk6IEFiZWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG4uTGlzdC1JdGVtIHAge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4zKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDE1cHg7XFxuICBwYWRkaW5nOiAxNnB4IDA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcbi5MaXN0LUl0ZW0gcCBzcGFuIHtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuNyk7XFxufVxcbiosXFxuKjpiZWZvcmUsXFxuKjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlc2NhcGUodXJsKSB7XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICB9XG4gICAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gICAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJ1xuICAgIH1cblxuICAgIHJldHVybiB1cmxcbn1cbiIsIi8vIG11cm11cmhhc2gyIHZpYSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yYXljbW9yZ2FuLzU4ODQyM1xuZnVuY3Rpb24gaGFzaFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGhhc2goc3RyLCBzdHIubGVuZ3RoKS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyLCBzZWVkKSB7XG4gIHZhciBtID0gMHg1YmQxZTk5NTtcbiAgdmFyIHIgPSAyNDtcbiAgdmFyIGggPSBzZWVkIF4gc3RyLmxlbmd0aDtcbiAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIHZhciBjdXJyZW50SW5kZXggPSAwO1xuXG4gIHdoaWxlIChsZW5ndGggPj0gNCkge1xuICAgIHZhciBrID0gVUludDMyKHN0ciwgY3VycmVudEluZGV4KTtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGsgXj0gayA+Pj4gcjtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGggPSBVbXVsMzIoaCwgbSk7XG4gICAgaCBePSBrO1xuICAgIGN1cnJlbnRJbmRleCArPSA0O1xuICAgIGxlbmd0aCAtPSA0O1xuICB9XG5cbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IFVJbnQxNihzdHIsIGN1cnJlbnRJbmRleCk7XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGN1cnJlbnRJbmRleCArIDIpIDw8IDE2O1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSBVSW50MTYoc3RyLCBjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9IFVtdWwzMihoLCBtKTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIGggPj4+IDA7XG59XG5cbmZ1bmN0aW9uIFVJbnQzMihzdHIsIHBvcykge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQocG9zKyspICsgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCA4KSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgMTYpICsgKHN0ci5jaGFyQ29kZUF0KHBvcykgPDwgMjQpO1xufVxuXG5mdW5jdGlvbiBVSW50MTYoc3RyLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgOCk7XG59XG5cbmZ1bmN0aW9uIFVtdWwzMihuLCBtKSB7XG4gIG4gPSBuIHwgMDtcbiAgbSA9IG0gfCAwO1xuICB2YXIgbmxvID0gbiAmIDB4ZmZmZjtcbiAgdmFyIG5oaSA9IG4gPj4+IDE2O1xuICB2YXIgcmVzID0gbmxvICogbSArICgobmhpICogbSAmIDB4ZmZmZikgPDwgMTYpIHwgMDtcbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIHBhID0gZnVuY3Rpb24gZmEoaGEpIHtcbiAgZnVuY3Rpb24gVihiLCBjLCBkLCBrLCBsKSB7XG4gICAgZm9yICh2YXIgYSA9IDAsIGYgPSAwLCBuID0gMCwgZSA9IDAsIGgsIHEsIG0sIHYgPSAwLCBBID0gMCwgQiA9IDAsIHggPSAwLCBDID0gMCwgcCA9IDAsIEcgPSAwLCByID0gMCwgTiA9IHEgPSAwLCBMID0gMCwgdCA9IDAsIEQgPSBkLmxlbmd0aCwgRiA9IEQgLSAxLCBnID0gXCJcIiwgdSA9IFwiXCIsIFMgPSBcIlwiLCBNID0gXCJcIiwgSDsgciA8IEQ7KSB7XG4gICAgICBtID0gZC5jaGFyQ29kZUF0KHIpO1xuICAgICAgciA9PT0gRiAmJiAwICE9PSBmICsgZSArIG4gKyBhICYmICgwICE9PSBmICYmIChtID0gNDcgPT09IGYgPyAxMCA6IDQ3KSwgZSA9IG4gPSBhID0gMCwgRCsrLCBGKyspO1xuXG4gICAgICBpZiAoMCA9PT0gZiArIGUgKyBuICsgYSkge1xuICAgICAgICBpZiAociA9PT0gRiAmJiAoMCA8IHEgJiYgKGcgPSBnLnJlcGxhY2UoUCwgXCJcIikpLCAwIDwgZy50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGcgKz0gZC5jaGFyQXQocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbSA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKDEgPT09IE4pIHN3aXRjaCAobSkge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgTiA9IDA7XG5cbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmb3IgKE4gPSAwLCB0ID0gciwgaCA9IG0sIHItLSwgbSA9IDU5OyB0IDwgRDspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChkLmNoYXJDb2RlQXQoKyt0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgcisrLCBtID0gaDtcblxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICB0ID0gRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGcgPSBnLnRyaW0oKTtcbiAgICAgICAgICAgIGggPSBnLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB4ID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytyOyByIDwgRDspIHtcbiAgICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdChyKTtcblxuICAgICAgICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICB4LS07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0geCkgYnJlYWs7XG4gICAgICAgICAgICAgIHIrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IGQuc3Vic3RyaW5nKHQsIHIpO1xuICAgICAgICAgICAgMCA9PT0gaCAmJiAoaCA9IChnID0gZy5yZXBsYWNlKHFhLCBcIlwiKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGgpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgcSAmJiAoZyA9IGcucmVwbGFjZShQLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcSA9IGcuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgaCA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBoID0gVztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwID0gVihjLCBoLCBwLCBxLCBsICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IHAubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBYICYmIDAgPT09IHQgJiYgKHQgPSBnLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgMCA8IEUgJiYgKGggPSBpYShXLCBnLCBMKSwgSCA9IE8oMywgcCwgaCwgYywgSSwgeSwgdCwgcSwgbCksIGcgPSBoLmpvaW4oXCJcIiksIHZvaWQgMCAhPT0gSCAmJiAwID09PSAodCA9IChwID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKHEgPSAwLCBwID0gXCJcIikpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZyA9IGcucmVwbGFjZShyYSwgc2EpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBcIntcIiArIHAgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBnID0gZy5yZXBsYWNlKHRhLCBcIiQxICQyXCIgKyAoMCA8IFEgPyBUIDogXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBwID0gZyArIFwie1wiICsgcCArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICBwID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIFUoXCJAXCIgKyBwLCAzKSA/IFwiQC13ZWJraXQtXCIgKyBwICsgXCJAXCIgKyBwIDogXCJAXCIgKyBwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBwLCAxMTIgPT09IGsgJiYgKHAgPSAodSArPSBwLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHAgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcCA9IFYoYywgaWEoYywgZywgTCksIHAsIGssIGwgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUyArPSBwO1xuICAgICAgICAgICAgcCA9IEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZyA9ICgwIDwgcSA/IGcucmVwbGFjZShQLCBcIlwiKSA6IGcpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBnLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gRyAmJiAoaCA9IGcuY2hhckNvZGVBdCgwKSwgNDUgPT09IGggfHwgOTYgPCBoICYmIDEyMyA+IGgpICYmICh0ID0gKGcgPSBnLnJlcGxhY2UoXCIgXCIsIFwiOlwiKSkubGVuZ3RoKSwgMCA8IEUgJiYgdm9pZCAwICE9PSAoSCA9IE8oMSwgZywgYywgYiwgSSwgeSwgdS5sZW5ndGgsIGssIGwpKSAmJiAwID09PSAodCA9IChnID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSBcIlxceDAwXFx4MDBcIiksIGggPSBnLmNoYXJDb2RlQXQoMCksIHEgPSBnLmNoYXJDb2RlQXQoMSksIGggKyBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE2OTpcbiAgICAgICAgICAgICAgY2FzZSAxNjM6XG4gICAgICAgICAgICAgICAgTSArPSBnICsgZC5jaGFyQXQocik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZy5jaGFyQ29kZUF0KHQgLSAxKSAmJiAodSArPSBqYShnLCBoLCBxLCBnLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhICsga2EpIHN3aXRjaCAoQikge1xuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgIGNhc2UgMTI2OlxuICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgMCA8IEcgJiYgKE4gPSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNDcgPT09IGYgPyBmID0gMCA6IDAgPT09IHogKyBDICYmIChxID0gMSwgZyArPSBcIlxceDAwXCIpO1xuICAgICAgICAgIDAgPCBFICogbGEgJiYgTygwLCBnLCBjLCBiLCBJLCB5LCB1Lmxlbmd0aCwgaywgbCk7XG4gICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgSSsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhKSB7XG4gICAgICAgICAgICB5Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB5Kys7XG4gICAgICAgICAgaCA9IGQuY2hhckF0KHIpO1xuXG4gICAgICAgICAgc3dpdGNoIChtKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gZSArIGEgKyBmKSBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICBoID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBtICYmIChoID0gXCIgXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGggPSBcIlxcXFwwXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICBoID0gXCJcXFxcZlwiO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgaCA9IFwiXFxcXHZcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgYSAmJiAwIDwgeiAmJiAocSA9IEwgPSAxLCBoID0gXCJcXGZcIiArIGgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBlICsgZiArIGEgKyBKICYmIDAgPCBHKSBzd2l0Y2ggKHIgLSBHKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB2ICYmIDU4ID09PSBkLmNoYXJDb2RlQXQociAtIDMpICYmIChKID0gdik7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEEgJiYgKEogPSBBKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBhICYmIChHID0gcik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBmICsgbiArIGUgKyBhICYmIChxID0gMSwgaCArPSBcIlxcclwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgIDAgPT09IGYgJiYgKGUgPSBlID09PSBtID8gMCA6IDAgPT09IGUgPyBtIDogZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBmICYmIChlID0gZSA9PT0gbSA/IDAgOiAwID09PSBlID8gbSA6IGUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBuICYmIGErKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgbiAmJiBhLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBlICsgZiArIGEgJiYgbi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGUgKyBmICsgYSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBDKSBzd2l0Y2ggKDIgKiB2ICsgMyAqIEEpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgeCA9IDAsIEMgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gZiArIG4gKyBlICsgYSArIEcgKyBwICYmIChwID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IGUgKyBhICsgbikpIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIG0gKyAzICogZC5jaGFyQ29kZUF0KHIgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBmID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IHIsIGYgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IG0gJiYgNDIgPT09IHYgJiYgKDMzID09PSBkLmNoYXJDb2RlQXQodCArIDIpICYmICh1ICs9IGQuc3Vic3RyaW5nKHQsIHIgKyAxKSksIGggPSBcIlwiLCBmID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoMCA9PT0gZikge1xuICAgICAgICAgICAgaWYgKDAgPT09IHogKyBlICsgYSArIHAgJiYgMTA3ICE9PSBrICYmIDU5ICE9PSBtKSBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgIGNhc2UgNjI6XG4gICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IEMpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgaCArPSBcIlxceDAwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBoID0gXCJcXHgwMFwiICsgaCArICg0NCA9PT0gbSA/IFwiXCIgOiBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugc3dpdGNoIChtKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICBDID0gKyt4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgICAgICAgMCA9PT0gKEMgPSAtLXgpICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAwID09PSBDICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZyArPSBoO1xuICAgICAgICAgICAgMzIgIT09IG0gJiYgOSAhPT0gbSAmJiAoQiA9IG0pO1xuICAgICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBBID0gdjtcbiAgICAgIHYgPSBtO1xuICAgICAgcisrO1xuICAgIH1cblxuICAgIHQgPSB1Lmxlbmd0aDtcbiAgICAwIDwgWCAmJiAwID09PSB0ICYmIDAgPT09IFMubGVuZ3RoICYmIDAgPT09IGNbMF0ubGVuZ3RoID09PSAhMSAmJiAoMTA5ICE9PSBrIHx8IDEgPT09IGMubGVuZ3RoICYmICgwIDwgeiA/IEsgOiBSKSA9PT0gY1swXSkgJiYgKHQgPSBjLmpvaW4oXCIsXCIpLmxlbmd0aCArIDIpO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICBpZiAoMCA9PT0geiAmJiAxMDcgIT09IGspIHtcbiAgICAgICAgZCA9IDA7XG4gICAgICAgIGEgPSBjLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGYgPSBBcnJheShhKTsgZCA8IGE7ICsrZCkge1xuICAgICAgICAgIHYgPSBjW2RdLnNwbGl0KHVhKTtcbiAgICAgICAgICBBID0gXCJcIjtcbiAgICAgICAgICBCID0gMDtcblxuICAgICAgICAgIGZvciAoRCA9IHYubGVuZ3RoOyBCIDwgRDsgKytCKSB7XG4gICAgICAgICAgICBpZiAoISgwID09PSAoeCA9IChlID0gdltCXSkubGVuZ3RoKSAmJiAxIDwgRCkpIHtcbiAgICAgICAgICAgICAgciA9IEEuY2hhckNvZGVBdChBLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICBMID0gZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICBuID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IEIpIHN3aXRjaCAocikge1xuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIiBcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHN3aXRjaCAoTCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIEs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNjpcbiAgICAgICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIGUgKyBLO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZS5jaGFyQ29kZUF0KDEpICsgMyAqIGUuY2hhckNvZGVBdCgyKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUzMDpcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IFkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuICsgZS5zdWJzdHJpbmcoOCwgeCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPiBCIHx8IDEgPiB2W0IgLSAxXS5sZW5ndGgpIGUgPSBuICsgSyArIGU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGUgPSAxIDwgeCAmJiAwIDwgZS5pbmRleE9mKFwiOlwiKSA/IG4gKyBlLnJlcGxhY2UodmEsIFwiJDFcIiArIEsgKyBcIiQyXCIpIDogbiArIGUgKyBLO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQSArPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZbZF0gPSBBLnJlcGxhY2UoUCwgXCJcIikudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYyA9IGY7XG4gICAgICB9XG5cbiAgICAgIGggPSBjO1xuICAgICAgaWYgKDAgPCBFICYmIChIID0gTygyLCB1LCBoLCBiLCBJLCB5LCB0LCBrLCBsKSwgdm9pZCAwICE9PSBIICYmIDAgPT09ICh1ID0gSCkubGVuZ3RoKSkgcmV0dXJuIE0gKyB1ICsgUztcbiAgICAgIHUgPSBoLmpvaW4oXCIsXCIpICsgXCJ7XCIgKyB1ICsgXCJ9XCI7XG5cbiAgICAgIGlmICgwICE9PSB3ICogSikge1xuICAgICAgICAyICE9PSB3IHx8IFUodSwgMikgfHwgKEogPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEopIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2Uod2EsIFwiOi1tb3otJDFcIikgKyB1O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2UoWiwgXCI6Oi13ZWJraXQtaW5wdXQtJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6Oi1tb3otJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6LW1zLWlucHV0LSQxXCIpICsgdTtcbiAgICAgICAgfVxuXG4gICAgICAgIEogPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBNICsgdSArIFM7XG4gIH1cblxuICBmdW5jdGlvbiBpYShiLCBjLCBkKSB7XG4gICAgdmFyIGsgPSBjLnRyaW0oKS5zcGxpdCh4YSk7XG4gICAgYyA9IGs7XG4gICAgdmFyIGwgPSBrLmxlbmd0aCxcbiAgICAgICAgYSA9IGIubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChhKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBmID0gMDtcblxuICAgICAgICBmb3IgKGIgPSAwID09PSBhID8gXCJcIiA6IGJbMF0gKyBcIiBcIjsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGNbZl0gPSBtYShiLCBjW2ZdLCBkLCBhKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIG4gPSBmID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgYTsgKytlKSB7XG4gICAgICAgICAgICBjW24rK10gPSBtYShiW2VdICsgXCIgXCIsIGtbZl0sIGQsIGEpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gbWEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gbCAmJiAobCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChsKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICBzd2l0Y2ggKHogKyBrKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgwID09PSBiLnRyaW0oKS5sZW5ndGgpIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjLnJlcGxhY2UoTSwgXCIkMVwiICsgYi50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHN3aXRjaCAoYy5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICBpZiAoMCA8IFkgJiYgMCA8IHopIHJldHVybiBjLnJlcGxhY2UoeWEsIFwiJDFcIikucmVwbGFjZShNLCBcIiQxXCIgKyBSKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBiLnRyaW0oKSArIGM7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCBkICogeiAmJiAwIDwgYy5pbmRleE9mKFwiXFxmXCIpKSByZXR1cm4gYy5yZXBsYWNlKE0sICg1OCA9PT0gYi5jaGFyQ29kZUF0KDApID8gXCJcIiA6IFwiJDFcIikgKyBiLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGIgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gamEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gMCxcbiAgICAgICAgYSA9IGIgKyBcIjtcIjtcbiAgICBjID0gMiAqIGMgKyAzICogZCArIDQgKiBrO1xuXG4gICAgaWYgKDk0NCA9PT0gYykge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgICAgYiA9IGEuaW5kZXhPZihcIjpcIiwgOSkgKyAxO1xuICAgICAgZCA9IGEuc3Vic3RyaW5nKDAsIGIpLnRyaW0oKTtcbiAgICAgIGsgPSBhLnN1YnN0cmluZyhiLCBsIC0gMSkudHJpbSgpO1xuXG4gICAgICBzd2l0Y2ggKGEuY2hhckNvZGVBdCg5KSAqIFEpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgaWYgKDExMCAhPT0gYS5jaGFyQ29kZUF0KDEwKSkgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmb3IgKGEgPSBrLnNwbGl0KChrID0gXCJcIiwgemEpKSwgYiA9IGMgPSAwLCBsID0gYS5sZW5ndGg7IGMgPCBsOyBiID0gMCwgKytjKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBmID0gYVtjXSwgbiA9IGYuc3BsaXQoQWEpOyBmID0gbltiXTspIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgIGlmICgxID09PSBRICYmICg2NCA8IGUgJiYgOTAgPiBlIHx8IDk2IDwgZSAmJiAxMjMgPiBlIHx8IDk1ID09PSBlIHx8IDQ1ID09PSBlICYmIDQ1ICE9PSBmLmNoYXJDb2RlQXQoMSkpKSBzd2l0Y2ggKGlzTmFOKHBhcnNlRmxvYXQoZikpICsgKC0xICE9PSBmLmluZGV4T2YoXCIoXCIpKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5maW5pdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFsdGVybmF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFja3dhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJydW5uaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvcndhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3RoXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2UtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2Utb3V0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlYXNlLWluLW91dFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicGF1c2VkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXZlcnNlXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbHRlcm5hdGUtcmV2ZXJzZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5oZXJpdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5pdGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtc3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBmICs9IFQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuW2IrK10gPSBmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrICs9ICgwID09PSBjID8gXCJcIiA6IFwiLFwiKSArIG4uam9pbihcIiBcIik7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGsgPSBkICsgayArIFwiO1wiO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBVKGssIDEpID8gXCItd2Via2l0LVwiICsgayArIGsgOiBrO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIVUoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA0NSA9PT0gYS5jaGFyQ29kZUF0KDkpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbW96LVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1vei1cIiArIGEgKyBcIi1tcy1cIiArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgcmV0dXJuIDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkgPyBcIi13ZWJraXQtXCIgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtYm94LVwiICsgYS5yZXBsYWNlKFwiLWdyb3dcIiwgXCJcIikgKyBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJncm93XCIsIFwicG9zaXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYS5yZXBsYWNlKFwic2hyaW5rXCIsIFwibmVnYXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJiYXNpc1wiLCBcInByZWZlcnJlZC1zaXplXCIpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLWZsZXgtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoXCI6XCIsIDE1KSkucmVwbGFjZShcImZsZXgtXCIsIFwiXCIpLnJlcGxhY2UoXCJzcGFjZS1iZXR3ZWVuXCIsIFwianVzdGlmeVwiKTtcbiAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1ib3gtcGFja1wiICsgYiArIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LXBhY2tcIiArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBCYS50ZXN0KGEpID8gYS5yZXBsYWNlKG5hLCBcIjotd2Via2l0LVwiKSArIGEucmVwbGFjZShuYSwgXCI6LW1vei1cIikgKyBhIDogYTtcblxuICAgICAgY2FzZSAxRTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBsID0gYi5pbmRleE9mKFwiLVwiKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoYWEsIFwidGJcIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShhYSwgXCJ0Yi1ybFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKGFhLCBcImxyXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoXCJzdGlja3lcIiwgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgbCA9IChhID0gYikubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChsKSA/IGEuc3Vic3RyaW5nKDAsIGwpIDogYSkuc3Vic3RyaW5nKGIuaW5kZXhPZihcIjpcIiwgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChjID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCBcIi13ZWJraXQtXCIgKyBiKSArIFwiO1wiICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsIFwiLXdlYmtpdC1cIiArICgxMDIgPCBjID8gXCJpbmxpbmUtXCIgOiBcIlwiKSArIFwiYm94XCIpICsgXCI7XCIgKyBhLnJlcGxhY2UoYiwgXCItd2Via2l0LVwiICsgYikgKyBcIjtcIiArIGEucmVwbGFjZShiLCBcIi1tcy1cIiArIGIgKyBcImJveFwiKSArIFwiO1wiICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgXCI7XCI7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKFwiLWl0ZW1zXCIsIFwiXCIpLCBcIi13ZWJraXQtXCIgKyBhICsgXCItd2Via2l0LWJveC1cIiArIGIgKyBcIi1tcy1mbGV4LVwiICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtZmxleC1pdGVtLVwiICsgYS5yZXBsYWNlKENhLCBcIlwiKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LWxpbmUtcGFja1wiICsgYS5yZXBsYWNlKFwiYWxpZ24tY29udGVudFwiLCBcIlwiKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoMCA8IChsID0gYS5pbmRleE9mKFwiLWNvbnRlbnRcIiwgOSkpICYmIDEwOSA9PT0gYS5jaGFyQ29kZUF0KGwgLSAzKSAmJiA0NSAhPT0gYS5jaGFyQ29kZUF0KGwgLSA0KSkgcmV0dXJuIGIgPSBhLnN1YnN0cmluZyhsIC0gMyksIFwid2lkdGg6LXdlYmtpdC1cIiArIGIgKyBcIndpZHRoOi1tb3otXCIgKyBiICsgXCJ3aWR0aDpcIiArIGI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSBcIi13ZWJraXQtXCIgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItbXMtXCIgKyBhIDogXCJcIikgKyBhLCAyMTEgPT09IGQgKyBrICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKFwidHJhbnNmb3JtXCIsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZihcIjtcIiwgMjcpICsgMSkucmVwbGFjZShEYSwgXCIkMS13ZWJraXQtJDJcIikgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gVShiLCBjKSB7XG4gICAgdmFyIGQgPSBiLmluZGV4T2YoMSA9PT0gYyA/IFwiOlwiIDogXCJ7XCIpLFxuICAgICAgICBrID0gYi5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGQgOiAxMCk7XG4gICAgZCA9IGIuc3Vic3RyaW5nKGQgKyAxLCBiLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBiYSgyICE9PSBjID8gayA6IGsucmVwbGFjZShFYSwgXCIkMVwiKSwgZCwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBzYShiLCBjKSB7XG4gICAgdmFyIGQgPSBqYShjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZCAhPT0gYyArIFwiO1wiID8gZC5yZXBsYWNlKEZhLCBcIiBvciAoJDEpXCIpLnN1YnN0cmluZyg0KSA6IFwiKFwiICsgYyArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gTyhiLCBjLCBkLCBrLCBsLCBhLCBmLCBuLCBlKSB7XG4gICAgZm9yICh2YXIgaCA9IDAsIHEgPSBjLCBtOyBoIDwgRTsgKytoKSB7XG4gICAgICBzd2l0Y2ggKG0gPSBjYVtoXS5jYWxsKEYsIGIsIHEsIGQsIGssIGwsIGEsIGYsIG4sIGUpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBxID0gbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHEpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSAhMTpcbiAgICAgIGNhc2UgITA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICBjYXNlIGM6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYShiKSB7XG4gICAgc3dpdGNoIChiKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgRSA9IGNhLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzd2l0Y2ggKGIuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGQgPSBiLmxlbmd0aDsgYyA8IGQ7ICsrYykge1xuICAgICAgICAgICAgICBkYShiW2NdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uOlxuICAgICAgICAgICAgY2FbRSsrXSA9IGI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgIGxhID0gISFiIHwgMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoYikge1xuICAgIGZvciAodmFyIGMgaW4gYikge1xuICAgICAgdmFyIGQgPSBiW2NdO1xuXG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSBcImtleWZyYW1lXCI6XG4gICAgICAgICAgUSA9IGQgfCAwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJnbG9iYWxcIjpcbiAgICAgICAgICBZID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNhc2NhZGVcIjpcbiAgICAgICAgICB6ID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNvbXByZXNzXCI6XG4gICAgICAgICAgb2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic2VtaWNvbG9uXCI6XG4gICAgICAgICAga2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwicHJlc2VydmVcIjpcbiAgICAgICAgICBYID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInByZWZpeFwiOlxuICAgICAgICAgIGJhID0gbnVsbCwgZCA/IFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgYmEgPSBkKSA6IHcgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEYoYiwgYykge1xuICAgIGlmICh2b2lkIDAgIT09IHRoaXMgJiYgdGhpcy5jb25zdHJ1Y3RvciA9PT0gRikgcmV0dXJuIGZhKGIpO1xuICAgIHZhciBkID0gYixcbiAgICAgICAgayA9IGQuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGsgJiYgKGsgPSAoZCA9IGQudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcbiAgICAwIDwgUSAmJiAoVCA9IGQucmVwbGFjZShHYSwgOTEgPT09IGsgPyBcIlwiIDogXCItXCIpKTtcbiAgICBrID0gMTtcbiAgICAxID09PSB6ID8gUiA9IGQgOiBLID0gZDtcbiAgICBkID0gW1JdO1xuXG4gICAgaWYgKDAgPCBFKSB7XG4gICAgICB2YXIgbCA9IE8oLTEsIGMsIGQsIGQsIEksIHksIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBsICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBsICYmIChjID0gbCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBWKFcsIGQsIGMsIDAsIDApO1xuICAgIDAgPCBFICYmIChsID0gTygtMiwgYSwgZCwgZCwgSSwgeSwgYS5sZW5ndGgsIDAsIDApLCB2b2lkIDAgIT09IGwgJiYgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIChhID0gbCkgJiYgKGsgPSAwKSk7XG4gICAgSyA9IFIgPSBUID0gXCJcIjtcbiAgICBKID0gMDtcbiAgICB5ID0gSSA9IDE7XG4gICAgcmV0dXJuIDAgPT09IG9hICogayA/IGEgOiBhLnJlcGxhY2UoUCwgXCJcIikucmVwbGFjZShIYSwgXCJcIikucmVwbGFjZShJYSwgXCIkMVwiKS5yZXBsYWNlKEphLCBcIiQxXCIpLnJlcGxhY2UoS2EsIFwiIFwiKTtcbiAgfVxuXG4gIHZhciBxYSA9IC9eXFwwKy9nLFxuICAgICAgUCA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgbmEgPSAvOiAqL2csXG4gICAgICBCYSA9IC96b298Z3JhLyxcbiAgICAgIERhID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgemEgPSAvLCtcXHMqKD8hW14oXSpbKV0pL2csXG4gICAgICBBYSA9IC8gK1xccyooPyFbXihdKlspXSkvZyxcbiAgICAgIHVhID0gLyAqW1xcMF0gKi9nLFxuICAgICAgeGEgPSAvLFxccis/L2csXG4gICAgICBNID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICB5YSA9IC86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nLFxuICAgICAgR2EgPSAvXFxXKy9nLFxuICAgICAgdGEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBaID0gLzo6KHBsYWNlKS9nLFxuICAgICAgd2EgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBIYSA9IC9cXHMrKD89W3tcXF07PTo+XSkvZyxcbiAgICAgIElhID0gLyhbW309Oj5dKVxccysvZyxcbiAgICAgIEphID0gLyhcXHtbXntdKz8pOyg/PVxcfSkvZyxcbiAgICAgIEthID0gL1xcc3syLH0vZyxcbiAgICAgIHZhID0gLyhbXlxcKF0pKDorKSAqL2csXG4gICAgICBhYSA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIHJhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgRmEgPSAvKFteXSo/KTsvZyxcbiAgICAgIENhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBFYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIHkgPSAxLFxuICAgICAgSSA9IDEsXG4gICAgICBKID0gMCxcbiAgICAgIHogPSAxLFxuICAgICAgdyA9IDEsXG4gICAgICBZID0gMSxcbiAgICAgIG9hID0gMCxcbiAgICAgIGthID0gMCxcbiAgICAgIFggPSAwLFxuICAgICAgVyA9IFtdLFxuICAgICAgY2EgPSBbXSxcbiAgICAgIEUgPSAwLFxuICAgICAgYmEgPSBudWxsLFxuICAgICAgbGEgPSAwLFxuICAgICAgUSA9IDEsXG4gICAgICBUID0gXCJcIixcbiAgICAgIEsgPSBcIlwiLFxuICAgICAgUiA9IFwiXCI7XG4gIEYudXNlID0gZGE7XG4gIEYuc2V0ID0gZWE7XG4gIHZvaWQgMCAhPT0gaGEgJiYgZWEoaGEpO1xuICByZXR1cm4gRjtcbn07XG5cbi8vICB3ZWFrXG5mdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxudmFyIFNUWUxFU19LRVkgPSAnX19lbW90aW9uX3N0eWxlcyc7XG52YXIgVEFSR0VUX0tFWSA9ICdfX2Vtb3Rpb25fdGFyZ2V0JztcbnZhciB1bml0bGVzcyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lQ2xhbXA6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgbWVtb2l6ZSwgU1RZTEVTX0tFWSwgVEFSR0VUX0tFWSwgdW5pdGxlc3MsIGhhc2hTdHJpbmcsIHBhIGFzIFN0eWxpcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgeyBTVFlMRVNfS0VZLCBTdHlsaXMsIFRBUkdFVF9LRVksIGhhc2hTdHJpbmcsIG1lbW9pemUsIHVuaXRsZXNzIH0gZnJvbSAnZW1vdGlvbi11dGlscyc7XG5pbXBvcnQgc3R5bGlzUnVsZVNoZWV0IGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcblxuLypcblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG4tICdwb2x5ZmlsbHMnIG9uIHNlcnZlciBzaWRlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ2dsYW1vci9saWIvc2hlZXQnXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KClcblxuc3R5bGVTaGVldC5pbmplY3QoKVxuLSAnaW5qZWN0cycgdGhlIHN0eWxlc2hlZXQgaW50byB0aGUgcGFnZSAob3IgaW50byBtZW1vcnkgaWYgb24gc2VydmVyKVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZVRhZygpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy50eXBlID0gJ3RleHQvY3NzJztcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgJycpO1xuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gICAgdGhpcy5pc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgICB0aGlzLmlzU3BlZWR5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgaWYgKHRoaXMuaW5qZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBpbmplY3RlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIpIHtcbiAgICAgIHRoaXMudGFnc1swXSA9IG1ha2VTdHlsZVRhZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXJ2ZXIgc2lkZSAncG9seWZpbGwnLiBqdXN0IGVub3VnaCBiZWhhdmlvciB0byBiZSB1c2VmdWwuXG4gICAgICB0aGlzLnNoZWV0ID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5pbmplY3RlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnNwZWVkeSA9IGZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gICAgaWYgKHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICAvLyBjYW5ub3QgY2hhbmdlIHNwZWVkeSBtb2RlIGFmdGVyIGluc2VydGluZyBhbnkgcnVsZSB0byBzaGVldC4gRWl0aGVyIGNhbGwgc3BlZWR5KCR7Ym9vbH0pIGVhcmxpZXIgaW4geW91ciBhcHAsIG9yIGNhbGwgZmx1c2goKSBiZWZvcmUgc3BlZWR5KCR7Ym9vbH0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgY2hhbmdlIHNwZWVkeSBub3dcIik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NwZWVkeSA9ICEhYm9vbDtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUsIHNvdXJjZU1hcCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbGxlZ2FsIHJ1bGUnLCBydWxlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RhZyA9IG1ha2VTdHlsZVRhZygpO1xuXG4gICAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuXG4gICAgICAgIF90YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSArIChzb3VyY2VNYXAgfHwgJycpKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3RyKys7XG5cbiAgICAgIGlmICh0aGlzLmN0ciAlIDY1MDAwID09PSAwKSB7XG4gICAgICAgIHRoaXMudGFncy5wdXNoKG1ha2VTdHlsZVRhZygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW5vdWdoICdzcGVjIGNvbXBsaWFuY2UnIHRvIGJlIGFibGUgdG8gZXh0cmFjdCB0aGUgcnVsZXMgbGF0ZXJcbiAgICAgIC8vIGluIG90aGVyIHdvcmRzLCBqdXN0IHRoZSBydWxlXG4gICAgICB0aGlzLnNoZWV0LnB1c2gocnVsZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50YWdzID0gW107XG4gICAgICB0aGlzLmN0ciA9IDA7IC8vIHRvZG8gLSBsb29rIGZvciByZW1uYW50cyBpbiBkb2N1bWVudC5zdHlsZVNoZWV0c1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaW1wbGVyIG9uIHNlcnZlclxuICAgICAgdGhpcy5zaGVldCA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuaW5qZWN0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoKTsgLy8g8J+agFxuXG5zaGVldC5pbmplY3QoKTtcbnZhciBzdHlsaXNPcHRpb25zID0ge1xuICBrZXlmcmFtZTogZmFsc2Vcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0eWxpc09wdGlvbnMuY29tcHJlc3MgPSBmYWxzZTtcbn1cblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoc3R5bGlzT3B0aW9ucyk7XG52YXIgZXh0ZXJuYWxTdHlsaXNQbHVnaW5zID0gW107XG52YXIgdXNlID0gc3R5bGlzLnVzZTtcblxuZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gIHNoZWV0Lmluc2VydChydWxlLCBjdXJyZW50U291cmNlTWFwKTtcbn1cblxudmFyIGluc2VydGlvblBsdWdpbiA9IHN0eWxpc1J1bGVTaGVldChpbnNlcnRSdWxlKTtcbnZhciB1c2VTdHlsaXNQbHVnaW4gPSBmdW5jdGlvbiB1c2VTdHlsaXNQbHVnaW4ocGx1Z2luKSB7XG4gIGV4dGVybmFsU3R5bGlzUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gIHVzZShudWxsKShleHRlcm5hbFN0eWxpc1BsdWdpbnMpKGluc2VydGlvblBsdWdpbik7XG59O1xudmFyIHJlZ2lzdGVyZWQgPSB7fTtcbnZhciBpbnNlcnRlZCA9IHt9O1xudmFyIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcbnN0eWxpcy51c2UoaW5zZXJ0aW9uUGx1Z2luKTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gJyc7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICBpZiAoaW50ZXJwb2xhdGlvbltTVFlMRVNfS0VZXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb25bVEFSR0VUX0tFWV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyBpbnRlcnBvbGF0aW9uW1RBUkdFVF9LRVldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIHRoaXMgPT09IHVuZGVmaW5lZCA/IGludGVycG9sYXRpb24oKSA6IGludGVycG9sYXRpb24odGhpcy5tZXJnZWRQcm9wcywgdGhpcy5jb250ZXh0KSwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbik7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QuY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgICAgIHJldHVybiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID09PSBmYWxzZSAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG4gIH1cbn1cblxudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gJyc7XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYga2V5LmNoYXJDb2RlQXQoMSkgIT09IDQ1ICYmIC8vIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIG9iamVjdFRvU3RyaW5nQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG9iaikge1xuICBpZiAob2JqZWN0VG9TdHJpbmdDYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZ0NhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbikge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uLCBmYWxzZSk7XG4gICAgfSwgdGhpcyk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkW29ialtrZXldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IGtleSArIFwie1wiICsgcmVnaXN0ZXJlZFtvYmpba2V5XV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIG9ialtrZXldKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgb2JqW2tleV0sIGZhbHNlKSArIFwifVwiO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgb2JqZWN0VG9TdHJpbmdDYWNoZS5zZXQob2JqLCBzdHJpbmcpO1xuICByZXR1cm4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0xhc3RDaGFyRG90KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmNoYXJDb2RlQXQoc3RyaW5nLmxlbmd0aCAtIDEpID09PSA0NjsgLy8gLlxufVxuXG52YXIgaGFzaDtcbnZhciBuYW1lO1xudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbl0rKVxccypbO1xcbl0vZztcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0cmluZ3MpIHtcbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlcyA9IHN0cmluZ3NbMF07XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGludGVycG9sYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24sIGkpIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIGludGVycG9sYXRpb24sIGlzTGFzdENoYXJEb3Qoc3R5bGVzKSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSA9PT0gdHJ1ZSAmJiBzdHJpbmdzW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpICsgMV07XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2UobGFiZWxQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gXCItXCIgKyBwMTtcbiAgICByZXR1cm4gJyc7XG4gIH0pO1xuICBoYXNoID0gaGFzaFN0cmluZyhzdHlsZXMgKyBpZGVudGlmaWVyTmFtZSk7XG4gIG5hbWUgPSBoYXNoICsgaWRlbnRpZmllck5hbWU7XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBzb3VyY2VNYXBSZWdFeCA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy87XG4gIHZhciBvbGRTdHlsaXMgPSBzdHlsaXM7XG5cbiAgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlTWFwUmVnRXguZXhlYyhzdHlsZXMpO1xuICAgIGN1cnJlbnRTb3VyY2VNYXAgPSByZXN1bHQgPyByZXN1bHRbMF0gOiAnJztcbiAgICBvbGRTdHlsaXMoc2VsZWN0b3IsIHN0eWxlcyk7XG4gICAgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdmFyIHNlbGVjdG9yID0gXCJjc3MtXCIgKyBuYW1lO1xuXG4gIGlmIChyZWdpc3RlcmVkW3NlbGVjdG9yXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVnaXN0ZXJlZFtzZWxlY3Rvcl0gPSBzdHlsZXM7XG4gIH1cblxuICBpZiAoaW5zZXJ0ZWRbaGFzaF0gPT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxpcyhcIi5cIiArIHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgIGluc2VydGVkW2hhc2hdID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB2YXIgYW5pbWF0aW9uID0gXCJhbmltYXRpb24tXCIgKyBuYW1lO1xuXG4gIGlmIChpbnNlcnRlZFtoYXNoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzKCcnLCBcIkBrZXlmcmFtZXMgXCIgKyBhbmltYXRpb24gKyBcIntcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufVxuZnVuY3Rpb24gaW5qZWN0R2xvYmFsKCkge1xuICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIHN0eWxlcyk7XG4gICAgaW5zZXJ0ZWRbaGFzaF0gPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBmb250RmFjZSgpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIFwiQGZvbnQtZmFjZXtcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbmZ1bmN0aW9uIG1lcmdlKGNsYXNzTmFtZSwgc291cmNlTWFwKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMsIHNvdXJjZU1hcCk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzbmFtZXMoKSB7XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciBuZXh0ID0gY2xzICYmIGNscyArICcgJyB8fCBjbHM7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBjbHMgPSBuZXh0ICsgY2xhc3NuYW1lcyhhcmcoKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgY2xzID0gbmV4dCArIGNsYXNzbmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSkge1xuICAgICAgICAgICAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgY2xzICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgY2xzID0gbmV4dCArIGFyZztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59XG5cbmZ1bmN0aW9uIGN4KCkge1xuICByZXR1cm4gbWVyZ2UoY2xhc3NuYW1lcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xufVxuZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgaWRzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgc2hlZXQuZmx1c2goKTtcbiAgaW5zZXJ0ZWQgPSB7fTtcbiAgcmVnaXN0ZXJlZCA9IHt9O1xuICBzaGVldC5pbmplY3QoKTtcbn1cblxuZXhwb3J0IHsgc2hlZXQsIHVzZVN0eWxpc1BsdWdpbiwgcmVnaXN0ZXJlZCwgaW5zZXJ0ZWQsIGNzcywga2V5ZnJhbWVzLCBpbmplY3RHbG9iYWwsIGZvbnRGYWNlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBtZXJnZSwgY3gsIGh5ZHJhdGUsIGZsdXNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBhdCwgZGVwdGgpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0aW5zZXJ0UnVsZShjb250ZW50KVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAoYXQgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAoYXQpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksaGE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YmE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtrYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBtYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbWEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBuYT1udWxsLG9hPXt9O1xuZnVuY3Rpb24gcGEoKXtpZihuYSlmb3IodmFyIGEgaW4gb2Epe3ZhciBiPW9hW2FdLGM9bmEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcWFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtyYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7cmFbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmc2Eoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHNhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHNhKGEsYixjKXt0YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3RhW2FdPWI7dWFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcWE9W10scmE9e30sdGE9e30sdWE9e307ZnVuY3Rpb24gdmEoYSl7bmE/RChcIjEwMVwiKTp2b2lkIDA7bmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cGEoKX1mdW5jdGlvbiB3YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtvYS5oYXNPd25Qcm9wZXJ0eShjKSYmb2FbY109PT1kfHwob2FbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxvYVtjXT1kLGI9ITApfWImJnBhKCl9XG52YXIgeGE9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpxYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cmEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dGEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp1YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp2YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6d2F9KSxDYT1udWxsLERhPW51bGwsRWE9bnVsbDtmdW5jdGlvbiBGYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUVhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBHYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSGEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIElhPW51bGw7XG5mdW5jdGlvbiBKYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylGYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkZhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEthKGEpe3JldHVybiBKYShhLCEwKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gSmEoYSwhMSl9dmFyIE1hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnZhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp3YX07XG5mdW5jdGlvbiBOYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPUNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBPYShhLGIpe251bGwhPT1hJiYoSWE9R2EoSWEsYSkpO2E9SWE7SWE9bnVsbDthJiYoYj9IYShhLEthKTpIYShhLExhKSxJYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFBhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHFhLmxlbmd0aDtmKyspe3ZhciBoPXFhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUdhKGUsaCkpfU9hKGUsITEpfXZhciBRYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TWEsZ2V0TGlzdGVuZXI6TmEscnVuRXZlbnRzSW5CYXRjaDpPYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlBhfSksUmE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1JhLFNhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrUmE7XG5mdW5jdGlvbiBUYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFVhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbU2FdfHxudWxsfXZhciBhYj1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VGEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpVYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlZhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1NhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gYmIoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGNiKGEsYixjKXtpZihiPU5hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmYmIoYS5fdGFyZ2V0SW5zdCxjYixhKX1cbmZ1bmN0aW9uIGViKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtiYihiLGNiLGEpfX1mdW5jdGlvbiBmYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1OYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZmIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGhiKGEpe0hhKGEsZGIpfVxuZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZmIoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZmIoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgamI9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpoYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtIYShhLGViKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0hhKGEsZ2IpfX0pLGtiPW51bGw7ZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBtYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cGI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoTik7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxFYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxLYj0hMTtcbmZ1bmN0aW9uIExiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBNYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTWIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0tiPSEwO3JldHVybiBBYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmS2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUGIoYSxiKXtpZihOYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhd2ImJkxiKGEsYik/KGE9bWIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsTmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFFiPXtldmVudFR5cGVzOkViLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUViLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUViLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1FYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgTmI/TGIoYSxjKSYmKGU9RWIuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1FYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKE5ifHxlIT09RWIuY29tcG9zaXRpb25TdGFydD9lPT09RWIuY29tcG9zaXRpb25FbmQmJk5iJiYoZj1tYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1uYigpLE5iPSEwKSksZT10Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU1iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxoYihlKSxmPWUpOmY9bnVsbDsoYT15Yj9PYihhLGMpOlBiKGEsYykpPyhiPXViLmdldFBvb2xlZChFYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaGIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sUmI9bnVsbCxTYj1udWxsLFRiPW51bGw7ZnVuY3Rpb24gVWIoYSl7aWYoYT1EYShhKSl7UmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPUNhKGEuc3RhdGVOb2RlKTtSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIFZiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1JiPWF9fTtmdW5jdGlvbiBXYihhKXtTYj9UYj9UYi5wdXNoKGEpOlRiPVthXTpTYj1hfVxuZnVuY3Rpb24gWGIoKXtyZXR1cm4gbnVsbCE9PVNifHxudWxsIT09VGJ9ZnVuY3Rpb24gWWIoKXtpZihTYil7dmFyIGE9U2IsYj1UYjtUYj1TYj1udWxsO1ViKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylVYihiW2FdKX19dmFyIFpiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpWYixlbnF1ZXVlU3RhdGVSZXN0b3JlOldiLG5lZWRzU3RhdGVSZXN0b3JlOlhiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOllifSk7ZnVuY3Rpb24gJGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBhYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBiYygpe312YXIgY2M9ITE7ZnVuY3Rpb24gZGMoYSxiKXtpZihjYylyZXR1cm4gYShiKTtjYz0hMDt0cnl7cmV0dXJuICRiKGEsYil9ZmluYWxseXtjYz0hMSxYYigpJiYoYmMoKSxZYigpKX19XG52YXIgZWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZmMoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFlY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gZ2MoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGhjKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGpjKGEpe3ZhciBiPWljKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBrYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9amMoYSkpfWZ1bmN0aW9uIGxjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1pYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG1jPWJhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG5jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbndjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHljKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14YyYmYVt4Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6YyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSByYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIG9jOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXpjKGEpO3ZhciBmPW51bGw7YyYmKGY9emMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQmM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLENjPXt9LERjPXt9O2Z1bmN0aW9uIEVjKGEpe2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKENjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEJjLnRlc3QoYSkpcmV0dXJuIERjW2FdPSEwO0NjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gRmMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8RmMoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIEhjPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBTYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxcblNjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVGMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoR2MoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0VjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9V2MobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBYYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBZYyhhLGIpe1hjKGEsYik7dmFyIGM9V2MoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9aYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZaYyhhLGIudHlwZSxXYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uICRjKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gWmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gV2MoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBhZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBiZChhLGIsYyl7YT1OLmdldFBvb2xlZChhZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1diKGMpO2hiKGEpO3JldHVybiBhfXZhciBjZD1udWxsLGRkPW51bGw7ZnVuY3Rpb24gZWQoYSl7T2EoYSwhMSl9XG5mdW5jdGlvbiBmZChhKXt2YXIgYj1VYShhKTtpZihsYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBnZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBoZD0hMTttLmNhblVzZURPTSYmKGhkPWhjKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGlkKCl7Y2QmJihjZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCksZGQ9Y2Q9bnVsbCl9ZnVuY3Rpb24gamQoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmZkKGRkKSYmKGE9YmQoZGQsYSxnYyhhKSksZGMoZWQsYSkpfWZ1bmN0aW9uIGtkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhpZCgpLGNkPWIsZGQ9YyxjZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCkpOlwidG9wQmx1clwiPT09YSYmaWQoKX1cbmZ1bmN0aW9uIGxkKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGZkKGRkKX1mdW5jdGlvbiBtZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGZkKGIpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGZkKGIpfVxudmFyIG9kPXtldmVudFR5cGVzOmFkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1VhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1nZDpmYyhlKT9oZD9mPW5kOihmPWxkLGg9a2QpOihnPWUubm9kZU5hbWUsIWd8fFwiaW5wdXRcIiE9PWcudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChmPW1kKSk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gYmQoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJlpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHBkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHFkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiByZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXFkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gc2QoKXtyZXR1cm4gcmR9XG52YXIgdGQ9cGQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnNkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHZkPXtldmVudFR5cGVzOnVkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1RhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VWEoYSk7ZT1udWxsPT1iP2U6VWEoYik7dmFyIGg9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7aWIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB3ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXdkKGEpOiExfWZ1bmN0aW9uIHlkKGEpezIhPT13ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIHpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4geWQoZSksYTtpZihoPT09ZClyZXR1cm4geWQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBBZChhKXthPXpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmQoYSl7YT16ZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBDZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRGQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxFZD1wZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgR2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LEhkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxJZD1wZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9R2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9RmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0hkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9GZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9GZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEpkPXRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxLZD1wZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZH0pLExkPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE1kPXRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksTmQ9e30sT2Q9e307ZnVuY3Rpb24gUGQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O05kW2FdPWI7T2RbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtQZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UGQoYSwhMSl9KTtcbnZhciBRZD17ZXZlbnRUeXBlczpOZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1PZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9T2RbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1GZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SWQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUVkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG50ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPUNkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1MZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1wZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RGQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2hiKGIpO3JldHVybiBifX0sUmQ9UWQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFNkPVtdO2Z1bmN0aW9uIFRkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVRhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUGEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGdjKGEubmF0aXZlRXZlbnQpKX12YXIgVWQ9ITA7ZnVuY3Rpb24gVmQoYSl7VWQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBZZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBXZChhLGIpe2FjKFhkLGEsYil9XG5mdW5jdGlvbiBYZChhLGIpe2lmKFVkKXt2YXIgYz1nYyhiKTtjPVRhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09d2QoYykmJihjPW51bGwpO2lmKFNkLmxlbmd0aCl7dmFyIGQ9U2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZGMoVGQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5TZC5sZW5ndGgmJlNkLnB1c2goYSl9fX1cbnZhciBaZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVWR9LHNldEVuYWJsZWQ6VmQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFVkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WWQsZGlzcGF0Y2hFdmVudDpYZH0pO2Z1bmN0aW9uICRkKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYWU9e2FuaW1hdGlvbmVuZDokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OiRkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOiRkKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sYmU9e30sY2U9e307bS5jYW5Vc2VET00mJihjZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBhZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBhZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZGUoYSl7aWYoYmVbYV0pcmV0dXJuIGJlW2FdO2lmKCFhZVthXSlyZXR1cm4gYTt2YXIgYj1hZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBjZSlyZXR1cm4gYmVbYV09YltjXTtyZXR1cm4gYX1cbnZhciBlZT17dG9wQW5pbWF0aW9uRW5kOmRlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpkZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDpkZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmRlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGZlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxnZT17fSxoZT0wLGllPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBqZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxpZSl8fChhW2llXT1oZSsrLGdlW2FbaWVdXT17fSk7cmV0dXJuIGdlW2FbaWVdXX1mdW5jdGlvbiBrZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBsZShhLGIpe3ZhciBjPWtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWtlKGMpfX1mdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgbmU9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxvZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHBlPW51bGwscWU9bnVsbCxyZT1udWxsLHNlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZihzZXx8bnVsbD09cGV8fHBlIT09ZWEoKSlyZXR1cm4gbnVsbDt2YXIgYz1wZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZtZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHJlJiZmYShyZSxjKT9udWxsOihyZT1jLGE9Ti5nZXRQb29sZWQob2Uuc2VsZWN0LHFlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cGUsaGIoYSksYSl9XG52YXIgd2U9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9amUoZSk7Zj11YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1VhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZmMoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcGU9ZSxxZT1iLHJlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpyZT1xZT1wZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjpzZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiBzZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihuZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtNYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0NhPWFiLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RGE9YWIuZ2V0SW5zdGFuY2VGcm9tTm9kZTtFYT1hYi5nZXROb2RlRnJvbUluc3RhbmNlO01hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOnZkLENoYW5nZUV2ZW50UGx1Z2luOm9kLFNlbGVjdEV2ZW50UGx1Z2luOndlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UWJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24geWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSByYzpyZXR1cm4gQWUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB2YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBzYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBvYzpmPTc7YnJlYWs7Y2FzZSBwYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRjOmY9MTM7YnJlYWs7Y2FzZSB1YzpmPTEyO2JyZWFrO2Nhc2Ugd2M6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEFlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQmUoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIERlPW51bGwsRWU9bnVsbDtcbmZ1bmN0aW9uIEZlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gR2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RGU9RmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0VlPUZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSGUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIERlJiZEZShhKX1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBKZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIEtlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTGU9dm9pZCAwLE1lPXZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe0xlPU1lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUplKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUplKG51bGwpKSk6YT1udWxsO0xlPWM7TWU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIE9lKGEsYil7TmUoYSk7YT1MZTt2YXIgYz1NZTtudWxsPT09Yz9LZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KEtlKGEsYiksS2UoYyxiKSk6KEtlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFBlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUWUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UGUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UGUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBSZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFmYShiLGMpfHwhZmEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQseT1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7T2UoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT15KGEpLGY9ZT9sKGEsZCk6amE7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWphO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UWUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMseT1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx5IT09cSkmJmcoYSxuLHIscSk7eT1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9RZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6eTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYSxuLHIsYikpO251bGwhPT10JiZ2b2lkIDAhPT10JiYoYj1udWxsPT09Ynx8dm9pZCAwPT09Yj90OkEoe30sYix0KSk7aWYoIShoIT09cnx8eSE9PWJ8fFxuQigpfHxudWxsIT09YS51cGRhdGVRdWV1ZSYmYS51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksITE7KGg9ZihhLGgscix5LGIscSkpPyhjfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsTW91bnQmJm4uY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksXG5kKGEsciksZShhLGIpKTtuLnByb3BzPXI7bi5zdGF0ZT1iO24uY29udGV4dD1xO3JldHVybiBofSx1cGRhdGVDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgbj1iLnR5cGUseD1iLnN0YXRlTm9kZTt4LnByb3BzPWIubWVtb2l6ZWRQcm9wczt4LnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTt2YXIgaD1iLm1lbW9pemVkUHJvcHMscj1iLnBlbmRpbmdQcm9wcyxxPXguY29udGV4dCx0PXAoYik7dD1sKGIsdCk7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHEhPT10KSYmZyhiLHgscix0KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1xuUWUoYSxiLGIudXBkYXRlUXVldWUseCxyLGMpOnE7dmFyIHU9dm9pZCAwO2ghPT1yJiYodT1rKGIseCxyLGMpKTtudWxsIT09dSYmdm9pZCAwIT09dSYmKGM9bnVsbD09PWN8fHZvaWQgMD09PWM/dTpBKHt9LGMsdSkpO2lmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHU9ZihiLGgscixxLGMsdCkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx0KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8XG4oYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXQ7cmV0dXJuIHV9fX12YXIgVGU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFVlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWphP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFZlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBXZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXllKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9QmUoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVVlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPXplKGMsYS5tb2RlLGQpO2QucmVmPVVlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5DZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUFlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9QmUoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYz16ZShiLGEubW9kZSxjKSxjLnJlZj1VZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSBxYzpyZXR1cm4gYj1DZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihUZShiKXx8eWMoYikpcmV0dXJuIGI9QWUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1ZlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXJjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBxYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihUZShjKXx8eWMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1ZlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG5jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1yYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBxYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihUZShkKXx8eWMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1ZlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGcsbCxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1nLHQ9Zz0wLHU9bnVsbDtudWxsIT09cSYmdDxsLmxlbmd0aDt0Kyspe3EuaW5kZXg+dD8odT1xLHE9bnVsbCk6dT1xLnNpYmxpbmc7dmFyIG49eShlLHEsbFt0XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXUpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7Zz1mKG4sZyx0KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dX1pZih0PT09bC5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3Q8bC5sZW5ndGg7dCsrKWlmKHE9cChlLGxbdF0saCkpZz1mKHEsZyx0KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt0PGwubGVuZ3RoO3QrKylpZih1PUIocSxlLHQsbFt0XSxoKSl7aWYoYSYmbnVsbCE9PXUuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXUua2V5P3Q6dS5rZXkpO2c9Zih1LGcsdCk7bnVsbD09PWs/cj11Omsuc2libGluZz11O2s9dX1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxnLGwsaCl7dmFyIHI9eWMobCk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7bD1yLmNhbGwobCk7bnVsbD09bD9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1nLHQ9Zz0wLHU9bnVsbCxuPWwubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3QrKyxuPWwubmV4dCgpKXtxLmluZGV4PnQ/KHU9cSxxPW51bGwpOnU9cS5zaWJsaW5nO3ZhciBIPXkoZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXUpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2c9ZihILGcsdCk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXV9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3QrKyxuPWwubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihnPWYobixnLHQpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3QrKyxuPWwubmV4dCgpKWlmKG49QihxLGUsdCxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dDpuLmtleSk7XG5nPWYobixnLHQpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsZyl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09cmMmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG5jOmE6e3ZhciBrPWYua2V5O2ZvcihsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspaWYoMTA9PT1sLnRhZz9mLnR5cGU9PT1yYzpsLnR5cGU9PT1mLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYudHlwZT09PXJjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxnKTtkLnJlZj1VZShhLGwsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PVxucmM/KGQ9QWUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsZyxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGc9emUoZixhLm1vZGUsZyksZy5yZWY9VWUoYSxkLGYpLGdbXCJyZXR1cm5cIl09YSxhPWcpfXJldHVybiBoKGEpO2Nhc2UgcWM6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGcpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPUNlKGYsYS5tb2RlLGcpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixnKSk6KGMoYSxkKSxkPUJlKGYsYS5tb2RlLGcpKSxkW1wicmV0dXJuXCJdPWEsYT1kLGgoYSk7aWYoVGUoZikpcmV0dXJuIHIoYSxkLGYsZyk7aWYoeWMoZikpcmV0dXJuIFEoYSxkLGYsZyk7bCYmVmUoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYpc3dpdGNoKGEudGFnKXtjYXNlIDI6Y2FzZSAxOmc9YS50eXBlLEQoXCIxNTJcIixnLmRpc3BsYXlOYW1lfHxnLm5hbWV8fFwiQ29tcG9uZW50XCIpfXJldHVybiBjKGEsZCl9fXZhciBYZT1XZSghMCksWWU9V2UoITEpO1xuZnVuY3Rpb24gWmUoYSxiLGMsZCxlLGYsaCl7ZnVuY3Rpb24gZyhhLGIsYyl7ayhhLGIsYyxiLmV4cGlyYXRpb25UaW1lKX1mdW5jdGlvbiBrKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWUoYixudWxsLGMsZCk6WGUoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gdihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGwoYSxiLGMsZCxlLGYpe3YoYSxiKTtpZighYyYmIWUpcmV0dXJuIGQmJnooYiwhMSkscihhLGIpO2M9Yi5zdGF0ZU5vZGU7bWMuY3VycmVudD1iO3ZhciBnPWU/bnVsbDpjLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO2UmJihrKGEsYixudWxsLGYpLGIuY2hpbGQ9bnVsbCk7ayhhLGIsZyxmKTtiLm1lbW9pemVkU3RhdGU9Yy5zdGF0ZTtiLm1lbW9pemVkUHJvcHM9Yy5wcm9wcztkJiZ6KGIsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHAoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7XG5iLnBlbmRpbmdDb250ZXh0P3UoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmdShhLGIuY29udGV4dCwhMSk7WShhLGIuY29udGFpbmVySW5mbyl9ZnVuY3Rpb24geShhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2ZvcihudWxsIT09ZSYmKGVbXCJyZXR1cm5cIl09YSk7bnVsbCE9PWU7KXtzd2l0Y2goZS50YWcpe2Nhc2UgMTI6dmFyIGY9ZS5zdGF0ZU5vZGV8MDtpZihlLnR5cGU9PT1iJiYwIT09KGYmYykpe2ZvcihmPWU7bnVsbCE9PWY7KXt2YXIgZz1mLmFsdGVybmF0ZTtpZigwPT09Zi5leHBpcmF0aW9uVGltZXx8Zi5leHBpcmF0aW9uVGltZT5kKWYuZXhwaXJhdGlvblRpbWU9ZCxudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpJiYoZy5leHBpcmF0aW9uVGltZT1kKTtlbHNlIGlmKG51bGwhPT1nJiYoMD09PWcuZXhwaXJhdGlvblRpbWV8fGcuZXhwaXJhdGlvblRpbWU+ZCkpZy5leHBpcmF0aW9uVGltZT1cbmQ7ZWxzZSBicmVhaztmPWZbXCJyZXR1cm5cIl19Zj1udWxsfWVsc2UgZj1lLmNoaWxkO2JyZWFrO2Nhc2UgMTM6Zj1lLnR5cGU9PT1hLnR5cGU/bnVsbDplLmNoaWxkO2JyZWFrO2RlZmF1bHQ6Zj1lLmNoaWxkfWlmKG51bGwhPT1mKWZbXCJyZXR1cm5cIl09ZTtlbHNlIGZvcihmPWU7bnVsbCE9PWY7KXtpZihmPT09YSl7Zj1udWxsO2JyZWFrfWU9Zi5zaWJsaW5nO2lmKG51bGwhPT1lKXtmPWU7YnJlYWt9Zj1mW1wicmV0dXJuXCJdfWU9Zn19ZnVuY3Rpb24gQihhLGIsYyl7dmFyIGQ9Yi50eXBlLmNvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciB0PWYudmFsdWU7aWYodD09PWwmJigwIT09dHx8MS90PT09MS9sKXx8dCE9PXQmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyh0LGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB5KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9eWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXllKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx0PWMucHVzaENvbnRleHRQcm92aWRlcix1PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx6PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQmI9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9U2UoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLENiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLERiPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp0KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dChiKSxKYyhiLGQpLENiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT10KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksQ2IoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1EYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVFlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1ZZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkJiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkJiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1llKGIsYi5zdGF0ZU5vZGUsZCxjKTpYZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVhlKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmQ9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7dmFyIHU9Yi5tZW1vaXplZFByb3BzO2U9ZC5fY3VycmVudFZhbHVlO2g9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09aHx8dSE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dT1mLnVuc3RhYmxlX29ic2VydmVkQml0cztpZih2b2lkIDA9PT11fHxudWxsPT09dSl1PTEwNzM3NDE4MjM7Yi5zdGF0ZU5vZGU9dTswIT09KGgmdSkmJnkoYixkLGgsYyk7Yz1mLmNoaWxkcmVuO2M9YyhlKTtnKGEsYixjKTthPWIuY2hpbGR9ZWxzZSBhPXIoYSxiKTtyZXR1cm4gYTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUpe2Z1bmN0aW9uIGYoYSl7YS5lZmZlY3RUYWd8PTR9dmFyIGg9YS5jcmVhdGVJbnN0YW5jZSxnPWEuY3JlYXRlVGV4dEluc3RhbmNlLGs9YS5hcHBlbmRJbml0aWFsQ2hpbGQsdj1hLmZpbmFsaXplSW5pdGlhbENoaWxkcmVuLGw9YS5wcmVwYXJlVXBkYXRlLHA9YS5wZXJzaXN0ZW5jZSx5PWIuZ2V0Um9vdEhvc3RDb250YWluZXIsQj1iLnBvcEhvc3RDb250ZXh0LHI9Yi5nZXRIb3N0Q29udGV4dCxRPWIucG9wSG9zdENvbnRhaW5lcixuPWMucG9wQ29udGV4dFByb3ZpZGVyLHg9Yy5wb3BUb3BMZXZlbENvbnRleHRPYmplY3QsWT1kLnBvcFByb3ZpZGVyLEc9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlLFI9ZS5wcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZSxTPWUucG9wSHlkcmF0aW9uU3RhdGUscT12b2lkIDAsdD12b2lkIDAsdT12b2lkIDA7YS5tdXRhdGlvbj8ocT1mdW5jdGlvbigpe30sdD1mdW5jdGlvbihhLGIsYyl7KGIudXBkYXRlUXVldWU9XG5jKSYmZihiKX0sdT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmZihiKX0pOnA/RChcIjIzNVwiKTpEKFwiMjM2XCIpO3JldHVybntjb21wbGV0ZVdvcms6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBudWxsO2Nhc2UgMjpyZXR1cm4gbihiKSxhPWIuc3RhdGVOb2RlLGQ9Yi51cGRhdGVRdWV1ZSxudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZyY9LTY1LFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudERpZENhdGNoP2IuZWZmZWN0VGFnfD0yNTY6ZC5jYXB0dXJlZFZhbHVlcz1udWxsKSxudWxsO2Nhc2UgMzpRKGIpO3goYik7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpUyhiKSxiLmVmZmVjdFRhZyY9LTM7cShiKTthPWIudXBkYXRlUXVldWU7XG5udWxsIT09YSYmbnVsbCE9PWEuY2FwdHVyZWRWYWx1ZXMmJihiLmVmZmVjdFRhZ3w9MjU2KTtyZXR1cm4gbnVsbDtjYXNlIDU6QihiKTtjPXkoKTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXt2YXIgcD1hLm1lbW9pemVkUHJvcHMsSD1iLnN0YXRlTm9kZSx6PXIoKTtIPWwoSCxlLHAsZCxjLHopO3QoYSxiLEgsZSxwLGQsYyx6KTthLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9ZWxzZXtpZighZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT1yKCk7aWYoUyhiKSlHKGIsYyxhKSYmZihiKTtlbHNle3A9aChlLGQsYyxhLGIpO2E6Zm9yKHo9Yi5jaGlsZDtudWxsIT09ejspe2lmKDU9PT16LnRhZ3x8Nj09PXoudGFnKWsocCx6LnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ei50YWcmJm51bGwhPT16LmNoaWxkKXt6LmNoaWxkW1wicmV0dXJuXCJdPXo7ej16LmNoaWxkO2NvbnRpbnVlfWlmKHo9PT1iKWJyZWFrO1xuZm9yKDtudWxsPT09ei5zaWJsaW5nOyl7aWYobnVsbD09PXpbXCJyZXR1cm5cIl18fHpbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7ej16W1wicmV0dXJuXCJdfXouc2libGluZ1tcInJldHVyblwiXT16W1wicmV0dXJuXCJdO3o9ei5zaWJsaW5nfXYocCxlLGQsYyxhKSYmZihiKTtiLnN0YXRlTm9kZT1wfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSl1KGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQpcmV0dXJuIG51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTY2XCIpOnZvaWQgMCxudWxsO2E9eSgpO2M9cigpO1MoYik/UihiKSYmZihiKTpiLnN0YXRlTm9kZT1nKGQsYSxjLGIpfXJldHVybiBudWxsO2Nhc2UgNzooZD1iLm1lbW9pemVkUHJvcHMpP3ZvaWQgMDpEKFwiMTY1XCIpO2IudGFnPTg7ZT1bXTthOmZvcigocD1iLnN0YXRlTm9kZSkmJihwW1wicmV0dXJuXCJdPWIpO251bGwhPT1cbnA7KXtpZig1PT09cC50YWd8fDY9PT1wLnRhZ3x8ND09PXAudGFnKUQoXCIyNDdcIik7ZWxzZSBpZig5PT09cC50YWcpZS5wdXNoKHAucGVuZGluZ1Byb3BzLnZhbHVlKTtlbHNlIGlmKG51bGwhPT1wLmNoaWxkKXtwLmNoaWxkW1wicmV0dXJuXCJdPXA7cD1wLmNoaWxkO2NvbnRpbnVlfWZvcig7bnVsbD09PXAuc2libGluZzspe2lmKG51bGw9PT1wW1wicmV0dXJuXCJdfHxwW1wicmV0dXJuXCJdPT09YilicmVhayBhO3A9cFtcInJldHVyblwiXX1wLnNpYmxpbmdbXCJyZXR1cm5cIl09cFtcInJldHVyblwiXTtwPXAuc2libGluZ31wPWQuaGFuZGxlcjtkPXAoZC5wcm9wcyxlKTtiLmNoaWxkPVhlKGIsbnVsbCE9PWE/YS5jaGlsZDpudWxsLGQsYyk7cmV0dXJuIGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBiLnRhZz03LG51bGw7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxMDpyZXR1cm4gbnVsbDtjYXNlIDExOnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gUShiKSxxKGIpLG51bGw7XG5jYXNlIDEzOnJldHVybiBZKGIpLG51bGw7Y2FzZSAxMjpyZXR1cm4gbnVsbDtjYXNlIDA6RChcIjE2N1wiKTtkZWZhdWx0OkQoXCIxNTZcIil9fX19XG5mdW5jdGlvbiBhZihhLGIsYyxkLGUpe3ZhciBmPWEucG9wSG9zdENvbnRhaW5lcixoPWEucG9wSG9zdENvbnRleHQsZz1iLnBvcENvbnRleHRQcm92aWRlcixrPWIucG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHY9Yy5wb3BQcm92aWRlcjtyZXR1cm57dGhyb3dFeGNlcHRpb246ZnVuY3Rpb24oYSxiLGMpe2IuZWZmZWN0VGFnfD01MTI7Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbDtiPXt2YWx1ZTpjLHNvdXJjZTpiLHN0YWNrOkFjKGIpfTtkb3tzd2l0Y2goYS50YWcpe2Nhc2UgMzpOZShhKTthLnVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzPVtiXTthLmVmZmVjdFRhZ3w9MTAyNDtyZXR1cm47Y2FzZSAyOmlmKGM9YS5zdGF0ZU5vZGUsMD09PShhLmVmZmVjdFRhZyY2NCkmJm51bGwhPT1jJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnREaWRDYXRjaCYmIWUoYykpe05lKGEpO2M9YS51cGRhdGVRdWV1ZTt2YXIgZD1jLmNhcHR1cmVkVmFsdWVzO251bGw9PT1kP1xuYy5jYXB0dXJlZFZhbHVlcz1bYl06ZC5wdXNoKGIpO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybn19YT1hW1wicmV0dXJuXCJdfXdoaWxlKG51bGwhPT1hKX0sdW53aW5kV29yazpmdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjpnKGEpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjEwMjQ/KGEuZWZmZWN0VGFnPWImLTEwMjV8NjQsYSk6bnVsbDtjYXNlIDM6cmV0dXJuIGYoYSksayhhKSxiPWEuZWZmZWN0VGFnLGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgNTpyZXR1cm4gaChhKSxudWxsO2Nhc2UgNDpyZXR1cm4gZihhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHYoYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX0sdW53aW5kSW50ZXJydXB0ZWRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7YnJlYWs7Y2FzZSAzOmYoYSk7ayhhKTticmVhaztjYXNlIDU6aChhKTticmVhaztjYXNlIDQ6ZihhKTticmVhaztjYXNlIDEzOnYoYSl9fX19XG5mdW5jdGlvbiBiZihhLGIpe3ZhciBjPWIuc291cmNlO251bGw9PT1iLnN0YWNrJiZBYyhjKTtudWxsIT09YyYmemMoYyk7Yj1iLnZhbHVlO251bGwhPT1hJiYyPT09YS50YWcmJnpjKGEpO3RyeXtiJiZiLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZCl7ZCYmZC5zdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nfHxjb25zb2xlLmVycm9yKGQpfX1cbmZ1bmN0aW9uIGNmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaCh1KXtiKGEsdSl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBoKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYSk7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZihhKTt2YXIgYz1hLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCl0cnl7Yy5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYy5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYy5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHUpe2IoYSx1KX1icmVhaztjYXNlIDU6ZihhKTticmVhaztjYXNlIDc6ZyhhLnN0YXRlTm9kZSk7YnJlYWs7Y2FzZSA0OnAmJnYoYSl9fWZ1bmN0aW9uIGcoYSl7Zm9yKHZhciBiPWE7OylpZihoKGIpLG51bGw9PT1iLmNoaWxkfHxwJiY0PT09Yi50YWcpe2lmKGI9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybjtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9ZWxzZSBiLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkfWZ1bmN0aW9uIGsoYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9ZnVuY3Rpb24gdihhKXtmb3IodmFyIGI9YSxjPSExLGQ9dm9pZCAwLGU9dm9pZCAwOzspe2lmKCFjKXtjPWJbXCJyZXR1cm5cIl07YTpmb3IoOzspe251bGw9PT1jP0QoXCIxNjBcIik6dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmQ9Yy5zdGF0ZU5vZGU7ZT0hMTticmVhayBhO2Nhc2UgMzpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhO2Nhc2UgNDpkPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZT0hMDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jPSEwfWlmKDU9PT1cbmIudGFnfHw2PT09Yi50YWcpZyhiKSxlP1MoZCxiLnN0YXRlTm9kZSk6UihkLGIuc3RhdGVOb2RlKTtlbHNlIGlmKDQ9PT1iLnRhZz9kPWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86aChiKSxudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZFtcInJldHVyblwiXT1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXTs0PT09Yi50YWcmJihjPSExKX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319dmFyIGw9YS5nZXRQdWJsaWNJbnN0YW5jZSxwPWEubXV0YXRpb247YT1hLnBlcnNpc3RlbmNlO3B8fChhP0QoXCIyMzVcIik6RChcIjIzNlwiKSk7dmFyIHk9cC5jb21taXRNb3VudCxCPXAuY29tbWl0VXBkYXRlLHI9cC5yZXNldFRleHRDb250ZW50LFE9cC5jb21taXRUZXh0VXBkYXRlLG49cC5hcHBlbmRDaGlsZCxcbng9cC5hcHBlbmRDaGlsZFRvQ29udGFpbmVyLFk9cC5pbnNlcnRCZWZvcmUsRz1wLmluc2VydEluQ29udGFpbmVyQmVmb3JlLFI9cC5yZW1vdmVDaGlsZCxTPXAucmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyO3JldHVybntjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMjppZihiLmVmZmVjdFRhZyYyMDQ4JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7YS5wcm9wcz1iLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGMsZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifWJyZWFrO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRSZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe3IoYS5zdGF0ZU5vZGUpfSxcbmNvbW1pdFBsYWNlbWVudDpmdW5jdGlvbihhKXthOntmb3IodmFyIGI9YVtcInJldHVyblwiXTtudWxsIT09Yjspe2lmKGsoYikpe3ZhciBjPWI7YnJlYWsgYX1iPWJbXCJyZXR1cm5cIl19RChcIjE2MFwiKTtjPXZvaWQgMH12YXIgZD1iPXZvaWQgMDtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2Q9ITE7YnJlYWs7Y2FzZSAzOmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OkQoXCIxNjFcIil9Yy5lZmZlY3RUYWcmMTYmJihyKGIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jW1wicmV0dXJuXCJdfHxrKGNbXCJyZXR1cm5cIl0pKXtjPW51bGw7YnJlYWsgYX1jPWNbXCJyZXR1cm5cIl19Yy5zaWJsaW5nW1wicmV0dXJuXCJdPWNbXCJyZXR1cm5cIl07Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PVxuYy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZFtcInJldHVyblwiXT1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWZvcih2YXIgZT1hOzspe2lmKDU9PT1lLnRhZ3x8Nj09PWUudGFnKWM/ZD9HKGIsZS5zdGF0ZU5vZGUsYyk6WShiLGUuc3RhdGVOb2RlLGMpOmQ/eChiLGUuc3RhdGVOb2RlKTpuKGIsZS5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWUudGFnJiZudWxsIT09ZS5jaGlsZCl7ZS5jaGlsZFtcInJldHVyblwiXT1lO2U9ZS5jaGlsZDtjb250aW51ZX1pZihlPT09YSlicmVhaztmb3IoO251bGw9PT1lLnNpYmxpbmc7KXtpZihudWxsPT09ZVtcInJldHVyblwiXXx8ZVtcInJldHVyblwiXT09PWEpcmV0dXJuO2U9ZVtcInJldHVyblwiXX1lLnNpYmxpbmdbXCJyZXR1cm5cIl09ZVtcInJldHVyblwiXTtlPWUuc2libGluZ319LGNvbW1pdERlbGV0aW9uOmZ1bmN0aW9uKGEpe3YoYSk7XG5hW1wicmV0dXJuXCJdPW51bGw7YS5jaGlsZD1udWxsO2EuYWx0ZXJuYXRlJiYoYS5hbHRlcm5hdGUuY2hpbGQ9bnVsbCxhLmFsdGVybmF0ZVtcInJldHVyblwiXT1udWxsKX0sY29tbWl0V29yazpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmJyZWFrO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7YT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDt2YXIgZT1iLnR5cGUsZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtudWxsIT09ZiYmQihjLGYsZSxhLGQsYil9YnJlYWs7Y2FzZSA2Om51bGw9PT1iLnN0YXRlTm9kZT9EKFwiMTYyXCIpOnZvaWQgMDtjPWIubWVtb2l6ZWRQcm9wcztRKGIuc3RhdGVOb2RlLG51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpjLGMpO2JyZWFrO2Nhc2UgMzpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRMaWZlQ3ljbGVzOmZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMjphPVxuYy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1iLm1lbW9pemVkUHJvcHM7Yj1iLm1lbW9pemVkU3RhdGU7YS5wcm9wcz1jLm1lbW9pemVkUHJvcHM7YS5zdGF0ZT1jLm1lbW9pemVkU3RhdGU7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWM9Yy51cGRhdGVRdWV1ZTtudWxsIT09YyYmUmUoYyxhKTticmVhaztjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1sKGMuY2hpbGQuc3RhdGVOb2RlKTticmVhaztjYXNlIDI6YT1jLmNoaWxkLnN0YXRlTm9kZX1SZShiLGEpfWJyZWFrO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyZcbjQmJnkoYSxjLnR5cGUsYy5tZW1vaXplZFByb3BzLGMpO2JyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7ZGVmYXVsdDpEKFwiMTYzXCIpfX0sY29tbWl0RXJyb3JMb2dnaW5nOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDI6dmFyIGM9YS50eXBlO2I9YS5zdGF0ZU5vZGU7dmFyIGQ9YS51cGRhdGVRdWV1ZTtudWxsPT09ZHx8bnVsbD09PWQuY2FwdHVyZWRWYWx1ZXM/RChcIjI2NFwiKTp2b2lkIDA7dmFyIGY9ZC5jYXB0dXJlZFZhbHVlcztkLmNhcHR1cmVkVmFsdWVzPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoJiZlKGIpO2IucHJvcHM9YS5tZW1vaXplZFByb3BzO2Iuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspe2Q9ZltjXTt2YXIgZz1kLnZhbHVlLGg9ZC5zdGFjaztiZihhLGQpO2IuY29tcG9uZW50RGlkQ2F0Y2goZyx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWg/aDpcIlwifSl9YnJlYWs7XG5jYXNlIDM6Yz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jfHxudWxsPT09Yy5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDtmPWMuY2FwdHVyZWRWYWx1ZXM7Yy5jYXB0dXJlZFZhbHVlcz1udWxsO2ZvcihjPTA7YzxmLmxlbmd0aDtjKyspZD1mW2NdLGJmKGEsZCksYihkLnZhbHVlKTticmVhaztkZWZhdWx0OkQoXCIyNjVcIil9fSxjb21taXRBdHRhY2hSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9bChjKTticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX0sY29tbWl0RGV0YWNoUmVmOmZ1bmN0aW9uKGEpe2E9YS5yZWY7bnVsbCE9PWEmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hKG51bGwpOmEuY3VycmVudD1udWxsKX19fXZhciBkZj17fTtcbmZ1bmN0aW9uIGVmKGEsYil7ZnVuY3Rpb24gYyhhKXthPT09ZGY/RChcIjE3NFwiKTp2b2lkIDA7cmV0dXJuIGF9dmFyIGQ9YS5nZXRDaGlsZEhvc3RDb250ZXh0LGU9YS5nZXRSb290SG9zdENvbnRleHQ7YT1iLmNyZWF0ZUN1cnNvcjt2YXIgZj1iLnB1c2gsaD1iLnBvcCxnPWEoZGYpLGs9YShkZiksdj1hKGRmKTtyZXR1cm57Z2V0SG9zdENvbnRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYyhnLmN1cnJlbnQpfSxnZXRSb290SG9zdENvbnRhaW5lcjpmdW5jdGlvbigpe3JldHVybiBjKHYuY3VycmVudCl9LHBvcEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSl7aChnLGEpO2goayxhKTtoKHYsYSl9LHBvcEhvc3RDb250ZXh0OmZ1bmN0aW9uKGEpe2suY3VycmVudD09PWEmJihoKGcsYSksaChrLGEpKX0scHVzaEhvc3RDb250YWluZXI6ZnVuY3Rpb24oYSxiKXtmKHYsYixhKTtiPWUoYik7ZihrLGEsYSk7ZihnLGIsYSl9LHB1c2hIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1jKHYuY3VycmVudCksXG5lPWMoZy5jdXJyZW50KTtiPWQoZSxhLnR5cGUsYik7ZSE9PWImJihmKGssYSxhKSxmKGcsYixhKSl9fX1cbmZ1bmN0aW9uIGZmKGEpe2Z1bmN0aW9uIGIoYSxiKXt2YXIgYz1uZXcgeGUoNSxudWxsLG51bGwsMCk7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Y1tcInJldHVyblwiXT1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBjKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIGI9ZihiLGEudHlwZSxhLnBlbmRpbmdQcm9wcyksbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1oKGIsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBkKGEpe2ZvcihhPWFbXCJyZXR1cm5cIl07bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnOylhPWFbXCJyZXR1cm5cIl07cD1hfXZhciBlPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQ7XG5hPWEuaHlkcmF0aW9uO2lmKCFhKXJldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuITF9LHJlc2V0SHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXt9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKCl7fSxwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NVwiKX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXtEKFwiMTc2XCIpfSxwb3BIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfX07dmFyIGY9YS5jYW5IeWRyYXRlSW5zdGFuY2UsaD1hLmNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UsZz1hLmdldE5leHRIeWRyYXRhYmxlU2libGluZyxrPWEuZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQsdj1hLmh5ZHJhdGVJbnN0YW5jZSxsPWEuaHlkcmF0ZVRleHRJbnN0YW5jZSxwPW51bGwseT1udWxsLEI9ITE7cmV0dXJue2VudGVySHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7eT1cbmsoYS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7cD1hO3JldHVybiBCPSEwfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7eT1wPW51bGw7Qj0hMX0sdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oYSl7aWYoQil7dmFyIGQ9eTtpZihkKXtpZighYyhhLGQpKXtkPWcoZCk7aWYoIWR8fCFjKGEsZCkpe2EuZWZmZWN0VGFnfD0yO0I9ITE7cD1hO3JldHVybn1iKHAseSl9cD1hO3k9ayhkKX1lbHNlIGEuZWZmZWN0VGFnfD0yLEI9ITEscD1hfX0scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7Yj12KGEuc3RhdGVOb2RlLGEudHlwZSxhLm1lbW9pemVkUHJvcHMsYixjLGEpO2EudXBkYXRlUXVldWU9YjtyZXR1cm4gbnVsbCE9PWI/ITA6ITF9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBsKGEuc3RhdGVOb2RlLGEubWVtb2l6ZWRQcm9wcyxhKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oYSl7aWYoYSE9PVxucClyZXR1cm4hMTtpZighQilyZXR1cm4gZChhKSxCPSEwLCExO3ZhciBjPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YyYmXCJib2R5XCIhPT1jJiYhZShjLGEubWVtb2l6ZWRQcm9wcykpZm9yKGM9eTtjOyliKGEsYyksYz1nKGMpO2QoYSk7eT1wP2coYS5zdGF0ZU5vZGUpOm51bGw7cmV0dXJuITB9fX1cbmZ1bmN0aW9uIGdmKGEpe2Z1bmN0aW9uIGIoYSxiLGMpe2E9YS5zdGF0ZU5vZGU7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWI7YS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1jfWZ1bmN0aW9uIGMoYSl7cmV0dXJuIDI9PT1hLnRhZyYmbnVsbCE9YS50eXBlLmNoaWxkQ29udGV4dFR5cGVzfWZ1bmN0aW9uIGQoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZSxkPWEudHlwZS5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGI7Yz1jLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBjKWUgaW4gZD92b2lkIDA6RChcIjEwOFwiLHpjKGEpfHxcIlVua25vd25cIixlKTtyZXR1cm4gQSh7fSxiLGMpfXZhciBlPWEuY3JlYXRlQ3Vyc29yLGY9YS5wdXNoLGg9YS5wb3AsZz1lKGphKSxrPWUoITEpLHY9amE7cmV0dXJue2dldFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtyZXR1cm4gYyhhKT9cbnY6Zy5jdXJyZW50fSxjYWNoZUNvbnRleHQ6YixnZXRNYXNrZWRDb250ZXh0OmZ1bmN0aW9uKGEsYyl7dmFyIGQ9YS50eXBlLmNvbnRleHRUeXBlcztpZighZClyZXR1cm4gamE7dmFyIGU9YS5zdGF0ZU5vZGU7aWYoZSYmZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YylyZXR1cm4gZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZj17fSxnO2ZvcihnIGluIGQpZltnXT1jW2ddO2UmJmIoYSxjLGYpO3JldHVybiBmfSxoYXNDb250ZXh0Q2hhbmdlZDpmdW5jdGlvbigpe3JldHVybiBrLmN1cnJlbnR9LGlzQ29udGV4dENvbnN1bWVyOmZ1bmN0aW9uKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jb250ZXh0VHlwZXN9LGlzQ29udGV4dFByb3ZpZGVyOmMscG9wQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2MoYSkmJihoKGssYSksaChnLGEpKX0scG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0OmZ1bmN0aW9uKGEpe2goayxcbmEpO2goZyxhKX0scHVzaFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhLGIsYyl7bnVsbCE9Zy5jdXJzb3I/RChcIjE2OFwiKTp2b2lkIDA7ZihnLGIsYSk7ZihrLGMsYSl9LHByb2Nlc3NDaGlsZENvbnRleHQ6ZCxwdXNoQ29udGV4dFByb3ZpZGVyOmZ1bmN0aW9uKGEpe2lmKCFjKGEpKXJldHVybiExO3ZhciBiPWEuc3RhdGVOb2RlO2I9YiYmYi5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8amE7dj1nLmN1cnJlbnQ7ZihnLGIsYSk7ZihrLGsuY3VycmVudCxhKTtyZXR1cm4hMH0saW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2M/dm9pZCAwOkQoXCIxNjlcIik7aWYoYil7dmFyIGU9ZChhLHYpO2MuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9ZTtoKGssYSk7aChnLGEpO2YoZyxlLGEpfWVsc2UgaChrLGEpO2YoayxiLGEpfSxmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dDpmdW5jdGlvbihhKXtmb3IoMiE9PVxud2QoYSl8fDIhPT1hLnRhZz9EKFwiMTcwXCIpOnZvaWQgMDszIT09YS50YWc7KXtpZihjKGEpKXJldHVybiBhLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDsoYT1hW1wicmV0dXJuXCJdKT92b2lkIDA6RChcIjE3MVwiKX1yZXR1cm4gYS5zdGF0ZU5vZGUuY29udGV4dH19fVxuZnVuY3Rpb24gaGYoYSl7dmFyIGI9YS5jcmVhdGVDdXJzb3IsYz1hLnB1c2gsZD1hLnBvcCxlPWIobnVsbCksZj1iKG51bGwpLGg9YigwKTtyZXR1cm57cHVzaFByb3ZpZGVyOmZ1bmN0aW9uKGEpe3ZhciBiPWEudHlwZS5jb250ZXh0O2MoaCxiLl9jaGFuZ2VkQml0cyxhKTtjKGYsYi5fY3VycmVudFZhbHVlLGEpO2MoZSxhLGEpO2IuX2N1cnJlbnRWYWx1ZT1hLnBlbmRpbmdQcm9wcy52YWx1ZTtiLl9jaGFuZ2VkQml0cz1hLnN0YXRlTm9kZX0scG9wUHJvdmlkZXI6ZnVuY3Rpb24oYSl7dmFyIGI9aC5jdXJyZW50LGM9Zi5jdXJyZW50O2QoZSxhKTtkKGYsYSk7ZChoLGEpO2E9YS50eXBlLmNvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24gamYoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGtmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1hhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1CYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTttYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1YYXx8bnVsbD09PUkpYigpLFhhPWEsWj1jLEk9eWUoWGEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QWMoYSl9O09lKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFZYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1lhPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrNTApLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWWEmJlhhPT09ZHx8QihkLGMpO0ZiPndnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3ZlPUljKCktUGM7cmV0dXJuIHhnPSh2ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHkoYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjt5ZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnkoYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXtaYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09WmEmJihHYj0wLFFjPS0xKTswIT09UCYmeShQKTtaYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHZnKXtCYXx8KEJhPSEwLEpiPXZnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WWE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZDYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaCgkYSl7aD0hMCxrPSRhfWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RGIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpEYih3KTt3LmVmZmVjdFRhZyY9LTM7dGUody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OnRlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goJGEpe2g9ITAsaz0kYX1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaCgkYSl7cD0hMCxuPSRhfXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVlhPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBIZSYmSGUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PVphfHxaYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB0PWpmKCksdT1lZihhLHQpLHo9Z2YodCk7dD1oZih0KTt2YXIgSD1mZihhKSxcbldhPVplKGEsdSx6LHQsSCx2LGspLmJlZ2luV29yayxCYj0kZShhLHUseix0LEgpLmNvbXBsZXRlV29yazt1PWFmKHUseix0LHYsYyk7dmFyIEpjPXUudGhyb3dFeGNlcHRpb24sS2M9dS51bndpbmRXb3JrLExjPXUudW53aW5kSW50ZXJydXB0ZWRXb3JrO3U9Y2YoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIENiPXUuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXUuY29tbWl0UmVzZXRUZXh0Q29udGVudCxEYj11LmNvbW1pdFBsYWNlbWVudCxnZz11LmNvbW1pdERlbGV0aW9uLHRlPXUuY29tbWl0V29yayxoZz11LmNvbW1pdExpZmVDeWNsZXMsaWc9dS5jb21taXRFcnJvckxvZ2dpbmcsamc9dS5jb21taXRBdHRhY2hSZWYsa2c9dS5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2sseWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHhnPTIsdmU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxYYT1udWxsLFo9MCx3PW51bGwsWWE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLFphPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHdnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp6fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnPWsoYyk7Yz12KGMpP2woYyxnKTpnfWVsc2UgYz1qYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWY7T2UoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtoKGQsZSk7cmV0dXJuIGV9ZnVuY3Rpb24gYyhhKXthPUFkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBkPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZT1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZj1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsaD1hLnNjaGVkdWxlV29yayxnPWEubGVnYWN5Q29udGV4dCxcbms9Zy5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCx2PWcuaXNDb250ZXh0UHJvdmlkZXIsbD1nLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGQsZyl7dmFyIGg9Yy5jdXJyZW50LGs9ZSgpO2g9ZihoKTtyZXR1cm4gYihhLGMsZCxrLGgsZyl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxcbmMsZCxmLGcpe3ZhciBoPWUoKTtyZXR1cm4gYihhLGMsZCxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxyZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGQoYS5jaGlsZC5zdGF0ZU5vZGUpO1xuZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmMsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEdlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtcbmZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHFmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscmY9dm9pZCAwO3JmPXFmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmPXZvaWQgMDtCZj1xZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBDZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PUNmKXt2Zj0hMTthPXJmKCk7aWYoMD49eWYtYSlpZigtMSE9PVxud2YmJndmPD1hKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRWYoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEZmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEhmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBJZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBMZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTWY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmYoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmYoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGY9dm9pZCAwLFFmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BmPVBmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1QZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFNmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFRmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhTZikuZm9yRWFjaChmdW5jdGlvbihhKXtUZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1NmW2JdPVNmW2FdfSl9KTtcbmZ1bmN0aW9uIFVmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFNmLmhhc093blByb3BlcnR5KGUpJiZTZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBWZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gV2YoYSxiLGMpe2ImJihWZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWGYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBZZj1NZi5odG1sLFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1qZShhKTtiPXVhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9ZZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhZZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFlkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaGMoXCJjYW5jZWxcIiwhMCkmJllkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaGMoXCJjbG9zZVwiLCEwKSYmWWQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTplZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGVlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PVlmJiYoZD1OZihhKSk7ZD09PVlmP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WGYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZmUpZmUuaGFzT3duUHJvcGVydHkoZikmJlcoZixmZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO2Y9VWMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUZmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkhmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpmKGEsYyk7Zj1JZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVdmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1VmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZRZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZSZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5SZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHRhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVGMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/R2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkdmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVVjKGEsYyk7ZD1VYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9RmYoYSxjKTtkPUZmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SWYoYSxjKTtkPUlmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9V2YoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih0YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodGEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWGMoYSxlKTtYZihjLGQpO2Q9WGYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9VZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UWYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1JmKGEsZyk6VGMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9HZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5HZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6R2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBmZSlmZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGZlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpIZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmYoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1XZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dGEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBtZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgbmc9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDptZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpZYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVZhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTtsYyhkKTtZYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkdmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtWYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG5nKTt2YXIgb2c9bnVsbCxwZz1udWxsO1xuZnVuY3Rpb24gcWcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1xZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgcmc7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnFnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cWcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHJnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9cmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHNnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXNnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgcmc7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5zZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgcmc7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307c2cucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHJnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuc2cucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHFnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdGcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdWcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpPZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9T2YoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBPZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe29nPVVkO3ZhciBhPWVhKCk7aWYobWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD15fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oeT1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD15fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtwZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtWZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1wZyxiPWVhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmaGEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihtZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbGIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPWxlKGMsYSk7dmFyIGY9bGUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXBnPW51bGw7VmQob2cpO29nPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtTYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHVnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpyZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3VnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtTYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1JmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbU2FdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbWcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGZ9KSxDZz1YOyRiPUNnLmJhdGNoZWRVcGRhdGVzO2FjPUNnLmludGVyYWN0aXZlVXBkYXRlcztiYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgc2coYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dGcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3RnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBwZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFguZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dGcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpRYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnhhLEV2ZW50UHJvcGFnYXRvcnM6amIsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlpiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTphYixcblJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpaZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgc2coYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtYLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiBfZXh0ZW5kcyh7fSwgdGhpcy5jb250ZXh0LnJvdXRlciwge1xuICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wdXRlTWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlTWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogJy8nLFxuICAgICAgdXJsOiAnLycsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09ICcvJ1xuICAgIH07XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIGhpc3RvcnkgPSBfcHJvcHMuaGlzdG9yeTtcblxuXG4gICAgaW52YXJpYW50KGNoaWxkcmVuID09IG51bGwgfHwgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAxLCAnQSA8Um91dGVyPiBtYXkgaGF2ZSBvbmx5IG9uZSBjaGlsZCBlbGVtZW50Jyk7XG5cbiAgICAvLyBEbyB0aGlzIGhlcmUgc28gd2UgY2FuIHNldFN0YXRlIHdoZW4gYSA8UmVkaXJlY3Q+IGNoYW5nZXMgdGhlXG4gICAgLy8gbG9jYXRpb24gaW4gY29tcG9uZW50V2lsbE1vdW50LiBUaGlzIGhhcHBlbnMgZS5nLiB3aGVuIGRvaW5nXG4gICAgLy8gc2VydmVyIHJlbmRlcmluZyB1c2luZyBhIDxTdGF0aWNSb3V0ZXI+LlxuICAgIHRoaXMudW5saXN0ZW4gPSBoaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICBtYXRjaDogX3RoaXMyLmNvbXB1dGVNYXRjaChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKHRoaXMucHJvcHMuaGlzdG9yeSA9PT0gbmV4dFByb3BzLmhpc3RvcnksICdZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+Jyk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuXG4gICAgcmV0dXJuIGNoaWxkcmVuID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuUm91dGVyLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCcm93c2VyUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxCcm93c2VyUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuQnJvd3NlclJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAga2V5TGVuZ3RoOiBQcm9wVHlwZXMubnVtYmVyLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlSGlzdG9yeSBmcm9tICdoaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuXG52YXIgSGFzaFJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhIYXNoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBIYXNoUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSGFzaFJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7IGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSwgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkhhc2hSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoWydoYXNoYmFuZycsICdub3NsYXNoJywgJ3NsYXNoJ10pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbnZhciBpc01vZGlmaWVkRXZlbnQgPSBmdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxudmFyIExpbmsgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTGluaywgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGluaygpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpbmspO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25DbGljaykgX3RoaXMucHJvcHMub25DbGljayhldmVudCk7XG5cbiAgICAgIGlmICghZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIHJpZ2h0IGNsaWNrc1xuICAgICAgIV90aGlzLnByb3BzLnRhcmdldCAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICB2YXIgaGlzdG9yeSA9IF90aGlzLmNvbnRleHQucm91dGVyLmhpc3Rvcnk7XG4gICAgICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgICAgIHJlcGxhY2UgPSBfdGhpcyRwcm9wcy5yZXBsYWNlLFxuICAgICAgICAgICAgICB0byA9IF90aGlzJHByb3BzLnRvO1xuXG5cbiAgICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIExpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcmVwbGFjZSA9IF9wcm9wcy5yZXBsYWNlLFxuICAgICAgICB0byA9IF9wcm9wcy50byxcbiAgICAgICAgaW5uZXJSZWYgPSBfcHJvcHMuaW5uZXJSZWYsXG4gICAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcywgWydyZXBsYWNlJywgJ3RvJywgJ2lubmVyUmVmJ10pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgaHJlZiA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5jcmVhdGVIcmVmKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB7IHBhdGhuYW1lOiB0byB9IDogdG8pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2EnLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgb25DbGljazogdGhpcy5oYW5kbGVDbGljaywgaHJlZjogaHJlZiwgcmVmOiBpbm5lclJlZiB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIExpbms7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkxpbmsucHJvcFR5cGVzID0ge1xuICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkLFxuICBpbm5lclJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmNdKVxufTtcbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByZXBsYWNlOiBmYWxzZVxufTtcbkxpbmsuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgY3JlYXRlSHJlZjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeSc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cblxudmFyIE1lbW9yeVJvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhNZW1vcnlSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE1lbW9yeVJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lbW9yeVJvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhpc3RvcnkoX3RoaXMucHJvcHMpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC4nKTtcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gTWVtb3J5Um91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5NZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICBpbml0aWFsSW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBNZW1vcnlSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBNZW1vcnlSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL01lbW9yeVJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCJpbXBvcnQgcGF0aFRvUmVnZXhwIGZyb20gJ3BhdGgtdG8tcmVnZXhwJztcblxudmFyIHBhdHRlcm5DYWNoZSA9IHt9O1xudmFyIGNhY2hlTGltaXQgPSAxMDAwMDtcbnZhciBjYWNoZUNvdW50ID0gMDtcblxudmFyIGNvbXBpbGVQYXRoID0gZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0dGVybiwgb3B0aW9ucykge1xuICB2YXIgY2FjaGVLZXkgPSAnJyArIG9wdGlvbnMuZW5kICsgb3B0aW9ucy5zdHJpY3QgKyBvcHRpb25zLnNlbnNpdGl2ZTtcbiAgdmFyIGNhY2hlID0gcGF0dGVybkNhY2hlW2NhY2hlS2V5XSB8fCAocGF0dGVybkNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAoY2FjaGVbcGF0dGVybl0pIHJldHVybiBjYWNoZVtwYXR0ZXJuXTtcblxuICB2YXIga2V5cyA9IFtdO1xuICB2YXIgcmUgPSBwYXRoVG9SZWdleHAocGF0dGVybiwga2V5cywgb3B0aW9ucyk7XG4gIHZhciBjb21waWxlZFBhdHRlcm4gPSB7IHJlOiByZSwga2V5czoga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIGNhY2hlW3BhdHRlcm5dID0gY29tcGlsZWRQYXR0ZXJuO1xuICAgIGNhY2hlQ291bnQrKztcbiAgfVxuXG4gIHJldHVybiBjb21waWxlZFBhdHRlcm47XG59O1xuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aCBwYXR0ZXJuLlxuICovXG52YXIgbWF0Y2hQYXRoID0gZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgcGF0aCA9IF9vcHRpb25zJHBhdGggPT09IHVuZGVmaW5lZCA/ICcvJyA6IF9vcHRpb25zJHBhdGgsXG4gICAgICBfb3B0aW9ucyRleGFjdCA9IF9vcHRpb25zLmV4YWN0LFxuICAgICAgZXhhY3QgPSBfb3B0aW9ucyRleGFjdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRleGFjdCxcbiAgICAgIF9vcHRpb25zJHN0cmljdCA9IF9vcHRpb25zLnN0cmljdCxcbiAgICAgIHN0cmljdCA9IF9vcHRpb25zJHN0cmljdCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzdHJpY3QsXG4gICAgICBfb3B0aW9ucyRzZW5zaXRpdmUgPSBfb3B0aW9ucy5zZW5zaXRpdmUsXG4gICAgICBzZW5zaXRpdmUgPSBfb3B0aW9ucyRzZW5zaXRpdmUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkc2Vuc2l0aXZlO1xuXG4gIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aChwYXRoLCB7IGVuZDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSxcbiAgICAgIHJlID0gX2NvbXBpbGVQYXRoLnJlLFxuICAgICAga2V5cyA9IF9jb21waWxlUGF0aC5rZXlzO1xuXG4gIHZhciBtYXRjaCA9IHJlLmV4ZWMocGF0aG5hbWUpO1xuXG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gIHZhciB1cmwgPSBtYXRjaFswXSxcbiAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuXG4gIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCwgLy8gdGhlIHBhdGggcGF0dGVybiB1c2VkIHRvIG1hdGNoXG4gICAgdXJsOiBwYXRoID09PSAnLycgJiYgdXJsID09PSAnJyA/ICcvJyA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgaXNFeGFjdDogaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfSwge30pXG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tICcuL21hdGNoUGF0aCc7XG5cbnZhciBpc0VtcHR5Q2hpbGRyZW4gPSBmdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn07XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG52YXIgUm91dGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUm91dGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJvdXRlKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGUpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgbWF0Y2g6IF90aGlzLmNvbXB1dGVNYXRjaChfdGhpcy5wcm9wcywgX3RoaXMuY29udGV4dC5yb3V0ZXIpXG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBSb3V0ZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIHJvdXRlOiB7XG4gICAgICAgICAgbG9jYXRpb246IHRoaXMucHJvcHMubG9jYXRpb24gfHwgdGhpcy5jb250ZXh0LnJvdXRlci5yb3V0ZS5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaDogdGhpcy5zdGF0ZS5tYXRjaFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH07XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChfcmVmLCByb3V0ZXIpIHtcbiAgICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICBzdHJpY3QgPSBfcmVmLnN0cmljdCxcbiAgICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgICBzZW5zaXRpdmUgPSBfcmVmLnNlbnNpdGl2ZTtcblxuICAgIGlmIChjb21wdXRlZE1hdGNoKSByZXR1cm4gY29tcHV0ZWRNYXRjaDsgLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG5cbiAgICBpbnZhcmlhbnQocm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3Igd2l0aFJvdXRlcigpIG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgdmFyIHJvdXRlID0gcm91dGVyLnJvdXRlO1xuXG4gICAgdmFyIHBhdGhuYW1lID0gKGxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uKS5wYXRobmFtZTtcblxuICAgIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKHBhdGhuYW1lLCB7IHBhdGg6IHBhdGgsIHN0cmljdDogc3RyaWN0LCBleGFjdDogZXhhY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pIDogcm91dGUubWF0Y2g7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkJyk7XG5cbiAgICB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pKSwgJ1lvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNoaWxkcmVuPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLnJlbmRlciAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KSB7XG4gICAgd2FybmluZyghKG5leHRQcm9wcy5sb2NhdGlvbiAmJiAhdGhpcy5wcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtYXRjaDogdGhpcy5jb21wdXRlTWF0Y2gobmV4dFByb3BzLCBuZXh0Q29udGV4dC5yb3V0ZXIpXG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0YXRlLm1hdGNoO1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgY29tcG9uZW50ID0gX3Byb3BzLmNvbXBvbmVudCxcbiAgICAgICAgcmVuZGVyID0gX3Byb3BzLnJlbmRlcjtcbiAgICB2YXIgX2NvbnRleHQkcm91dGVyID0gdGhpcy5jb250ZXh0LnJvdXRlcixcbiAgICAgICAgaGlzdG9yeSA9IF9jb250ZXh0JHJvdXRlci5oaXN0b3J5LFxuICAgICAgICByb3V0ZSA9IF9jb250ZXh0JHJvdXRlci5yb3V0ZSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IF9jb250ZXh0JHJvdXRlci5zdGF0aWNDb250ZXh0O1xuXG4gICAgdmFyIGxvY2F0aW9uID0gdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCByb3V0ZS5sb2NhdGlvbjtcbiAgICB2YXIgcHJvcHMgPSB7IG1hdGNoOiBtYXRjaCwgbG9jYXRpb246IGxvY2F0aW9uLCBoaXN0b3J5OiBoaXN0b3J5LCBzdGF0aWNDb250ZXh0OiBzdGF0aWNDb250ZXh0IH07XG5cbiAgICByZXR1cm4gY29tcG9uZW50ID8gLy8gY29tcG9uZW50IHByb3AgZ2V0cyBmaXJzdCBwcmlvcml0eSwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogbnVsbCA6IHJlbmRlciA/IC8vIHJlbmRlciBwcm9wIGlzIG5leHQsIG9ubHkgY2FsbGVkIGlmIHRoZXJlJ3MgYSBtYXRjaFxuICAgIG1hdGNoID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiBjaGlsZHJlbiA/IC8vIGNoaWxkcmVuIGNvbWUgbGFzdCwgYWx3YXlzIGNhbGxlZFxuICAgIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHByb3BzKSA6ICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbikgOiBudWxsIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUm91dGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJvdXRlLnByb3BUeXBlcyA9IHtcbiAgY29tcHV0ZWRNYXRjaDogUHJvcFR5cGVzLm9iamVjdCwgLy8gcHJpdmF0ZSwgZnJvbSA8U3dpdGNoPlxuICBwYXRoOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmZ1bmMsXG4gIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZS5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pXG59O1xuUm91dGUuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUm91dGUgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1JvdXRlJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xuaW1wb3J0IExpbmsgZnJvbSAnLi9MaW5rJztcblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xudmFyIE5hdkxpbmsgPSBmdW5jdGlvbiBOYXZMaW5rKF9yZWYpIHtcbiAgdmFyIHRvID0gX3JlZi50byxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgbG9jYXRpb24gPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZi5hY3RpdmVDbGFzc05hbWUsXG4gICAgICBjbGFzc05hbWUgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIGdldElzQWN0aXZlID0gX3JlZi5pc0FjdGl2ZSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZi5hcmlhQ3VycmVudCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgWyd0bycsICdleGFjdCcsICdzdHJpY3QnLCAnbG9jYXRpb24nLCAnYWN0aXZlQ2xhc3NOYW1lJywgJ2NsYXNzTmFtZScsICdhY3RpdmVTdHlsZScsICdzdHlsZScsICdpc0FjdGl2ZScsICdhcmlhQ3VycmVudCddKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwge1xuICAgIHBhdGg6ICh0eXBlb2YgdG8gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHRvKSkgPT09ICdvYmplY3QnID8gdG8ucGF0aG5hbWUgOiB0byxcbiAgICBleGFjdDogZXhhY3QsXG4gICAgc3RyaWN0OiBzdHJpY3QsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIGNoaWxkcmVuOiBmdW5jdGlvbiBjaGlsZHJlbihfcmVmMikge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2ggPSBfcmVmMi5tYXRjaDtcblxuICAgICAgdmFyIGlzQWN0aXZlID0gISEoZ2V0SXNBY3RpdmUgPyBnZXRJc0FjdGl2ZShtYXRjaCwgbG9jYXRpb24pIDogbWF0Y2gpO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBfZXh0ZW5kcyh7XG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgY2xhc3NOYW1lOiBpc0FjdGl2ZSA/IFtjbGFzc05hbWUsIGFjdGl2ZUNsYXNzTmFtZV0uZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH0pLmpvaW4oJyAnKSA6IGNsYXNzTmFtZSxcbiAgICAgICAgc3R5bGU6IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSkgOiBzdHlsZSxcbiAgICAgICAgJ2FyaWEtY3VycmVudCc6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50XG4gICAgICB9LCByZXN0KSk7XG4gICAgfVxuICB9KTtcbn07XG5cbk5hdkxpbmsucHJvcFR5cGVzID0ge1xuICB0bzogTGluay5wcm9wVHlwZXMudG8sXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgYXJpYUN1cnJlbnQ6IFByb3BUeXBlcy5vbmVPZihbJ3BhZ2UnLCAnc3RlcCcsICdsb2NhdGlvbicsICd0cnVlJ10pXG59O1xuXG5OYXZMaW5rLmRlZmF1bHRQcm9wcyA9IHtcbiAgYWN0aXZlQ2xhc3NOYW1lOiAnYWN0aXZlJyxcbiAgYXJpYUN1cnJlbnQ6ICd0cnVlJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluazsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwcm9tcHRpbmcgdGhlIHVzZXIgYmVmb3JlIG5hdmlnYXRpbmcgYXdheVxuICogZnJvbSBhIHNjcmVlbiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBQcm9tcHQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUHJvbXB0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQcm9tcHQoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb21wdCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIFByb21wdC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKG1lc3NhZ2UpIHtcbiAgICBpZiAodGhpcy51bmJsb2NrKSB0aGlzLnVuYmxvY2soKTtcblxuICAgIHRoaXMudW5ibG9jayA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeS5ibG9jayhtZXNzYWdlKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHtcbiAgICAgIHRoaXMudW5ibG9jaygpO1xuICAgICAgdGhpcy51bmJsb2NrID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFByb21wdD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICBpZiAodGhpcy5wcm9wcy53aGVuKSB0aGlzLmVuYWJsZSh0aGlzLnByb3BzLm1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy53aGVuKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMud2hlbiB8fCB0aGlzLnByb3BzLm1lc3NhZ2UgIT09IG5leHRQcm9wcy5tZXNzYWdlKSB0aGlzLmVuYWJsZShuZXh0UHJvcHMubWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5kaXNhYmxlKCk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFByb21wdDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUHJvbXB0LnByb3BUeXBlcyA9IHtcbiAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSkuaXNSZXF1aXJlZFxufTtcblByb21wdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHdoZW46IHRydWVcbn07XG5Qcm9tcHQuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIGJsb2NrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFByb21wdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFByb21wdCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUHJvbXB0JztcblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgeyBwYXJzZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5cbmV4cG9ydCB2YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uID0gdm9pZCAwO1xuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gVHdvLWFyZyBmb3JtOiBwdXNoKHBhdGgsIHN0YXRlKVxuICAgIGxvY2F0aW9uID0gcGFyc2VQYXRoKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufTtcblxuZXhwb3J0IHZhciBsb2NhdGlvbnNBcmVFcXVhbCA9IGZ1bmN0aW9uIGxvY2F0aW9uc0FyZUVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoICYmIGEua2V5ID09PSBiLmtleSAmJiB2YWx1ZUVxdWFsKGEuc3RhdGUsIGIuc3RhdGUpO1xufTsiLCJleHBvcnQgdmFyIGFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxuZXhwb3J0IHZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG5leHBvcnQgdmFyIHBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxuZXhwb3J0IHZhciBjcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiZXhwb3J0IHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5leHBvcnQgdmFyIGFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5hZGRFdmVudExpc3RlbmVyID8gbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciBnZXRDb25maXJtYXRpb24gPSBmdW5jdGlvbiBnZXRDb25maXJtYXRpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlID0gZnVuY3Rpb24gc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZmFsc2UgaWYgdXNpbmcgZ28obikgd2l0aCBoYXNoIGhpc3RvcnkgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAqL1xuZXhwb3J0IHZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuZXhwb3J0IHZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzSGlzdG9yeSwgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSwgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgUG9wU3RhdGVFdmVudCA9ICdwb3BzdGF0ZSc7XG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgZ2V0SGlzdG9yeVN0YXRlID0gZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG52YXIgY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBsb2NhdGlvbnNBcmVFcXVhbCB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwTGVhZGluZ1NsYXNoLCBzdHJpcFRyYWlsaW5nU2xhc2gsIGhhc0Jhc2VuYW1lLCBzdHJpcEJhc2VuYW1lLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuaW1wb3J0IHsgY2FuVXNlRE9NLCBhZGRFdmVudExpc3RlbmVyLCByZW1vdmVFdmVudExpc3RlbmVyLCBnZXRDb25maXJtYXRpb24sIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoIH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBIYXNoUGF0aENvZGVycyA9IHtcbiAgaGFzaGJhbmc6IHtcbiAgICBlbmNvZGVQYXRoOiBmdW5jdGlvbiBlbmNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aCA6ICchLycgKyBzdHJpcExlYWRpbmdTbGFzaChwYXRoKTtcbiAgICB9LFxuICAgIGRlY29kZVBhdGg6IGZ1bmN0aW9uIGRlY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoLnN1YnN0cigxKSA6IHBhdGg7XG4gICAgfVxuICB9LFxuICBub3NsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogc3RyaXBMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9XG59O1xuXG52YXIgZ2V0SGFzaFBhdGggPSBmdW5jdGlvbiBnZXRIYXNoUGF0aCgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaGFzaEluZGV4ID0gaHJlZi5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gJycgOiBocmVmLnN1YnN0cmluZyhoYXNoSW5kZXggKyAxKTtcbn07XG5cbnZhciBwdXNoSGFzaFBhdGggPSBmdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhhc2ggPSBwYXRoO1xufTtcblxudmFyIHJlcGxhY2VIYXNoUGF0aCA9IGZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHZhciBoYXNoSW5kZXggPSB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCcjJyk7XG5cbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLmhyZWYuc2xpY2UoMCwgaGFzaEluZGV4ID49IDAgPyBoYXNoSW5kZXggOiAwKSArICcjJyArIHBhdGgpO1xufTtcblxudmFyIGNyZWF0ZUhhc2hIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Hb1dpdGhvdXRSZWxvYWQgPSBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpO1xuXG4gIHZhciBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gRW5zdXJlIHRoZSBoYXNoIGlzIGVuY29kZWQgcHJvcGVybHkgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGVsc2UuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gIHZhciBhbGxQYXRocyA9IFtjcmVhdGVQYXRoKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuXG4gICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdIYXNoIGhpc3RvcnkgY2Fubm90IFBVU0ggdGhlIHNhbWUgcGF0aDsgYSBuZXcgZW50cnkgd2lsbCBub3QgYmUgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2snKTtcblxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgd2FybmluZyhjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUhhc2hIaXN0b3J5OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgeyBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24gfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIGZyb20gJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInO1xuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnaGlzdG9yeSc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHVwZGF0aW5nIHRoZSBsb2NhdGlvbiBwcm9ncmFtbWF0aWNhbGx5XG4gKiB3aXRoIGEgY29tcG9uZW50LlxuICovXG5cbnZhciBSZWRpcmVjdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSZWRpcmVjdCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUmVkaXJlY3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlZGlyZWN0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmlzU3RhdGljID0gZnVuY3Rpb24gaXNTdGF0aWMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dC5yb3V0ZXIgJiYgdGhpcy5jb250ZXh0LnJvdXRlci5zdGF0aWNDb250ZXh0O1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5pc1N0YXRpYygpKSB0aGlzLnBlcmZvcm0oKTtcbiAgfTtcblxuICBSZWRpcmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBwcmV2VG8gPSBjcmVhdGVMb2NhdGlvbihwcmV2UHJvcHMudG8pO1xuICAgIHZhciBuZXh0VG8gPSBjcmVhdGVMb2NhdGlvbih0aGlzLnByb3BzLnRvKTtcblxuICAgIGlmIChsb2NhdGlvbnNBcmVFcXVhbChwcmV2VG8sIG5leHRUbykpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsICdZb3UgdHJpZWQgdG8gcmVkaXJlY3QgdG8gdGhlIHNhbWUgcm91dGUgeW91XFwncmUgY3VycmVudGx5IG9uOiAnICsgKCdcIicgKyBuZXh0VG8ucGF0aG5hbWUgKyBuZXh0VG8uc2VhcmNoICsgJ1wiJykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5wZXJmb3JtID0gZnVuY3Rpb24gcGVyZm9ybSgpIHtcbiAgICB2YXIgaGlzdG9yeSA9IHRoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHVzaCA9IF9wcm9wcy5wdXNoLFxuICAgICAgICB0byA9IF9wcm9wcy50bztcblxuXG4gICAgaWYgKHB1c2gpIHtcbiAgICAgIGhpc3RvcnkucHVzaCh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZSh0byk7XG4gICAgfVxuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJlZGlyZWN0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5SZWRpcmVjdC5wcm9wVHlwZXMgPSB7XG4gIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWRcbn07XG5SZWRpcmVjdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHB1c2g6IGZhbHNlXG59O1xuUmVkaXJlY3QuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgaGlzdG9yeTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHB1c2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICByZXBsYWNlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXJlY3Q7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSZWRpcmVjdCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeS9QYXRoVXRpbHMnO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbnZhciBub3JtYWxpemVMb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uKG9iamVjdCkge1xuICB2YXIgX29iamVjdCRwYXRobmFtZSA9IG9iamVjdC5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX29iamVjdCRwYXRobmFtZSA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29iamVjdCRwYXRobmFtZSxcbiAgICAgIF9vYmplY3Qkc2VhcmNoID0gb2JqZWN0LnNlYXJjaCxcbiAgICAgIHNlYXJjaCA9IF9vYmplY3Qkc2VhcmNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3Qkc2VhcmNoLFxuICAgICAgX29iamVjdCRoYXNoID0gb2JqZWN0Lmhhc2gsXG4gICAgICBoYXNoID0gX29iamVjdCRoYXNoID09PSB1bmRlZmluZWQgPyAnJyA6IF9vYmplY3QkaGFzaDtcblxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBhZGRCYXNlbmFtZSA9IGZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfSk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLnN1YnN0cihiYXNlLmxlbmd0aClcbiAgfSk7XG59O1xuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBmdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChsb2NhdGlvbikgOiBub3JtYWxpemVMb2NhdGlvbihsb2NhdGlvbik7XG59O1xuXG52YXIgY3JlYXRlVVJMID0gZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn07XG5cbnZhciBzdGF0aWNIYW5kbGVyID0gZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaW52YXJpYW50KGZhbHNlLCAnWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+JywgbWV0aG9kTmFtZSk7XG4gIH07XG59O1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aWNSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmNyZWF0ZUhyZWYgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdTbGFzaChfdGhpcy5wcm9wcy5iYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUHVzaCA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMuY29udGV4dDtcblxuICAgICAgY29udGV4dC5hY3Rpb24gPSAnUFVTSCc7XG4gICAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgICAgY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH0sIF90aGlzLmhhbmRsZUJsb2NrID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcm91dGVyOiB7XG4gICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuY29udGV4dFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBiYXNlbmFtZSA9IF9wcm9wcy5iYXNlbmFtZSxcbiAgICAgICAgY29udGV4dCA9IF9wcm9wcy5jb250ZXh0LFxuICAgICAgICBsb2NhdGlvbiA9IF9wcm9wcy5sb2NhdGlvbixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ2Jhc2VuYW1lJywgJ2NvbnRleHQnLCAnbG9jYXRpb24nXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHRoaXMuY3JlYXRlSHJlZixcbiAgICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKCdnbycpLFxuICAgICAgZ29CYWNrOiBzdGF0aWNIYW5kbGVyKCdnb0JhY2snKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcignZ29Gb3J3YXJkJyksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHsgaGlzdG9yeTogaGlzdG9yeSB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxufTtcblN0YXRpY1JvdXRlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGJhc2VuYW1lOiAnJyxcbiAgbG9jYXRpb246ICcvJ1xufTtcblN0YXRpY1JvdXRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgU3RhdGljUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9TdGF0aWNSb3V0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tICcuL21hdGNoUGF0aCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cblxudmFyIFN3aXRjaCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTd2l0Y2gsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN3aXRjaCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3dpdGNoKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuY29udGV4dC5yb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB3YXJuaW5nKCEoIW5leHRQcm9wcy5sb2NhdGlvbiAmJiB0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcm91dGUgPSB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlO1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwLFxuICAgICAgICBjaGlsZCA9IHZvaWQgMDtcbiAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkgcmV0dXJuO1xuXG4gICAgICB2YXIgX2VsZW1lbnQkcHJvcHMgPSBlbGVtZW50LnByb3BzLFxuICAgICAgICAgIHBhdGhQcm9wID0gX2VsZW1lbnQkcHJvcHMucGF0aCxcbiAgICAgICAgICBleGFjdCA9IF9lbGVtZW50JHByb3BzLmV4YWN0LFxuICAgICAgICAgIHN0cmljdCA9IF9lbGVtZW50JHByb3BzLnN0cmljdCxcbiAgICAgICAgICBzZW5zaXRpdmUgPSBfZWxlbWVudCRwcm9wcy5zZW5zaXRpdmUsXG4gICAgICAgICAgZnJvbSA9IF9lbGVtZW50JHByb3BzLmZyb207XG5cbiAgICAgIHZhciBwYXRoID0gcGF0aFByb3AgfHwgZnJvbTtcblxuICAgICAgaWYgKG1hdGNoID09IG51bGwpIHtcbiAgICAgICAgY2hpbGQgPSBlbGVtZW50O1xuICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgZXhhY3Q6IGV4YWN0LCBzdHJpY3Q6IHN0cmljdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtYXRjaCA/IFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBsb2NhdGlvbjogbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pIDogbnVsbDtcbiAgfTtcblxuICByZXR1cm4gU3dpdGNoO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Td2l0Y2guY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcm91dGU6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2g7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTd2l0Y2ggZnJvbSAncmVhY3Qtcm91dGVyL2VzL1N3aXRjaCc7XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvbWF0Y2hQYXRoJztcblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSb3V0ZSBmcm9tICcuL1JvdXRlJztcblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xudmFyIHdpdGhSb3V0ZXIgPSBmdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbJ3dyYXBwZWRDb21wb25lbnRSZWYnXSk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZSwgeyByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihyb3V0ZUNvbXBvbmVudFByb3BzKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHJlbWFpbmluZ1Byb3BzLCByb3V0ZUNvbXBvbmVudFByb3BzLCB7IHJlZjogd3JhcHBlZENvbXBvbmVudFJlZiB9KSk7XG4gICAgICB9IH0pO1xuICB9O1xuXG4gIEMuZGlzcGxheU5hbWUgPSAnd2l0aFJvdXRlcignICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyAnKSc7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcbiAgQy5wcm9wVHlwZXMgPSB7XG4gICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoUm91dGVyOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgd2l0aFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cyk7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgdmFyIGNhbGN1bGF0ZVJnYmEgPSBleHBvcnRzLmNhbGN1bGF0ZVJnYmEgPSBmdW5jdGlvbiBjYWxjdWxhdGVSZ2JhKGNvbG9yLCBvcGFjaXR5KSB7XG4gICAgaWYgKGNvbG9yWzBdID09PSAnIycpIHtcbiAgICAgIGNvbG9yID0gY29sb3Iuc2xpY2UoMSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbG9yLmxlbmd0aCA9PT0gMykge1xuICAgICAgdmFyIHJlcyA9ICcnO1xuICAgICAgY29sb3Iuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmVzICs9IGM7XG4gICAgICAgIHJlcyArPSBjO1xuICAgICAgfSk7XG4gICAgICBjb2xvciA9IHJlcztcbiAgICB9XG5cbiAgICB2YXIgcmdiVmFsdWVzID0gY29sb3IubWF0Y2goLy57Mn0vZykubWFwKGZ1bmN0aW9uIChoZXgpIHtcbiAgICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHJldHVybiAncmdiYSgnICsgcmdiVmFsdWVzICsgJywgJyArIG9wYWNpdHkgKyAnKSc7XG4gIH07XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydtb2R1bGUnLCAnLi9zcGlubmVycy9CYXJMb2FkZXInLCAnLi9zcGlubmVycy9CZWF0TG9hZGVyJywgJy4vc3Bpbm5lcnMvQm91bmNlTG9hZGVyJywgJy4vc3Bpbm5lcnMvQ2lyY2xlTG9hZGVyJywgJy4vc3Bpbm5lcnMvQ2xpcExvYWRlcicsICcuL3NwaW5uZXJzL0NsaW1iaW5nQm94TG9hZGVyJywgJy4vc3Bpbm5lcnMvRG90TG9hZGVyJywgJy4vc3Bpbm5lcnMvRmFkZUxvYWRlcicsICcuL3NwaW5uZXJzL0dyaWRMb2FkZXInLCAnLi9zcGlubmVycy9IYXNoTG9hZGVyJywgJy4vc3Bpbm5lcnMvTW9vbkxvYWRlcicsICcuL3NwaW5uZXJzL1BhY21hbkxvYWRlcicsICcuL3NwaW5uZXJzL1Byb3BhZ2F0ZUxvYWRlcicsICcuL3NwaW5uZXJzL1B1bHNlTG9hZGVyJywgJy4vc3Bpbm5lcnMvUmluZ0xvYWRlcicsICcuL3NwaW5uZXJzL1Jpc2VMb2FkZXInLCAnLi9zcGlubmVycy9Sb3RhdGVMb2FkZXInLCAnLi9zcGlubmVycy9TY2FsZUxvYWRlcicsICcuL3NwaW5uZXJzL1N5bmNMb2FkZXInXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KG1vZHVsZSwgcmVxdWlyZSgnLi9zcGlubmVycy9CYXJMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9CZWF0TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQm91bmNlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQ2lyY2xlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQ2xpcExvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0NsaW1iaW5nQm94TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvRG90TG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvRmFkZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0dyaWRMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9IYXNoTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvTW9vbkxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1BhY21hbkxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1Byb3BhZ2F0ZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1B1bHNlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUmluZ0xvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1Jpc2VMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9Sb3RhdGVMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9TY2FsZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1N5bmNMb2FkZXInKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZCwgZ2xvYmFsLkJhckxvYWRlciwgZ2xvYmFsLkJlYXRMb2FkZXIsIGdsb2JhbC5Cb3VuY2VMb2FkZXIsIGdsb2JhbC5DaXJjbGVMb2FkZXIsIGdsb2JhbC5DbGlwTG9hZGVyLCBnbG9iYWwuQ2xpbWJpbmdCb3hMb2FkZXIsIGdsb2JhbC5Eb3RMb2FkZXIsIGdsb2JhbC5GYWRlTG9hZGVyLCBnbG9iYWwuR3JpZExvYWRlciwgZ2xvYmFsLkhhc2hMb2FkZXIsIGdsb2JhbC5Nb29uTG9hZGVyLCBnbG9iYWwuUGFjbWFuTG9hZGVyLCBnbG9iYWwuUHJvcGFnYXRlTG9hZGVyLCBnbG9iYWwuUHVsc2VMb2FkZXIsIGdsb2JhbC5SaW5nTG9hZGVyLCBnbG9iYWwuUmlzZUxvYWRlciwgZ2xvYmFsLlJvdGF0ZUxvYWRlciwgZ2xvYmFsLlNjYWxlTG9hZGVyLCBnbG9iYWwuU3luY0xvYWRlcik7XG4gICAgZ2xvYmFsLmluZGV4ID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChtb2R1bGUsIF9CYXJMb2FkZXIsIF9CZWF0TG9hZGVyLCBfQm91bmNlTG9hZGVyLCBfQ2lyY2xlTG9hZGVyLCBfQ2xpcExvYWRlciwgX0NsaW1iaW5nQm94TG9hZGVyLCBfRG90TG9hZGVyLCBfRmFkZUxvYWRlciwgX0dyaWRMb2FkZXIsIF9IYXNoTG9hZGVyLCBfTW9vbkxvYWRlciwgX1BhY21hbkxvYWRlciwgX1Byb3BhZ2F0ZUxvYWRlciwgX1B1bHNlTG9hZGVyLCBfUmluZ0xvYWRlciwgX1Jpc2VMb2FkZXIsIF9Sb3RhdGVMb2FkZXIsIF9TY2FsZUxvYWRlciwgX1N5bmNMb2FkZXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBfQmFyTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JhckxvYWRlcik7XG5cbiAgdmFyIF9CZWF0TG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JlYXRMb2FkZXIpO1xuXG4gIHZhciBfQm91bmNlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0JvdW5jZUxvYWRlcik7XG5cbiAgdmFyIF9DaXJjbGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2lyY2xlTG9hZGVyKTtcblxuICB2YXIgX0NsaXBMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ2xpcExvYWRlcik7XG5cbiAgdmFyIF9DbGltYmluZ0JveExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGltYmluZ0JveExvYWRlcik7XG5cbiAgdmFyIF9Eb3RMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRG90TG9hZGVyKTtcblxuICB2YXIgX0ZhZGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmFkZUxvYWRlcik7XG5cbiAgdmFyIF9HcmlkTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0dyaWRMb2FkZXIpO1xuXG4gIHZhciBfSGFzaExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9IYXNoTG9hZGVyKTtcblxuICB2YXIgX01vb25Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTW9vbkxvYWRlcik7XG5cbiAgdmFyIF9QYWNtYW5Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFjbWFuTG9hZGVyKTtcblxuICB2YXIgX1Byb3BhZ2F0ZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm9wYWdhdGVMb2FkZXIpO1xuXG4gIHZhciBfUHVsc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHVsc2VMb2FkZXIpO1xuXG4gIHZhciBfUmluZ0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SaW5nTG9hZGVyKTtcblxuICB2YXIgX1Jpc2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmlzZUxvYWRlcik7XG5cbiAgdmFyIF9Sb3RhdGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUm90YXRlTG9hZGVyKTtcblxuICB2YXIgX1NjYWxlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NjYWxlTG9hZGVyKTtcblxuICB2YXIgX1N5bmNMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY0xvYWRlcik7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIEJhckxvYWRlcjogX0JhckxvYWRlcjIuZGVmYXVsdCxcbiAgICBCZWF0TG9hZGVyOiBfQmVhdExvYWRlcjIuZGVmYXVsdCxcbiAgICBCb3VuY2VMb2FkZXI6IF9Cb3VuY2VMb2FkZXIyLmRlZmF1bHQsXG4gICAgQ2lyY2xlTG9hZGVyOiBfQ2lyY2xlTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaXBMb2FkZXI6IF9DbGlwTG9hZGVyMi5kZWZhdWx0LFxuICAgIENsaW1iaW5nQm94TG9hZGVyOiBfQ2xpbWJpbmdCb3hMb2FkZXIyLmRlZmF1bHQsXG4gICAgRG90TG9hZGVyOiBfRG90TG9hZGVyMi5kZWZhdWx0LFxuICAgIEZhZGVMb2FkZXI6IF9GYWRlTG9hZGVyMi5kZWZhdWx0LFxuICAgIEdyaWRMb2FkZXI6IF9HcmlkTG9hZGVyMi5kZWZhdWx0LFxuICAgIEhhc2hMb2FkZXI6IF9IYXNoTG9hZGVyMi5kZWZhdWx0LFxuICAgIE1vb25Mb2FkZXI6IF9Nb29uTG9hZGVyMi5kZWZhdWx0LFxuICAgIFBhY21hbkxvYWRlcjogX1BhY21hbkxvYWRlcjIuZGVmYXVsdCxcbiAgICBQcm9wYWdhdGVMb2FkZXI6IF9Qcm9wYWdhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgUHVsc2VMb2FkZXI6IF9QdWxzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSaW5nTG9hZGVyOiBfUmluZ0xvYWRlcjIuZGVmYXVsdCxcbiAgICBSaXNlTG9hZGVyOiBfUmlzZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBSb3RhdGVMb2FkZXI6IF9Sb3RhdGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgU2NhbGVMb2FkZXI6IF9TY2FsZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBTeW5jTG9hZGVyOiBfU3luY0xvYWRlcjIuZGVmYXVsdFxuICB9O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJywgJy4uL2hlbHBlcnMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSwgcmVxdWlyZSgnLi4vaGVscGVycycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UsIGdsb2JhbC5oZWxwZXJzKTtcbiAgICBnbG9iYWwuQmFyTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlLCBfaGVscGVycykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG4gIGV4cG9ydHMuTG9hZGVyID0gdW5kZWZpbmVkO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBsb25nID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle2xlZnQ6LTM1JTtyaWdodDoxMDAlfTYwJXtsZWZ0OjEwMCU7cmlnaHQ6LTkwJX0xMDAle2xlZnQ6MTAwJTtyaWdodDotOTAlfScpO1xuXG4gIHZhciBzaG9ydCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXtsZWZ0Oi0yMDAlO3JpZ2h0OjEwMCV9NjAle2xlZnQ6MTA3JTtyaWdodDotOCV9MTAwJXtsZWZ0OjEwNyU7cmlnaHQ6LTglfScpO1xuXG4gIHZhciBMb2FkZXIgPSBleHBvcnRzLkxvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoLyojX19QVVJFX18qLygwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsIF90aGlzLnByb3BzLmhlaWdodCwgJ3B4O292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JhY2tncm91bmQtY2xpcDpwYWRkaW5nLWJveDtkaXNwbGF5OmJsb2NrO2JvcmRlci1yYWRpdXM6MnB4O3dpbGwtY2hhbmdlOmxlZnQscmlnaHQ7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb246JywgaSA9PT0gMSA/IGxvbmcgOiBzaG9ydCwgJyAyLjFzICcsIGkgPT09IDIgPyAnMS4xNXMnIDogJycsICcgJywgaSA9PT0gMSA/ICdjdWJpYy1iZXppZXIoMC42NSwgMC44MTUsIDAuNzM1LCAwLjM5NSknIDogJ2N1YmljLWJlemllcigwLjE2NSwgMC44NCwgMC40NCwgMSknLCAnIGluZmluaXRlO30nKVxuICAgICAgICApO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgvKiNfX1BVUkVfXyovKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy53aWR0aCwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5oZWlnaHQsICdweDtvdmVyZmxvdzpoaWRkZW47YmFja2dyb3VuZC1jb2xvcjonLCAoMCwgX2hlbHBlcnMuY2FsY3VsYXRlUmdiYSkoX3RoaXMucHJvcHMuY29sb3IsIDAuMiksICc7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O30nKVxuICAgICAgICApO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgaGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHdpZHRoOiAxMDAsXG4gICAgaGVpZ2h0OiA0XG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnd2lkdGgnLCAnaGVpZ2h0J10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQmVhdExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGJlYXQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNTAle3RyYW5zZm9ybTpzY2FsZSgwLjc1KTtvcGFjaXR5OjAuMn0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uOicsIGJlYXQsICcgMC43cyAnLCBpICUgMiA/ICcwcycgOiAnMC4zNXMnLCAnIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQm91bmNlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgYm91bmNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAlLDEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJztib3JkZXItcmFkaXVzOjEwMCU7b3BhY2l0eTowLjY7dG9wOjA7bGVmdDowO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246JywgYm91bmNlLCAnIDIuMXMgJywgaSA9PT0gMSA/ICcxcycgOiAnMHMnLCAnIGluZmluaXRlIGVhc2UtaW4tb3V0O30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MFxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5DaXJjbGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBjaXJjbGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSAqICgxIC0gaSAvIDEwKSwgJ3B4O3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUgKiAoMSAtIGkgLyAxMCksICdweDtib3JkZXI6MXB4IHNvbGlkICcsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTt0cmFuc2l0aW9uOjJzO2JvcmRlci1ib3R0b206bm9uZTtib3JkZXItcmlnaHQ6bm9uZTt0b3A6JywgaSAqIDAuNyAqIDIuNSwgJyU7bGVmdDonLCBpICogMC4zNSAqIDIuNSwgJyU7YW5pbWF0aW9uLWZpbGwtbW9kZTpcXCdcXCc7YW5pbWF0aW9uOicsIGNpcmNsZSwgJyAxcyAnLCBpICogMC4yLCAncyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDApIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDUwXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLkNsaW1iaW5nQm94TG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgY2xpbWJpbmdCb3ggPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNDVkZWcpfTUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMCwtMWVtKSByb3RhdGUoLTUwZGVnKX0yMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQ3ZGVnKX0yNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQ1ZGVnKX0zMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgxZW0sLTJlbSkgcm90YXRlKDQwZGVnKX00NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyZW0sLTNlbSkgcm90YXRlKDEzN2RlZyl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGUoMmVtLC0zZW0pIHJvdGF0ZSgxMzVkZWcpfTU1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDJlbSwtM2VtKSByb3RhdGUoMTMwZGVnKX03MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgzZW0sLTRlbSkgcm90YXRlKDIxN2RlZyl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGUoM2VtLC00ZW0pIHJvdGF0ZSgyMjBkZWcpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtMjI1ZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7Ym90dG9tOi0wLjFlbTtoZWlnaHQ6MWVtO3dpZHRoOjFlbTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6MTUlO2JvcmRlcjowLjI1ZW0gc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNDVkZWcpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246JywgY2xpbWJpbmdCb3gsICcgMi41cyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjc5LDAsLjQ3LC45Nyk7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTttYXJnaW4tdG9wOi0yLjdlbTttYXJnaW4tbGVmdDotMi43ZW07d2lkdGg6NS40ZW07aGVpZ2h0OjUuNGVtO2ZvbnQtc2l6ZTonLCBfdGhpcy5wcm9wcy5zaXplLCAnO30nKTtcbiAgICAgIH0sIF90aGlzLmhpbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjcuMWVtO2hlaWdodDo3LjFlbTt0b3A6MS43ZW07bGVmdDoxLjdlbTtib3JkZXItbGVmdDowLjI1ZW0gc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7fScpO1xuICAgICAgfSwgX3RoaXMuY29udGFpbmVyID0gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDo3LjFlbTtoZWlnaHQ6Ny4xZW07fScpLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy5jb250YWluZXIgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoKSB9KSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5oaWxsKCkgfSlcbiAgICAgICAgICApXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTVcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQ2xpcExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLy8gVGhpcyByZXR1cm5zIGFuIGFuaW1hdGlvblxuICB2YXIgY2xpcCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpIHNjYWxlKDEpfTUwJXt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZykgc2NhbGUoMC44KX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKSBzY2FsZSgxKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kOnRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym9yZGVyLXJhZGl1czoxMDAlO2JvcmRlcjoycHggc29saWQ7Ym9yZGVyLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1ib3R0b20tY29sb3I6dHJhbnNwYXJlbnQ7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIGNsaXAsICcgMC43NXMgMHMgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoKSB9KSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAzNVxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Eb3RMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciByb3RhdGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIGJvdW5jZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJSwxMDAle3RyYW5zZm9ybTpzY2FsZSgwKX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMCl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO3RvcDonLCBpICUgMiA/ICcwJyA6ICdhdXRvJywgJztib3R0b206JywgaSAlIDIgPyAnYXV0bycgOiAnMCcsICc7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUgLyAyLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDIsICdweDtiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCBib3VuY2UsICcgMnMgJywgaSA9PT0gMiA/ICctMXMnIDogJzBzJywgJyBpbmZpbml0ZSBsaW5lYXI7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczthbmltYXRpb246Jywgcm90YXRlLCAnIDJzIDBzIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuRmFkZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGZhZGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNTAle29wYWNpdHk6MC4zfTEwMCV7b3BhY2l0eToxfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuaGVpZ2h0LCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMud2lkdGgsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czonLCBfdGhpcy5wcm9wcy5yYWRpdXMsICc7dHJhbnNpdGlvbjoyczthbmltYXRpb24tZmlsbC1tb2RlOlxcJ2JvdGhcXCc7YW5pbWF0aW9uOicsIGZhZGUsICcgMS4ycyAnLCBpICogMC4xMiwgJ3MgaW5maW5pdGUgZWFzZS1pbi1vdXQ7fScpO1xuICAgICAgfSwgX3RoaXMucmFkaXVzID0gMjAsIF90aGlzLnF1YXJ0ZXIgPSBfdGhpcy5yYWRpdXMgLyAyICsgX3RoaXMucmFkaXVzIC8gNS41LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MDt0b3A6JywgX3RoaXMucmFkaXVzLCAncHg7bGVmdDonLCBfdGhpcy5yYWRpdXMsICdweDt3aWR0aDonLCBfdGhpcy5yYWRpdXMgKiAzLCAncHg7aGVpZ2h0OicsIF90aGlzLnJhZGl1cyAqIDMsICdweDt9Jyk7XG4gICAgICB9LCBfdGhpcy5hID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDEpLCAnO3RvcDonLCBfdGhpcy5yYWRpdXMsICc7bGVmdDowOycpO1xuICAgICAgfSwgX3RoaXMuYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSgyKSwgJzt0b3A6JywgX3RoaXMucXVhcnRlciwgJztsZWZ0OicsIF90aGlzLnF1YXJ0ZXIsICc7dHJhbnNmb3JtOnJvdGF0ZSgtNDVkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSgzKSwgJzt0b3A6MDtsZWZ0OicsIF90aGlzLnJhZGl1cywgJzt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoNCksICc7dG9wOicsIC1fdGhpcy5xdWFydGVyLCAnO2xlZnQ6JywgX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoNSksICc7dG9wOicsIC1fdGhpcy5yYWRpdXMsICc7bGVmdDowOycpO1xuICAgICAgfSwgX3RoaXMuZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSg2KSwgJzt0b3A6JywgLV90aGlzLnF1YXJ0ZXIsICc7bGVmdDonLCAtX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7Jyk7XG4gICAgICB9LCBfdGhpcy5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDcpLCAnO3RvcDowO2xlZnQ6JywgLV90aGlzLnJhZGl1cywgJzt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoOCksICc7dG9wOicsIF90aGlzLnF1YXJ0ZXIsICc7bGVmdDonLCAtX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5hKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmIoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYygpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5kKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmUoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuZigpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5nKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmgoKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHJhZGl1czogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBoZWlnaHQ6IDE1LFxuICAgIHdpZHRoOiA1LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgcmFkaXVzOiAyXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnaGVpZ2h0JywgJ3dpZHRoJywgJ21hcmdpbicsICdyYWRpdXMnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5HcmlkTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZ3JpZCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle3RyYW5zZm9ybTpzY2FsZSgwLjUpO29wYWNpdHk6MC43fTEwMCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0nKTtcblxuICB2YXIgcmFuZG9tID0gZnVuY3Rpb24gcmFuZG9tKHRvcCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpICogdG9wO1xuICB9O1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAocmFuZCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tkaXNwbGF5OmlubGluZS1ibG9jaztiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICc7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICc7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7YW5pbWF0aW9uLWZpbGwtbW9kZTpcXCdib3RoXFwnO2FuaW1hdGlvbjonLCBncmlkLCAnICcsIHJhbmQgLyAxMDAgKyAwLjYsICdzICcsIHJhbmQgLyAxMDAgLSAwLjIsICdzIGluZmluaXRlIGVhc2U7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7d2lkdGg6JywgcGFyc2VGbG9hdChfdGhpcy5wcm9wcy5zaXplKSAqIDMgKyBwYXJzZUZsb2F0KF90aGlzLnByb3BzLm1hcmdpbikgKiA2LCAncHg7Zm9udC1zaXplOjA7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbiddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJywgJy4uL2hlbHBlcnMnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSwgcmVxdWlyZSgnLi4vaGVscGVycycpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UsIGdsb2JhbC5oZWxwZXJzKTtcbiAgICBnbG9iYWwuSGFzaExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSwgX2hlbHBlcnMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMudGhpY2tuZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2l6ZSAvIDU7XG4gICAgICB9LCBfdGhpcy5sYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoX3RoaXMucHJvcHMuc2l6ZSAtIF90aGlzLnRoaWNrbmVzcygpKSAvIDI7XG4gICAgICB9LCBfdGhpcy5vZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5sYXQoKSAtIF90aGlzLnRoaWNrbmVzcygpO1xuICAgICAgfSwgX3RoaXMuY29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2hlbHBlcnMuY2FsY3VsYXRlUmdiYSkoX3RoaXMucHJvcHMuY29sb3IsIDAuNzUpO1xuICAgICAgfSwgX3RoaXMuYmVmb3JlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3dpZHRoOicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTM1JXt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym94LXNoYWRvdzowICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsMCAnLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9NzAle3dpZHRoOicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCAtX3RoaXMubGF0KCksICdweCAnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIF90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTEwMCV7Ym94LXNoYWRvdzonLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfScpO1xuICAgICAgfSwgX3RoaXMuYWZ0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7aGVpZ2h0OicsIF90aGlzLnRoaWNrbmVzcygpLCAncHg7Ym94LXNoYWRvdzonLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCAtX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnfTM1JXtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2JveC1zaGFkb3c6JywgX3RoaXMub2Zmc2V0KCksICdweCAwICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLm9mZnNldCgpLCAncHggMCAnLCBfdGhpcy5jb2xvcigpLCAnfTcwJXtoZWlnaHQ6JywgX3RoaXMudGhpY2tuZXNzKCksICdweDtib3gtc2hhZG93OicsIF90aGlzLm9mZnNldCgpLCAncHggJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9MTAwJXtib3gtc2hhZG93OicsIF90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIC1fdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9Jyk7XG4gICAgICB9LCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFwnXFwnO3RvcDo1MCU7bGVmdDo1MCU7ZGlzcGxheTpibG9jazt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplIC8gNSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplIC8gNSwgJ3B4O2JvcmRlci1yYWRpdXM6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDEwLCAncHg7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpO2FuaW1hdGlvbi1maWxsLW1vZGU6bm9uZTthbmltYXRpb246JywgaSA9PT0gMSA/IF90aGlzLmJlZm9yZSgpIDogX3RoaXMuYWZ0ZXIoKSwgJyAycyBpbmZpbml0ZTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt0cmFuc2Zvcm06cm90YXRlKDE2NWRlZyk7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBzaXplOiA1MCxcbiAgICBjb2xvcjogJyMwMDAwMDAnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLk1vb25Mb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBtb29uID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMubW9vblNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplIC8gNztcbiAgICAgIH0sIF90aGlzLmJhbGxTdHlsZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsIHNpemUsICdweDtoZWlnaHQ6Jywgc2l6ZSwgJ3B4O2JvcmRlci1yYWRpdXM6MTAwJTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplICsgX3RoaXMubW9vblNpemUoKSAqIDIsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSArIF90aGlzLm1vb25TaXplKCkgKiAyLCAncHg7YW5pbWF0aW9uOicsIG1vb24sICcgMC42cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczt9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLmJhbGxTdHlsZShfdGhpcy5tb29uU2l6ZSgpKSwgJztiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO29wYWNpdHk6MC44O3Bvc2l0aW9uOmFic29sdXRlO3RvcDonLCBfdGhpcy5wcm9wcy5zaXplIC8gMiAtIF90aGlzLm1vb25TaXplKCkgLyAyLCAncHg7YW5pbWF0aW9uOicsIG1vb24sICcgMC42cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkczsnKTtcbiAgICAgIH0sIF90aGlzLmNpcmNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5iYWxsU3R5bGUoX3RoaXMucHJvcHMuc2l6ZSksICc7Ym9yZGVyOicsIF90aGlzLm1vb25TaXplKCksICdweCBzb2xpZCAnLCBfdGhpcy5wcm9wcy5jb2xvciwgJztvcGFjaXR5OjAuMTsnKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmNpcmNsZSgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUGFjbWFuTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvLyBUaGlzIHJldHVybnMgYW4gYW5pbWF0aW9uXG4gIHZhciBwYWNtYW4gPSBbKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoLTQ0ZGVnKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoNDRkZWcpfScpXTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmJhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnNzUle29wYWNpdHk6MC43fTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgnLCAtNCAqIF90aGlzLnByb3BzLnNpemUsICdweCwnLCAtX3RoaXMucHJvcHMuc2l6ZSAvIDQsICdweCl9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsU3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDoxMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLCcsIC1fdGhpcy5wcm9wcy5zaXplIC8gNCwgJ3B4KTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MjVweDtsZWZ0OjEwMHB4O2FuaW1hdGlvbjonLCBfdGhpcy5iYWxsKCksICcgMXMgJywgaSAqIDAuMjUsICdzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RoaXMuczEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplICsgJ3B4IHNvbGlkIHRyYW5zcGFyZW50JztcbiAgICAgIH0sIF90aGlzLnMyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvcHMuc2l6ZSArICdweCBzb2xpZCAnICsgX3RoaXMucHJvcHMuY29sb3I7XG4gICAgICB9LCBfdGhpcy5wYWNtYW5TdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLXJpZ2h0OicsIF90aGlzLnMxKCksICc7Ym9yZGVyLXRvcDonLCBpID09PSAwID8gX3RoaXMuczEoKSA6IF90aGlzLnMyKCksICc7Ym9yZGVyLWxlZnQ6JywgX3RoaXMuczIoKSwgJztib3JkZXItYm90dG9tOicsIGkgPT09IDAgPyBfdGhpcy5zMigpIDogX3RoaXMuczEoKSwgJztib3JkZXItcmFkaXVzOicsIF90aGlzLnByb3BzLnNpemUsICdweDtwb3NpdGlvbjphYnNvbHV0ZTthbmltYXRpb246JywgcGFjbWFuW2ldLCAnIDAuOHMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZTowO2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O30nKTtcbiAgICAgIH0sIF90aGlzLnBhYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBhY21hblN0eWxlKDApO1xuICAgICAgfSwgX3RoaXMubWFuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnBhY21hblN0eWxlKDEpLCAnO3Bvc2l0aW9uOmFic29sdXRlOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnBhYygpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5tYW4oKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsU3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGxTdHlsZSg0KSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAyNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Qcm9wYWdhdGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIDEuNSA0LjUgNy41XG4gIHZhciBkaXN0YW5jZSA9IFsxLCAzLCA1XTtcblxuICB2YXIgcHJvcGFnYXRlID0gWygwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMl0sICdyZW0pIHNjYWxlKDAuNSl9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzJdLCAncmVtKSBzY2FsZSgwLjUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKV07XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2ZvbnQtc2l6ZTonLCBfdGhpcy5wcm9wcy5zaXplIC8gMywgJ3B4O3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2JhY2tncm91bmQ6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czo1MCU7YW5pbWF0aW9uOicsIHByb3BhZ2F0ZVtpXSwgJyAxLjVzICBpbmZpbml0ZTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgwKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIHNpemU6IDE1LFxuICAgIGNvbG9yOiAnIzAwMDAwMCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUHVsc2VMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIFRoaXMgcmV0dXJucyBhbiBhbmltYXRpb25cbiAgdmFyIHB1bHNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9NDUle3RyYW5zZm9ybTpzY2FsZSgwLjEpO29wYWNpdHk6MC43fTgwJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7Ym9yZGVyLXJhZGl1czoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2FuaW1hdGlvbjonLCBwdWxzZSwgJyAwLjc1cyAnLCBpICogMC4xMiwgJ3MgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC4yLC42OCwuMTgsMS4wOCk7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDE1LFxuICAgIG1hcmdpbjogJzJweCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbiddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLlJpbmdMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciByaWdodCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlWCgxODBkZWcpIHJvdGF0ZVkoMzYwZGVnKSByb3RhdGVaKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIGxlZnQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZVgoMzYwZGVnKSByb3RhdGVZKDE4MGRlZykgcm90YXRlWigzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym9yZGVyOicsIF90aGlzLnByb3BzLnNpemUgLyAxMCwgJ3B4IHNvbGlkICcsIF90aGlzLnByb3BzLmNvbG9yLCAnO29wYWNpdHk6MC40O2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO3BlcnNwZWN0aXZlOjgwMHB4O2FuaW1hdGlvbjonLCBpID09PSAxID8gcmlnaHQgOiBsZWZ0LCAnIDJzIDBzIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDtwb3NpdGlvbjpyZWxhdGl2ZTt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNjBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUmlzZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJpc2VBbW91bnQgPSAzMDtcblxuICB2YXIgZXZlbiA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMS4xKX0yNSV7dHJhbnNsYXRlWSgtJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIHJpc2VBbW91bnQsICdweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSBzY2FsZSgxLjApfScpO1xuXG4gIHZhciBvZGQgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxlKDAuNCl9MjUle3RyYW5zbGF0ZVkoJywgcmlzZUFtb3VudCwgJ3B4KX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVZKCcsIC1yaXNlQW1vdW50LCAncHgpfTEwMCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCkgc2NhbGUoMC43NSl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIGkgJSAyID09PSAwID8gZXZlbiA6IG9kZCwgJyAxcyAwcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjE1LC40NiwuOSwuNik7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUm90YXRlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgcm90YXRlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZyl9NTAle3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7b3BhY2l0eTowLjg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDonLCBpICUgMiA/IC0yOCA6IDI1LCAncHg7fScpO1xuICAgICAgfSwgX3RoaXMuYmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLmJhbGwoKSwgJztkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uOicsIHJvdGF0ZSwgJyAxcyAwcyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjcsLS4xMywuMjIsLjg2KTsnKTtcbiAgICAgIH0sIF90aGlzLmxvbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbCgpLCAnO2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDEpLCAnOycpO1xuICAgICAgfSwgX3RoaXMuc2hvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbCgpLCAnO2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDIpLCAnOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmxvbmcoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc2hvcnQoKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuU2NhbGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBzY2FsZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGV5KDEuMCl9NTAle3RyYW5zZm9ybTpzY2FsZXkoMC40KX0xMDAle3RyYW5zZm9ybTpzY2FsZXkoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy53aWR0aCwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5oZWlnaHQsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6JywgX3RoaXMucHJvcHMucmFkaXVzLCAncHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIHNjYWxlLCAnIDFzICcsIGkgKiAwLjEsICdzIGluZmluaXRlIGN1YmljLWJlemllciguMiwuNjgsLjE4LDEuMDgpO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgaGVpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICB3aWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICByYWRpdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgaGVpZ2h0OiAzNSxcbiAgICB3aWR0aDogNCxcbiAgICBtYXJnaW46ICcycHgnLFxuICAgIHJhZGl1czogMlxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ2hlaWdodCcsICd3aWR0aCcsICdtYXJnaW4nLCAncmFkaXVzJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuU3luY0xvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHN5bmMgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMzMle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwcHgpfTY2JXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTBweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246Jywgc3luYywgJyAwLjZzICcsIGkgKiAwLjA3LCAncyBpbmZpbml0ZSBlYXNlLWluLW91dDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGlzdC9pbmRleCcpOyIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMy4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHI9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHQ9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHY9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx3PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseT1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsej1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLEE9XCJmdW5jdGlvblwiPT09XG50eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQihhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgaHR0cDovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnRcXHgzZFwiK2EsYz0wO2M8YjtjKyspZSs9XCJcXHgyNmFyZ3NbXVxceDNkXCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjKzFdKTtiPUVycm9yKGUrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwiKTtiLm5hbWU9XCJJbnZhcmlhbnQgVmlvbGF0aW9uXCI7Yi5mcmFtZXNUb1BvcD0xO3Rocm93IGI7fVxudmFyIEM9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319O2Z1bmN0aW9uIEQoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q31ELnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0QucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9CKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRSgpe31cbkUucHJvdG90eXBlPUQucHJvdG90eXBlO2Z1bmN0aW9uIEYoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9bjt0aGlzLnVwZGF0ZXI9ZXx8Q312YXIgRz1GLnByb3RvdHlwZT1uZXcgRTtHLmNvbnN0cnVjdG9yPUY7bShHLEQucHJvdG90eXBlKTtHLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBIPXtjdXJyZW50Om51bGx9LEk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxKPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBLKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilJLmNhbGwoYixjKSYmIUouaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkguY3VycmVudH19XG5mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1yfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZyxOPVtdO2Z1bmN0aW9uIE8oYSxiLGUsYyl7aWYoTi5sZW5ndGgpe3ZhciBkPU4ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBQKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ti5sZW5ndGgmJk4ucHVzaChhKX1cbmZ1bmN0aW9uIFEoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHI6Y2FzZSB0Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1IoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUihkLGgpO2crPVEoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1BJiZhW0FdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitSKGQsaCsrKSxnKz1RKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEIoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFIoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFMoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVChhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9VKGEsYyxlLHAudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKEwoYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBVKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE0sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPU8oYixnLGMsZCk7bnVsbD09YXx8UShhLFwiXCIsVCxiKTtQKGIpfVxudmFyIFY9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VShhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9TyhudWxsLG51bGwsYixlKTtudWxsPT1hfHxRKGEsXCJcIixTLGIpO1AoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UShhLFwiXCIscC50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VShhLGIsbnVsbCxwLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe0woYSk/dm9pZCAwOkIoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkQsUHVyZUNvbXBvbmVudDpGLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp4LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOncsY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp6LHJlbmRlcjphfX0sRnJhZ21lbnQ6dSxTdHJpY3RNb2RlOnYsdW5zdGFibGVfQXN5bmNNb2RlOnksY3JlYXRlRWxlbWVudDpLLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1ILmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYoaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUkuY2FsbChiLFxuYykmJiFKLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Sy5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50OkwsdmVyc2lvbjpcIjE2LjMuMFwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpILGFzc2lnbjptfX0sVz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlZ9KSxYPVcmJlZ8fFc7XG5tb2R1bGUuZXhwb3J0cz1YW1wiZGVmYXVsdFwiXT9YW1wiZGVmYXVsdFwiXTpYO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50LCBjcmVhdGVGYWN0b3J5IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICdmYmpzL2xpYi9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNyZWF0ZUNoYW5nZUVtaXR0ZXIgfSBmcm9tICdjaGFuZ2UtZW1pdHRlcic7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxudmFyIHNldFN0YXRpYyA9IGZ1bmN0aW9uIHNldFN0YXRpYyhrZXksIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgQmFzZUNvbXBvbmVudFtrZXldID0gdmFsdWU7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9O1xufTtcblxudmFyIHNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpIHtcbiAgcmV0dXJuIHNldFN0YXRpYygnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQkJDEpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudCQkMTtcbiAgfVxuXG4gIGlmICghQ29tcG9uZW50JCQxKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50JCQxLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyAnKCcgKyBnZXREaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50KSArICcpJztcbn07XG5cbnZhciBtYXBQcm9wcyA9IGZ1bmN0aW9uIG1hcFByb3BzKHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgTWFwUHJvcHMgPSBmdW5jdGlvbiBNYXBQcm9wcyhwcm9wcykge1xuICAgICAgcmV0dXJuIGZhY3RvcnkocHJvcHNNYXBwZXIocHJvcHMpKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdtYXBQcm9wcycpKShNYXBQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBNYXBQcm9wcztcbiAgfTtcbn07XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIHdpdGhQcm9wcyA9IGZ1bmN0aW9uIHdpdGhQcm9wcyhpbnB1dCkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcm9wcywgdHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nID8gaW5wdXQocHJvcHMpIDogaW5wdXQpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhQcm9wcycpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBwaWNrID0gZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgd2l0aFByb3BzT25DaGFuZ2UgPSBmdW5jdGlvbiB3aXRoUHJvcHNPbkNoYW5nZShzaG91bGRNYXBPcktleXMsIHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgc2hvdWxkTWFwID0gdHlwZW9mIHNob3VsZE1hcE9yS2V5cyA9PT0gJ2Z1bmN0aW9uJyA/IHNob3VsZE1hcE9yS2V5cyA6IGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKHByb3BzLCBzaG91bGRNYXBPcktleXMpLCBwaWNrKG5leHRQcm9wcywgc2hvdWxkTWFwT3JLZXlzKSk7XG4gICAgfTtcblxuICAgIHZhciBXaXRoUHJvcHNPbkNoYW5nZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoUHJvcHNPbkNoYW5nZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhQcm9wc09uQ2hhbmdlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhQcm9wc09uQ2hhbmdlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jb21wdXRlZFByb3BzID0gcHJvcHNNYXBwZXIoX3RoaXMucHJvcHMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoUHJvcHNPbkNoYW5nZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRNYXAodGhpcy5wcm9wcywgbmV4dFByb3BzKSkge1xuICAgICAgICAgIHRoaXMuY29tcHV0ZWRQcm9wcyA9IHByb3BzTWFwcGVyKG5leHRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIFdpdGhQcm9wc09uQ2hhbmdlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLmNvbXB1dGVkUHJvcHMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUHJvcHNPbkNoYW5nZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFByb3BzT25DaGFuZ2UnKSkoV2l0aFByb3BzT25DaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFByb3BzT25DaGFuZ2U7XG4gIH07XG59O1xuXG52YXIgbWFwVmFsdWVzID0gZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgZnVuYykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZnVuYyhvYmpba2V5XSwga2V5KTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIHdpdGhIYW5kbGVycyA9IGZ1bmN0aW9uIHdpdGhIYW5kbGVycyhoYW5kbGVycykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgV2l0aEhhbmRsZXJzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhIYW5kbGVycygpIHtcbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoSGFuZGxlcnMpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkSGFuZGxlcnMgPSB7fTtcbiAgICAgIH07XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5oYW5kbGVycykpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFdpdGhIYW5kbGVycztcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICB2YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5jYWNoZWRIYW5kbGVycyA9IHt9O1xuICAgICAgdGhpcy5oYW5kbGVycyA9IG1hcFZhbHVlcyh0eXBlb2YgaGFuZGxlcnMgPT09ICdmdW5jdGlvbicgPyBoYW5kbGVycyh0aGlzLnByb3BzKSA6IGhhbmRsZXJzLCBmdW5jdGlvbiAoY3JlYXRlSGFuZGxlciwgaGFuZGxlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkSGFuZGxlciA9IF90aGlzMi5jYWNoZWRIYW5kbGVyc1toYW5kbGVyTmFtZV07XG4gICAgICAgICAgaWYgKGNhY2hlZEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRIYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIoX3RoaXMyLnByb3BzKTtcbiAgICAgICAgICBfdGhpczIuY2FjaGVkSGFuZGxlcnNbaGFuZGxlck5hbWVdID0gaGFuZGxlcjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAnd2l0aEhhbmRsZXJzKCk6IEV4cGVjdGVkIGEgbWFwIG9mIGhpZ2hlci1vcmRlciBmdW5jdGlvbnMuICcgKyAnUmVmZXIgdG8gdGhlIGRvY3MgZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlci5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhIYW5kbGVycycpKShXaXRoSGFuZGxlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aEhhbmRsZXJzO1xuICB9O1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRQcm9wcyhwcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG4gICAgdmFyIERlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIERlZmF1bHRQcm9wcyhvd25lclByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShvd25lclByb3BzKTtcbiAgICB9O1xuICAgIERlZmF1bHRQcm9wcy5kZWZhdWx0UHJvcHMgPSBwcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZGVmYXVsdFByb3BzJykpKERlZmF1bHRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBEZWZhdWx0UHJvcHM7XG4gIH07XG59O1xuXG52YXIgb21pdCA9IGZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XG4gIHZhciByZXN0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBbXSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHJlc3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZGVsZXRlIHJlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3Q7XG59O1xuXG52YXIgcmVuYW1lUHJvcCA9IGZ1bmN0aW9uIHJlbmFtZVByb3Aob2xkTmFtZSwgbmV3TmFtZSkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcztcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb21pdChwcm9wcywgW29sZE5hbWVdKSwgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kcyA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbbmV3TmFtZV0gPSBwcm9wc1tvbGROYW1lXSwgX2JhYmVsSGVscGVycyRleHRlbmRzKSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncmVuYW1lUHJvcCcpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBrZXlzID0gT2JqZWN0LmtleXM7XG5cblxudmFyIG1hcEtleXMgPSBmdW5jdGlvbiBtYXBLZXlzKG9iaiwgZnVuYykge1xuICByZXR1cm4ga2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXN1bHRbZnVuYyh2YWwsIGtleSldID0gdmFsO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59O1xuXG52YXIgcmVuYW1lUHJvcHMgPSBmdW5jdGlvbiByZW5hbWVQcm9wcyhuYW1lTWFwKSB7XG4gIHZhciBob2MgPSBtYXBQcm9wcyhmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG9taXQocHJvcHMsIGtleXMobmFtZU1hcCkpLCBtYXBLZXlzKHBpY2socHJvcHMsIGtleXMobmFtZU1hcCkpLCBmdW5jdGlvbiAoXywgb2xkTmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWVNYXBbb2xkTmFtZV07XG4gICAgfSkpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3JlbmFtZVByb3BzJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGZsYXR0ZW5Qcm9wID0gZnVuY3Rpb24gZmxhdHRlblByb3AocHJvcE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBGbGF0dGVuUHJvcCA9IGZ1bmN0aW9uIEZsYXR0ZW5Qcm9wKHByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgcHJvcHMsIHByb3BzW3Byb3BOYW1lXSkpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZmxhdHRlblByb3AnKSkoRmxhdHRlblByb3ApO1xuICAgIH1cbiAgICByZXR1cm4gRmxhdHRlblByb3A7XG4gIH07XG59O1xuXG52YXIgd2l0aFN0YXRlID0gZnVuY3Rpb24gd2l0aFN0YXRlKHN0YXRlTmFtZSwgc3RhdGVVcGRhdGVyTmFtZSwgaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoV2l0aFN0YXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFN0YXRlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IGluaXRpYWxTdGF0ZShfdGhpcy5wcm9wcykgOiBpbml0aWFsU3RhdGVcbiAgICAgICAgfSwgX3RoaXMudXBkYXRlU3RhdGVWYWx1ZSA9IGZ1bmN0aW9uICh1cGRhdGVGbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZVZhbHVlID0gX3JlZi5zdGF0ZVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIHVwZGF0ZUZuID09PSAnZnVuY3Rpb24nID8gdXBkYXRlRm4oc3RhdGVWYWx1ZSkgOiB1cGRhdGVGblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhTdGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbc3RhdGVVcGRhdGVyTmFtZV0gPSB0aGlzLnVwZGF0ZVN0YXRlVmFsdWUsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoU3RhdGU7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhTdGF0ZScpKShXaXRoU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFN0YXRlO1xuICB9O1xufTtcblxudmFyIHdpdGhTdGF0ZUhhbmRsZXJzID0gZnVuY3Rpb24gd2l0aFN0YXRlSGFuZGxlcnMoaW5pdGlhbFN0YXRlLCBzdGF0ZVVwZGF0ZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGVIYW5kbGVycyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoU3RhdGVIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhTdGF0ZUhhbmRsZXJzKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZUhhbmRsZXJzKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHZhciBwcm9wc0NoYW5nZWQgPSBuZXh0UHJvcHMgIT09IHRoaXMucHJvcHM7XG4gICAgICAgIC8vIHRoZSBpZGVhIGlzIHRvIHNraXAgcmVuZGVyIGlmIHN0YXRlVXBkYXRlciBoYW5kbGVyIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdG8gY3JlYXRlIG5vIHN0YXRlIHVwZGF0ZSBoYW5kbGVycyB3aXRoIGFjY2VzcyB0byBzdGF0ZSBhbmQgcHJvcHNcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFzaGFsbG93RXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHByb3BzQ2hhbmdlZCB8fCBzdGF0ZUNoYW5nZWQ7XG4gICAgICB9O1xuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSwgdGhpcy5zdGF0ZVVwZGF0ZXJzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aFN0YXRlSGFuZGxlcnM7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgdmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgdGhpcy5zdGF0ZVVwZGF0ZXJzID0gbWFwVmFsdWVzKHN0YXRlVXBkYXRlcnMsIGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobWF5QmVFdmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSGF2aW5nIHRoYXQgZnVuY3Rpb25hbCBmb3JtIG9mIHNldFN0YXRlIGNhbiBiZSBjYWxsZWQgYXN5bmNcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHBlcnNpc3QgU3ludGhldGljRXZlbnRcbiAgICAgICAgICBpZiAobWF5QmVFdmVudCAmJiB0eXBlb2YgbWF5QmVFdmVudC5wZXJzaXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXlCZUV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlLCBwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoc3RhdGUsIHByb3BzKS5hcHBseSh1bmRlZmluZWQsIFttYXlCZUV2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoU3RhdGVIYW5kbGVycycpKShXaXRoU3RhdGVIYW5kbGVycyk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoU3RhdGVIYW5kbGVycztcbiAgfTtcbn07XG5cbnZhciB3aXRoUmVkdWNlciA9IGZ1bmN0aW9uIHdpdGhSZWR1Y2VyKHN0YXRlTmFtZSwgZGlzcGF0Y2hOYW1lLCByZWR1Y2VyLCBpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhSZWR1Y2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhSZWR1Y2VyLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFJlZHVjZXIoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aFJlZHVjZXIpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHN0YXRlVmFsdWU6IF90aGlzLmluaXRpYWxpemVTdGF0ZVZhbHVlKClcbiAgICAgICAgfSwgX3RoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGVWYWx1ZSA9IF9yZWYuc3RhdGVWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN0YXRlVmFsdWU6IHJlZHVjZXIoc3RhdGVWYWx1ZSwgYWN0aW9uKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aFJlZHVjZXIucHJvdG90eXBlLmluaXRpYWxpemVTdGF0ZVZhbHVlID0gZnVuY3Rpb24gaW5pdGlhbGl6ZVN0YXRlVmFsdWUoKSB7XG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiAnQEByZWNvbXBvc2UvSU5JVCcgfSk7XG4gICAgICB9O1xuXG4gICAgICBXaXRoUmVkdWNlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbZGlzcGF0Y2hOYW1lXSA9IHRoaXMuZGlzcGF0Y2gsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUmVkdWNlcjtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFJlZHVjZXInKSkoV2l0aFJlZHVjZXIpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJlZHVjZXI7XG4gIH07XG59O1xuXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eShDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIENvbXBvbmVudCQkMTtcbn07XG5cbnZhciBicmFuY2ggPSBmdW5jdGlvbiBicmFuY2godGVzdCwgbGVmdCkge1xuICB2YXIgcmlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGlkZW50aXR5O1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgbGVmdEZhY3RvcnkgPSB2b2lkIDA7XG4gICAgdmFyIHJpZ2h0RmFjdG9yeSA9IHZvaWQgMDtcbiAgICB2YXIgQnJhbmNoID0gZnVuY3Rpb24gQnJhbmNoKHByb3BzKSB7XG4gICAgICBpZiAodGVzdChwcm9wcykpIHtcbiAgICAgICAgbGVmdEZhY3RvcnkgPSBsZWZ0RmFjdG9yeSB8fCBjcmVhdGVGYWN0b3J5KGxlZnQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgICByZXR1cm4gbGVmdEZhY3RvcnkocHJvcHMpO1xuICAgICAgfVxuICAgICAgcmlnaHRGYWN0b3J5ID0gcmlnaHRGYWN0b3J5IHx8IGNyZWF0ZUZhY3RvcnkocmlnaHQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgcmV0dXJuIHJpZ2h0RmFjdG9yeShwcm9wcyk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdicmFuY2gnKSkoQnJhbmNoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJyYW5jaDtcbiAgfTtcbn07XG5cbnZhciByZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiByZW5kZXJDb21wb25lbnQoQ29tcG9uZW50JCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoXykge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShDb21wb25lbnQkJDEpO1xuICAgIHZhciBSZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiBSZW5kZXJDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZW5kZXJDb21wb25lbnQuZGlzcGxheU5hbWUgPSB3cmFwRGlzcGxheU5hbWUoQ29tcG9uZW50JCQxLCAncmVuZGVyQ29tcG9uZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgTm90aGluZyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKE5vdGhpbmcsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vdGhpbmcoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aGluZyk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE5vdGhpbmcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTm90aGluZztcbn0oQ29tcG9uZW50KTtcblxudmFyIHJlbmRlck5vdGhpbmcgPSBmdW5jdGlvbiByZW5kZXJOb3RoaW5nKF8pIHtcbiAgcmV0dXJuIE5vdGhpbmc7XG59O1xuXG52YXIgc2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkVXBkYXRlKHRlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhTaG91bGRVcGRhdGUsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTaG91bGRVcGRhdGUoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3VsZFVwZGF0ZSk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIFNob3VsZFVwZGF0ZS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGVzdCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgU2hvdWxkVXBkYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFNob3VsZFVwZGF0ZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnc2hvdWxkVXBkYXRlJykpKFNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gc2hvdWxkVXBkYXRlKGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcyk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncHVyZScpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICB9XG5cbiAgcmV0dXJuIGhvYyhCYXNlQ29tcG9uZW50KTtcbn07XG5cbnZhciBvbmx5VXBkYXRlRm9yS2V5cyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JLZXlzKHByb3BLZXlzKSB7XG4gIHZhciBob2MgPSBzaG91bGRVcGRhdGUoZnVuY3Rpb24gKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKG5leHRQcm9wcywgcHJvcEtleXMpLCBwaWNrKHByb3BzLCBwcm9wS2V5cykpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvcktleXMnKSkoaG9jKEJhc2VDb21wb25lbnQpKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBob2M7XG59O1xuXG52YXIgb25seVVwZGF0ZUZvclByb3BUeXBlcyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JQcm9wVHlwZXMoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgcHJvcFR5cGVzID0gQmFzZUNvbXBvbmVudC5wcm9wVHlwZXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BUeXBlcykge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0EgY29tcG9uZW50IHdpdGhvdXQgYW55IGBwcm9wVHlwZXNgIHdhcyBwYXNzZWQgdG8gJyArICdgb25seVVwZGF0ZUZvclByb3BUeXBlcygpYC4gQ2hlY2sgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSAnICsgKCdjb21wb25lbnQgd2l0aCBkaXNwbGF5IG5hbWUgXCInICsgZ2V0RGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCkgKyAnXCIuJykpO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BUeXBlcyB8fCB7fSk7XG4gIHZhciBPbmx5VXBkYXRlRm9yUHJvcFR5cGVzID0gb25seVVwZGF0ZUZvcktleXMocHJvcEtleXMpKEJhc2VDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvclByb3BUeXBlcycpKShPbmx5VXBkYXRlRm9yUHJvcFR5cGVzKTtcbiAgfVxuICByZXR1cm4gT25seVVwZGF0ZUZvclByb3BUeXBlcztcbn07XG5cbnZhciB3aXRoQ29udGV4dCA9IGZ1bmN0aW9uIHdpdGhDb250ZXh0KGNoaWxkQ29udGV4dFR5cGVzLCBnZXRDaGlsZENvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhDb250ZXh0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhDb250ZXh0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aENvbnRleHQpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRDb250ZXh0KF90aGlzLnByb3BzKTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aENvbnRleHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aENvbnRleHQ7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgV2l0aENvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoQ29udGV4dCcpKShXaXRoQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoQ29udGV4dDtcbiAgfTtcbn07XG5cbnZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChjb250ZXh0VHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBHZXRDb250ZXh0ID0gZnVuY3Rpb24gR2V0Q29udGV4dChvd25lclByb3BzLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgb3duZXJQcm9wcywgY29udGV4dCkpO1xuICAgIH07XG5cbiAgICBHZXRDb250ZXh0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdnZXRDb250ZXh0JykpKEdldENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gR2V0Q29udGV4dDtcbiAgfTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciBsaWZlY3ljbGUgPSBmdW5jdGlvbiBsaWZlY3ljbGUoc3BlYykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzcGVjLmhhc093blByb3BlcnR5KCdyZW5kZXInKSkge1xuICAgICAgY29uc29sZS5lcnJvcignbGlmZWN5Y2xlKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVuZGVyIG1ldGhvZDsgaXRzIGJlaGF2aW9yIGlzIHRvICcgKyAncGFzcyBhbGwgcHJvcHMgYW5kIHN0YXRlIHRvIHRoZSBiYXNlIGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICB2YXIgTGlmZWN5Y2xlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKExpZmVjeWNsZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlmZWN5Y2xlKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgTGlmZWN5Y2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gTGlmZWN5Y2xlO1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIE9iamVjdC5rZXlzKHNwZWMpLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgIHJldHVybiBMaWZlY3ljbGUucHJvdG90eXBlW2hvb2tdID0gc3BlY1tob29rXTtcbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdsaWZlY3ljbGUnKSkoTGlmZWN5Y2xlKTtcbiAgICB9XG4gICAgcmV0dXJuIExpZmVjeWNsZTtcbiAgfTtcbn07XG5cbnZhciBpc0NsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudChDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIEJvb2xlYW4oQ29tcG9uZW50JCQxICYmIENvbXBvbmVudCQkMS5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudCQkMS5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKTtcbn07XG5cbnZhciB0b0NsYXNzID0gZnVuY3Rpb24gdG9DbGFzcyhiYXNlQ29tcG9uZW50KSB7XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KGJhc2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGJhc2VDb21wb25lbnQ7XG4gIH1cblxuICB2YXIgVG9DbGFzcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoVG9DbGFzcywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBUb0NsYXNzKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9DbGFzcyk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFRvQ2xhc3MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZUNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoYmFzZUNvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVG9DbGFzcztcbiAgfShDb21wb25lbnQpO1xuXG4gIFRvQ2xhc3MuZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShiYXNlQ29tcG9uZW50KTtcbiAgVG9DbGFzcy5wcm9wVHlwZXMgPSBiYXNlQ29tcG9uZW50LnByb3BUeXBlcztcbiAgVG9DbGFzcy5jb250ZXh0VHlwZXMgPSBiYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgVG9DbGFzcy5kZWZhdWx0UHJvcHMgPSBiYXNlQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcblxuICByZXR1cm4gVG9DbGFzcztcbn07XG5cbnZhciBzZXRQcm9wVHlwZXMgPSBmdW5jdGlvbiBzZXRQcm9wVHlwZXMocHJvcFR5cGVzKSB7XG4gIHJldHVybiBzZXRTdGF0aWMoJ3Byb3BUeXBlcycsIHByb3BUeXBlcyk7XG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG52YXIgY3JlYXRlU2luayA9IGZ1bmN0aW9uIGNyZWF0ZVNpbmsoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoU2luaywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTaW5rKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2luayk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFNpbmsucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMucHJvcHMpO1xuICAgIH07XG5cbiAgICBTaW5rLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGNhbGxiYWNrKG5leHRQcm9wcyk7XG4gICAgfTtcblxuICAgIFNpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2luaztcbiAgfShDb21wb25lbnQpO1xufTtcblxudmFyIGNvbXBvbmVudEZyb21Qcm9wID0gZnVuY3Rpb24gY29tcG9uZW50RnJvbVByb3AocHJvcE5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCQkMSA9IGZ1bmN0aW9uIENvbXBvbmVudCQkMShwcm9wcykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzW3Byb3BOYW1lXSwgb21pdChwcm9wcywgW3Byb3BOYW1lXSkpO1xuICB9O1xuICBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgPSAnY29tcG9uZW50RnJvbVByb3AoJyArIHByb3BOYW1lICsgJyknO1xuICByZXR1cm4gQ29tcG9uZW50JCQxO1xufTtcblxudmFyIG5lc3QgPSBmdW5jdGlvbiBuZXN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ29tcG9uZW50cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIENvbXBvbmVudHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgZmFjdG9yaWVzID0gQ29tcG9uZW50cy5tYXAoY3JlYXRlRmFjdG9yeSk7XG4gIHZhciBOZXN0ID0gZnVuY3Rpb24gTmVzdChfcmVmKSB7XG4gICAgdmFyIHByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW10pLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gICAgcmV0dXJuIGZhY3Rvcmllcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY2hpbGQsIGZhY3RvcnkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzLCBjaGlsZCk7XG4gICAgfSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lcyA9IENvbXBvbmVudHMubWFwKGdldERpc3BsYXlOYW1lKTtcbiAgICBOZXN0LmRpc3BsYXlOYW1lID0gJ25lc3QoJyArIGRpc3BsYXlOYW1lcy5qb2luKCcsICcpICsgJyknO1xuICB9XG5cbiAgcmV0dXJuIE5lc3Q7XG59O1xuXG52YXIgaG9pc3RTdGF0aWNzID0gZnVuY3Rpb24gaG9pc3RTdGF0aWNzKGhpZ2hlck9yZGVyQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBOZXdDb21wb25lbnQgPSBoaWdoZXJPcmRlckNvbXBvbmVudChCYXNlQ29tcG9uZW50KTtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhOZXdDb21wb25lbnQsIEJhc2VDb21wb25lbnQpO1xuICAgIHJldHVybiBOZXdDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgX2NvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogbnVsbCxcbiAgdG9FU09ic2VydmFibGU6IG51bGxcbn07XG5cbnZhciBjb25maWd1cmVPYnNlcnZhYmxlID0gZnVuY3Rpb24gY29uZmlndXJlT2JzZXJ2YWJsZShjKSB7XG4gIF9jb25maWcgPSBjO1xufTtcblxudmFyIGNvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogZnVuY3Rpb24gZnJvbUVTT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLmZyb21FU09ic2VydmFibGUgPT09ICdmdW5jdGlvbicgPyBfY29uZmlnLmZyb21FU09ic2VydmFibGUob2JzZXJ2YWJsZSkgOiBvYnNlcnZhYmxlO1xuICB9LFxuICB0b0VTT2JzZXJ2YWJsZTogZnVuY3Rpb24gdG9FU09ic2VydmFibGUoc3RyZWFtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLnRvRVNPYnNlcnZhYmxlID09PSAnZnVuY3Rpb24nID8gX2NvbmZpZy50b0VTT2JzZXJ2YWJsZShzdHJlYW0pIDogc3RyZWFtO1xuICB9XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcgPSBmdW5jdGlvbiBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wc1RvVmRvbSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoQ29tcG9uZW50RnJvbVN0cmVhbSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbXBvbmVudEZyb21TdHJlYW0oKSB7XG4gICAgICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnRGcm9tU3RyZWFtKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgdmRvbTogbnVsbCB9LCBfdGhpcy5wcm9wc0VtaXR0ZXIgPSBjcmVhdGVDaGFuZ2VFbWl0dGVyKCksIF90aGlzLnByb3BzJCA9IGNvbmZpZyQkMS5mcm9tRVNPYnNlcnZhYmxlKChfY29uZmlnJGZyb21FU09ic2VydmEgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciB1bnN1YnNjcmliZSA9IF90aGlzLnByb3BzRW1pdHRlci5saXN0ZW4oZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocHJvcHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY29uZmlnJGZyb21FU09ic2VydmFbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSksIF90aGlzLnZkb20kID0gY29uZmlnJCQxLnRvRVNPYnNlcnZhYmxlKHByb3BzVG9WZG9tKF90aGlzLnByb3BzJCkpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdHJlYW0gb2YgcHJvcHNcblxuXG4gICAgICAvLyBTdHJlYW0gb2YgdmRvbVxuXG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIGNoaWxkIHByb3AgY2hhbmdlcyBzbyB3ZSBrbm93IHdoZW4gdG8gcmUtcmVuZGVyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy52ZG9tJC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmRvbSkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmRvbTogdmRvbSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3BzRW1pdHRlci5lbWl0KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29tcG9uZW50RnJvbVN0cmVhbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIC8vIFJlY2VpdmUgbmV3IHByb3BzIGZyb20gdGhlIG93bmVyXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQobmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV4dFN0YXRlLnZkb20gIT09IHRoaXMuc3RhdGUudmRvbTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIC8vIENhbGwgd2l0aG91dCBhcmd1bWVudHMgdG8gY29tcGxldGUgc3RyZWFtXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQoKTtcblxuICAgICAgICAvLyBDbGVhbi11cCBzdWJzY3JpcHRpb24gYmVmb3JlIHVuLW1vdW50aW5nXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb21wb25lbnRGcm9tU3RyZWFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnZkb207XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29tcG9uZW50RnJvbVN0cmVhbTtcbiAgICB9KENvbXBvbmVudCk7XG4gIH07XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbSA9IGZ1bmN0aW9uIGNvbXBvbmVudEZyb21TdHJlYW0ocHJvcHNUb1Zkb20pIHtcbiAgcmV0dXJuIGNvbXBvbmVudEZyb21TdHJlYW1XaXRoQ29uZmlnKGNvbmZpZykocHJvcHNUb1Zkb20pO1xufTtcblxudmFyIGlkZW50aXR5JDEgPSBmdW5jdGlvbiBpZGVudGl0eSh0KSB7XG4gIHJldHVybiB0O1xufTtcblxudmFyIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyA9IGZ1bmN0aW9uIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgdmFyIGNvbXBvbmVudEZyb21TdHJlYW0gPSBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyh7XG4gICAgZnJvbUVTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMSxcbiAgICB0b0VTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICAgIHZhciBmcm9tRVNPYnNlcnZhYmxlID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUsXG4gICAgICAgICAgdG9FU09ic2VydmFibGUgPSBjb25maWckJDEudG9FU09ic2VydmFibGU7XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRGcm9tU3RyZWFtKGZ1bmN0aW9uIChwcm9wcyQpIHtcbiAgICAgICAgdmFyIF9yZWY7XG5cbiAgICAgICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0b0VTT2JzZXJ2YWJsZSh0cmFuc2Zvcm0oZnJvbUVTT2JzZXJ2YWJsZShwcm9wcyQpKSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChjaGlsZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQoZmFjdG9yeShjaGlsZFByb3BzKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX3JlZjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59O1xuXG52YXIgbWFwUHJvcHNTdHJlYW0gPSBmdW5jdGlvbiBtYXBQcm9wc1N0cmVhbSh0cmFuc2Zvcm0pIHtcbiAgdmFyIGhvYyA9IG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWcpKHRyYW5zZm9ybSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ21hcFByb3BzU3RyZWFtJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGNyZWF0ZUV2ZW50SGFuZGxlcldpdGhDb25maWcgPSBmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyQkMSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICB2YXIgZW1pdHRlciA9IGNyZWF0ZUNoYW5nZUVtaXR0ZXIoKTtcbiAgICB2YXIgc3RyZWFtID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUoKF9jb25maWckZnJvbUVTT2JzZXJ2YSA9IHtcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IGVtaXR0ZXIubGlzdGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9jb25maWckZnJvbUVTT2JzZXJ2YVskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmRsZXI6IGVtaXR0ZXIuZW1pdCxcbiAgICAgIHN0cmVhbTogc3RyZWFtXG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVFdmVudEhhbmRsZXIgPSBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyk7XG5cbi8vIEhpZ2hlci1vcmRlciBjb21wb25lbnQgaGVscGVyc1xuXG5leHBvcnQgeyBtYXBQcm9wcywgd2l0aFByb3BzLCB3aXRoUHJvcHNPbkNoYW5nZSwgd2l0aEhhbmRsZXJzLCBkZWZhdWx0UHJvcHMsIHJlbmFtZVByb3AsIHJlbmFtZVByb3BzLCBmbGF0dGVuUHJvcCwgd2l0aFN0YXRlLCB3aXRoU3RhdGVIYW5kbGVycywgd2l0aFJlZHVjZXIsIGJyYW5jaCwgcmVuZGVyQ29tcG9uZW50LCByZW5kZXJOb3RoaW5nLCBzaG91bGRVcGRhdGUsIHB1cmUsIG9ubHlVcGRhdGVGb3JLZXlzLCBvbmx5VXBkYXRlRm9yUHJvcFR5cGVzLCB3aXRoQ29udGV4dCwgZ2V0Q29udGV4dCwgbGlmZWN5Y2xlLCB0b0NsYXNzLCBzZXRTdGF0aWMsIHNldFByb3BUeXBlcywgc2V0RGlzcGxheU5hbWUsIGNvbXBvc2UsIGdldERpc3BsYXlOYW1lLCB3cmFwRGlzcGxheU5hbWUsIHNoYWxsb3dFcXVhbCwgaXNDbGFzc0NvbXBvbmVudCwgY3JlYXRlU2luaywgY29tcG9uZW50RnJvbVByb3AsIG5lc3QsIGhvaXN0U3RhdGljcywgY29tcG9uZW50RnJvbVN0cmVhbSwgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcsIG1hcFByb3BzU3RyZWFtLCBtYXBQcm9wc1N0cmVhbVdpdGhDb25maWcsIGNyZWF0ZUV2ZW50SGFuZGxlciwgY3JlYXRlRXZlbnRIYW5kbGVyV2l0aENvbmZpZywgY29uZmlndXJlT2JzZXJ2YWJsZSBhcyBzZXRPYnNlcnZhYmxlQ29uZmlnIH07XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzOTU1YWM5YzcxZWVmNTI1ZTRmZTc0NjYwNTJkMzI1My5wbmdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBDaGFyYWN0ZXIgPSAoeyBjb250ZW50IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJMaXN0LUl0ZW1cIj5cclxuICAgICAgPGltZyBhbHQ9e2NvbnRlbnQubmFtZX0gc3JjPXtjb250ZW50LmltYWdlfSAvPlxyXG4gICAgICA8aDM+e2NvbnRlbnQubmFtZX08L2gzPlxyXG4gICAgICA8cD5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPlNwZWNpZXM8L3NwYW4+XHJcbiAgICAgICAge2NvbnRlbnQuc3BlY2llc31cclxuICAgICAgPC9wPlxyXG4gICAgICA8cD5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPk9yaWdpbjwvc3Bhbj5cclxuICAgICAgICB7Y29udGVudC5vcmlnaW4ubmFtZX1cclxuICAgICAgPC9wPlxyXG4gICAgICA8cD5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPkxvY2F0aW9uPC9zcGFuPlxyXG4gICAgICAgIHtjb250ZW50LmxvY2F0aW9uLm5hbWV9XHJcbiAgICAgIDwvcD5cclxuICAgICAgPHA+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGl0bGVcIj5TdGF0dXM8L3NwYW4+XHJcbiAgICAgICAge2NvbnRlbnQuc3RhdHVzfVxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlXCI+R2VuZGVyPC9zcGFuPlxyXG4gICAgICAgIHtjb250ZW50LmdlbmRlcn1cclxuICAgICAgPC9wPlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaGFyYWN0ZXJcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBQcm9wb2dhdGVMb2FkZXIgfSBmcm9tICdyZWFjdC1zcGlubmVycydcclxuaW1wb3J0IENoYXJhY3RlciBmcm9tICcuL0NoYXJhY3RlcidcclxuXHJcbmNsYXNzIENoYXJhY3RlcnMgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBkYXRhOiBbXSxcclxuICAgICAgcGFnZU51bWJlcjogMlxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZmV0Y2hDaGFyYWN0ZXJzID0gdGhpcy5mZXRjaENoYXJhY3RlcnMuYmluZCh0aGlzKVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xyXG4gICAgdGhpcy5mZXRjaENoYXJhY3RlcnMoKVxyXG4gIH1cclxuXHJcbiAgZmV0Y2hDaGFyYWN0ZXJzICgpIHtcclxuICAgIGZldGNoKGBodHRwczovL3JpY2thbmRtb3J0eWFwaS5jb20vYXBpL2NoYXJhY3Rlci9gKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgcmVzdWx0cyB9ID0gZGF0YVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgZGF0YTogcmVzdWx0c1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICBuZXh0UGFnZSAocGFnZU51bWJlcikge1xyXG4gICAgZmV0Y2goYGh0dHBzOi8vcmlja2FuZG1vcnR5YXBpLmNvbS9hcGkvY2hhcmFjdGVyP3BhZ2U9JHtwYWdlTnVtYmVyfWApXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyByZXN1bHRzIH0gPSBkYXRhXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShwcmV2U3RhdGUgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGF0YTogcHJldlN0YXRlLmRhdGEuY29uY2F0KHJlc3VsdHMpLFxyXG4gICAgICAgICAgICBwYWdlTnVtYmVyOiBwcmV2U3RhdGUucGFnZU51bWJlciArIDFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIGxldCBvdXRwdXRcclxuICAgIGlmICghdGhpcy5zdGF0ZS5kYXRhKSB7XHJcbiAgICAgIG91dHB1dCA9IChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkxpc3QtQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8aDI+TGlrZSB3aGF0IHlvdSBzZWU/IFdhdGNoIHRoZSBlbnRpcmUgc2hvdyBvbiBOZXRmbGl4ITwvaDI+XHJcbiAgICAgICAgICA8UHJvcG9nYXRlTG9hZGVyIHNpemU9ezI1fSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvdXRwdXQgPSAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJMaXN0LUNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGgyPkxpa2Ugd2hhdCB5b3Ugc2VlPyBXYXRjaCB0aGUgZW50aXJlIHNob3cgb24gTmV0ZmxpeCE8L2gyPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJMaXN0LUdyaWRcIj5cclxuICAgICAgICAgICAge3RoaXMuc3RhdGUuZGF0YS5tYXAoY2hhcmFjdGVyID0+IDxDaGFyYWN0ZXIgY29udGVudD17Y2hhcmFjdGVyfSBrZXk9e2NoYXJhY3Rlci5pZH0gLz4pfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMubmV4dFBhZ2UuYmluZCh0aGlzLCB0aGlzLnN0YXRlLnBhZ2VOdW1iZXIpfT5TaG93IE1vcmU8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDxkaXY+e291dHB1dH08L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoYXJhY3RlcnNcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuY29uc3QgRXBpc29kZSA9ICh7IGNvbnRlbnQgfSkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIkxpc3QtSXRlbVwiPlxyXG4gICAgICA8aDM+e2NvbnRlbnQubmFtZX08L2gzPlxyXG4gICAgICA8cD5cclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0aXRsZVwiPkFpciBEYXRlPC9zcGFuPlxyXG4gICAgICAgIHtjb250ZW50LmFpcl9kYXRlfVxyXG4gICAgICA8L3A+XHJcbiAgICAgIDxwPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpdGxlXCI+RXBpc29kZTwvc3Bhbj5cclxuICAgICAgICB7Y29udGVudC5lcGlzb2RlfVxyXG4gICAgICA8L3A+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVwaXNvZGVcclxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBQcm9wb2dhdGVMb2FkZXIgfSBmcm9tICdyZWFjdC1zcGlubmVycydcclxuaW1wb3J0IEVwaXNvZGUgZnJvbSAnLi9FcGlzb2RlJ1xyXG5jbGFzcyBFcGlzb2RlcyBleHRlbmRzIENvbXBvbmVudCB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGRhdGE6IFtdLFxyXG4gICAgICBwYWdlTnVtYmVyOiAyXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5mZXRjaEVwaXNvZGVzID0gdGhpcy5mZXRjaEVwaXNvZGVzLmJpbmQodGhpcylcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcclxuICAgIHRoaXMuZmV0Y2hFcGlzb2RlcygpXHJcbiAgfVxyXG5cclxuICBmZXRjaEVwaXNvZGVzICgpIHtcclxuICAgIGZldGNoKGBodHRwczovL3JpY2thbmRtb3J0eWFwaS5jb20vYXBpL2VwaXNvZGUvYClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICBjb25zdCB7IHJlc3VsdHMgfSA9IGRhdGFcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgIGRhdGE6IHJlc3VsdHNcclxuICAgICAgICB9KVxyXG4gICAgICB9KVxyXG4gIH1cclxuXHJcbiAgbmV4dFBhZ2UgKHBhZ2VOdW1iZXIpIHtcclxuICAgIGZldGNoKGBodHRwczovL3JpY2thbmRtb3J0eWFwaS5jb20vYXBpL2VwaXNvZGU/cGFnZT0ke3BhZ2VOdW1iZXJ9YClcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxyXG4gICAgICAudGhlbihkYXRhID0+IHtcclxuICAgICAgICBjb25zdCB7IHJlc3VsdHMgfSA9IGRhdGFcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHByZXZTdGF0ZSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkYXRhOiBwcmV2U3RhdGUuZGF0YS5jb25jYXQocmVzdWx0cyksXHJcbiAgICAgICAgICAgIHBhZ2VOdW1iZXI6IHByZXZTdGF0ZS5wYWdlTnVtYmVyICsgMVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgfVxyXG5cclxuICByZW5kZXIgKCkge1xyXG4gICAgbGV0IG91dHB1dFxyXG4gICAgaWYgKCF0aGlzLnN0YXRlLmRhdGEpIHtcclxuICAgICAgb3V0cHV0ID0gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTGlzdC1Db250YWluZXJcIj5cclxuICAgICAgICAgIDxoMj5MaWtlIHdoYXQgeW91IHNlZT8gV2F0Y2ggdGhlIGVudGlyZSBzaG93IG9uIE5ldGZsaXghPC9oMj5cclxuICAgICAgICAgIDxQcm9wb2dhdGVMb2FkZXIgc2l6ZT17MjV9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dHB1dCA9IChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkxpc3QtQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8aDI+TGlrZSB3aGF0IHlvdSBzZWU/IFdhdGNoIHRoZSBlbnRpcmUgc2hvdyBvbiBOZXRmbGl4ITwvaDI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIkxpc3QtR3JpZFwiPlxyXG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5kYXRhLm1hcChlcGlzb2RlID0+IDxFcGlzb2RlIGNvbnRlbnQ9e2VwaXNvZGV9IGtleT17ZXBpc29kZS5pZH0gLz4pfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMubmV4dFBhZ2UuYmluZCh0aGlzLCB0aGlzLnN0YXRlLnBhZ2VOdW1iZXIpfT5TaG93IE1vcmU8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDxkaXY+e291dHB1dH08L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEVwaXNvZGVzXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuXHJcbmNvbnN0IEhvbWUgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiSG9tZVwiPlxyXG4gICAgICA8aDI+XHJcbiAgICAgICAgV2VsY29tZSB0byBNb3J0eXBlZGlhLCB0aGUgaG9tZSBvZiBldmVyeXRoaW5nIFJpY2sgYW5kIE1vcnR5ISBGZWVsIGZyZWUgdG8gbG9vayBhcm91bmQgYXQgdGhlIGNoYXJhY3RlcnMsXHJcbiAgICAgICAgbG9jYXRpb25zLCBhbmQgZXBpc29kZXMuXHJcbiAgICAgIDwvaDI+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEhvbWVcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5cclxuY29uc3QgTG9jYXRpb24gPSAoeyBjb250ZW50IH0pID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJMaXN0LUl0ZW1cIj5cclxuICAgICAgPGgzPntjb250ZW50Lm5hbWV9PC9oMz5cclxuICAgICAgPHA+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGl0bGVcIj5UeXBlPC9zcGFuPlxyXG4gICAgICAgIHtjb250ZW50LnR5cGV9XHJcbiAgICAgIDwvcD5cclxuICAgICAgPHA+XHJcbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGl0bGVcIj5EaW1lbnNpb248L3NwYW4+XHJcbiAgICAgICAge2NvbnRlbnQuZGltZW5zaW9ufVxyXG4gICAgICA8L3A+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgUHJvcG9nYXRlTG9hZGVyIH0gZnJvbSAncmVhY3Qtc3Bpbm5lcnMnXHJcbmltcG9ydCBMb2NhdGlvbiBmcm9tICcuL0xvY2F0aW9uJ1xyXG5cclxuY2xhc3MgTG9jYXRpb25zIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKVxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgZGF0YTogW10sXHJcbiAgICAgIHBhZ2VOdW1iZXI6IDJcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmZldGNoTG9jYXRpb25zID0gdGhpcy5mZXRjaExvY2F0aW9ucy5iaW5kKHRoaXMpXHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XHJcbiAgICB0aGlzLmZldGNoTG9jYXRpb25zKClcclxuICB9XHJcblxyXG4gIGZldGNoTG9jYXRpb25zICgpIHtcclxuICAgIGZldGNoKGBodHRwczovL3JpY2thbmRtb3J0eWFwaS5jb20vYXBpL2xvY2F0aW9uL2ApXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyByZXN1bHRzIH0gPSBkYXRhXHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICBkYXRhOiByZXN1bHRzXHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIG5leHRQYWdlIChwYWdlTnVtYmVyKSB7XHJcbiAgICBmZXRjaChgaHR0cHM6Ly9yaWNrYW5kbW9ydHlhcGkuY29tL2FwaS9sb2NhdGlvbj9wYWdlPSR7cGFnZU51bWJlcn1gKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAgIC50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgcmVzdWx0cyB9ID0gZGF0YVxyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUocHJldlN0YXRlID0+IHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRhdGE6IHByZXZTdGF0ZS5kYXRhLmNvbmNhdChyZXN1bHRzKSxcclxuICAgICAgICAgICAgcGFnZU51bWJlcjogcHJldlN0YXRlLnBhZ2VOdW1iZXIgKyAxXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICBsZXQgb3V0cHV0XHJcbiAgICBpZiAodGhpcy5zdGF0ZS5kYXRhID09PSBbXSkge1xyXG4gICAgICBvdXRwdXQgPSAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJMaXN0LUNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGgyPkxpa2Ugd2hhdCB5b3Ugc2VlPyBXYXRjaCB0aGUgZW50aXJlIHNob3cgb24gTmV0ZmxpeCE8L2gyPlxyXG4gICAgICAgICAgPFByb3BvZ2F0ZUxvYWRlciBzaXplPXsyNX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb3V0cHV0ID0gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTGlzdC1Db250YWluZXJcIj5cclxuICAgICAgICAgIDxoMj5MaWtlIHdoYXQgeW91IHNlZT8gV2F0Y2ggdGhlIGVudGlyZSBzaG93IG9uIE5ldGZsaXghPC9oMj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTGlzdC1HcmlkXCI+XHJcbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLmRhdGEubWFwKGxvY2F0aW9uID0+IDxMb2NhdGlvbiBjb250ZW50PXtsb2NhdGlvbn0ga2V5PXtsb2NhdGlvbi5pZH0gLz4pfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMubmV4dFBhZ2UuYmluZCh0aGlzLCB0aGlzLnN0YXRlLnBhZ2VOdW1iZXIpfT5TaG93IE1vcmU8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDxkaXY+e291dHB1dH08L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvY2F0aW9uc1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5cclxuY29uc3QgTmF2YmFyID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8aGVhZGVyPlxyXG4gICAgICA8aDE+TW9ydHlwZWRpYTwvaDE+XHJcbiAgICAgIDxuYXY+XHJcbiAgICAgICAgPGxpPlxyXG4gICAgICAgICAgPExpbmsgdG89XCIvXCI+SG9tZTwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICAgIDxsaT5cclxuICAgICAgICAgIDxMaW5rIHRvPVwiL2NoYXJhY3RlcnNcIj5DaGFyYWN0ZXJzPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgICAgPGxpPlxyXG4gICAgICAgICAgPExpbmsgdG89XCIvbG9jYXRpb25zXCI+TG9jYXRpb25zPC9MaW5rPlxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgICAgPGxpPlxyXG4gICAgICAgICAgPExpbmsgdG89XCIvZXBpc29kZXNcIj5FcGlzb2RlczwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICA8L25hdj5cclxuICAgIDwvaGVhZGVyPlxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmF2YmFyXHJcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xyXG5pbXBvcnQgSG9tZSBmcm9tICcuLi9jb21wb25lbnRzL0hvbWUnXHJcbmltcG9ydCBOYXZiYXIgZnJvbSAnLi4vY29tcG9uZW50cy9OYXZiYXInXHJcbmltcG9ydCBDaGFyYWN0ZXJzIGZyb20gJy4uL2NvbXBvbmVudHMvQ2hhcmFjdGVycydcclxuaW1wb3J0IExvY2F0aW9ucyBmcm9tICcuLi9jb21wb25lbnRzL0xvY2F0aW9ucydcclxuaW1wb3J0IEVwaXNvZGVzIGZyb20gJy4uL2NvbXBvbmVudHMvRXBpc29kZXMnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8QnJvd3NlclJvdXRlcj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPE5hdmJhciAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lfSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY2hhcmFjdGVyc1wiIGNvbXBvbmVudD17Q2hhcmFjdGVyc30gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2xvY2F0aW9uc1wiIGNvbXBvbmVudD17TG9jYXRpb25zfSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvZXBpc29kZXNcIiBjb21wb25lbnQ9e0VwaXNvZGVzfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0Jyb3dzZXJSb3V0ZXI+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcclxuaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zdHlsJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vY29udGFpbmVycy9BcHAnXHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSlcclxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsdXMtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguc3R5bFwiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5zdHlsXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5zdHlsXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==