!function(e){function t(t){for(var n,r,o=t[0],a=t[1],i=0,s=[];i<o.length;i++)r=o[i],P[r]&&s.push(P[r][0]),P[r]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(M&&M(t);s.length;)s.shift()()}var n=window.webpackHotUpdate;window.webpackHotUpdate=function(e,t){!function(e,t){if(!x[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(m[n]=t[n]);0==--b&&0===v&&C()}(e,t),n&&n(e,t)};var r,o=!0,a="80b38089aff3cda9c678",i=1e4,s={},l=[],u=[];function c(e){var t=O[e];if(!t)return S;var n=function(n){return t.hot.active?(O[n]?-1===O[n].parents.indexOf(e)&&O[n].parents.push(e):(l=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),l=[]),S(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return S[e]},set:function(t){S[e]=t}}};for(var a in S)Object.prototype.hasOwnProperty.call(S,a)&&"e"!==a&&Object.defineProperty(n,a,o(a));return n.e=function(e){return"ready"===p&&d("prepare"),v++,S.e(e).then(t,function(e){throw t(),e});function t(){v--,"prepare"===p&&(g[e]||j(e),0===v&&0===b&&C())}},n}var f=[],p="idle";function d(e){p=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,m,y,b=0,v=0,g={},w={},x={};function _(e){return+e+""===e?+e:e}function k(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return o=e,d("check"),(t=i,t=t||1e4,new Promise(function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=S.p+""+a+".hot-update.json";r.open("GET",o,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}})).then(function(e){if(!e)return d("idle"),null;w={},g={},x=e.c,y=e.h,d("prepare");var t=new Promise(function(e,t){h={resolve:e,reject:t}});for(var n in m={},P)j(n);return"prepare"===p&&0===v&&0===b&&C(),t});var t}function j(e){x[e]?(w[e]=!0,b++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=S.p+""+e+"."+a+".hot-update.js",t.appendChild(n)}(e)):g[e]=!0}function C(){d("ready");var e=h;if(h=null,e)if(o)Promise.resolve().then(function(){return E(o)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in m)Object.prototype.hasOwnProperty.call(m,n)&&t.push(_(n));e.resolve(t)}}function E(t){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var n,r,o,i,u;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,s=o.chain;if((i=O[a])&&!i.hot._selfAccepted){if(i.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var l=0;l<i.parents.length;l++){var u=i.parents[l],c=O[u];if(c){if(c.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),f(n[u],[a])):(delete n[u],t.push(u),r.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var h={},b=[],v={},g=function(){console.warn("[HMR] unexpected require("+k.moduleId+") to disposed module")};for(var w in m)if(Object.prototype.hasOwnProperty.call(m,w)){var k;u=_(w);var j=!1,C=!1,E=!1,T="";switch((k=m[w]?c(u):{type:"disposed",moduleId:w}).chain&&(T="\nUpdate propagation: "+k.chain.join(" -> ")),k.type){case"self-declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(j=new Error("Aborted because of self decline: "+k.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(k),t.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+k.moduleId+" in "+k.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(k),t.ignoreUnaccepted||(j=new Error("Aborted because "+u+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(k),C=!0;break;case"disposed":t.onDisposed&&t.onDisposed(k),E=!0;break;default:throw new Error("Unexception type "+k.type)}if(j)return d("abort"),Promise.reject(j);if(C)for(u in v[u]=m[u],f(b,k.outdatedModules),k.outdatedDependencies)Object.prototype.hasOwnProperty.call(k.outdatedDependencies,u)&&(h[u]||(h[u]=[]),f(h[u],k.outdatedDependencies[u]));E&&(f(b,[k.moduleId]),v[u]=g)}var R,N=[];for(r=0;r<b.length;r++)u=b[r],O[u]&&O[u].hot._selfAccepted&&N.push({module:u,errorHandler:O[u].hot._selfAccepted});d("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&function(e){delete P[e]}(e)});for(var M,I,L=b.slice();L.length>0;)if(u=L.pop(),i=O[u]){var A={},z=i.hot._disposeHandlers;for(o=0;o<z.length;o++)(n=z[o])(A);for(s[u]=A,i.hot.active=!1,delete O[u],delete h[u],o=0;o<i.children.length;o++){var U=O[i.children[o]];U&&((R=U.parents.indexOf(u))>=0&&U.parents.splice(R,1))}}for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(i=O[u]))for(I=h[u],o=0;o<I.length;o++)M=I[o],(R=i.children.indexOf(M))>=0&&i.children.splice(R,1);for(u in d("apply"),a=y,v)Object.prototype.hasOwnProperty.call(v,u)&&(e[u]=v[u]);var F=null;for(u in h)if(Object.prototype.hasOwnProperty.call(h,u)&&(i=O[u])){I=h[u];var D=[];for(r=0;r<I.length;r++)if(M=I[r],n=i.hot._acceptedDependencies[M]){if(-1!==D.indexOf(n))continue;D.push(n)}for(r=0;r<D.length;r++){n=D[r];try{n(I)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:u,dependencyId:I[r],error:e}),t.ignoreErrored||F||(F=e)}}}for(r=0;r<N.length;r++){var H=N[r];u=H.module,l=[u];try{S(u)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:n,originalError:e}),t.ignoreErrored||F||(F=n),F||(F=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:u,error:e}),t.ignoreErrored||F||(F=e)}}return F?(d("fail"),Promise.reject(F)):(d("idle"),new Promise(function(e){e(b)}))}var O={},P={6:0};function S(t){if(O[t])return O[t].exports;var n=O[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:k,apply:E,status:function(e){if(!e)return p;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:s[e]};return r=void 0,t}(t),parents:(u=l,l=[],u),children:[]};return e[t].call(n.exports,n,n.exports,c(t)),n.l=!0,n.exports}S.e=function(e){var t=[],n=P[e];if(0!==n)if(n)t.push(n[2]);else{var r=new Promise(function(t,r){n=P[e]=[t,r]});t.push(n[2]=r);var o=document.getElementsByTagName("head")[0],a=document.createElement("script");a.charset="utf-8",a.timeout=120,S.nc&&a.setAttribute("nonce",S.nc),a.src=S.p+""+e+".bundle.js";var i=setTimeout(function(){s({type:"timeout",target:a})},12e4);function s(t){a.onerror=a.onload=null,clearTimeout(i);var n=P[e];if(0!==n){if(n){var r=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.src,s=new Error("Loading chunk "+e+" failed.\n("+r+": "+o+")");s.type=r,s.request=o,n[1](s)}P[e]=void 0}}a.onerror=a.onload=s,o.appendChild(a)}return Promise.all(t)},S.m=e,S.c=O,S.d=function(e,t,n){S.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},S.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},S.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return S.d(t,"a",t),t},S.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},S.p="",S.oe=function(e){throw console.error(e),e},S.h=function(){return a};var T=window.webpackJsonp=window.webpackJsonp||[],R=T.push.bind(T);T.push=t,T=T.slice();for(var N=0;N<T.length;N++)t(T[N]);var M=R;c("./src/index.js")(S.s="./src/index.js")}({"./node_modules/change-emitter/lib/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createChangeEmitter=function(){var e=[],t=e;function n(){t===e&&(t=e.slice())}return{listen:function(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var r=!0;return n(),t.push(e),function(){if(r){r=!1,n();var o=t.indexOf(e);t.splice(o,1)}}},emit:function(){for(var n=e=t,r=0;r<n.length;r++)n[r].apply(n,arguments)}}}},"./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl":function(e,t,n){var r=n("./node_modules/css-loader/lib/url/escape.js");(e.exports=n("./node_modules/css-loader/lib/css-base.js")(!1)).push([e.i,"header {\n  background-color: #97ce4c;\n  align-items: center;\n  display: flex;\n  font-family: Abel, sans-serif;\n  justify-content: space-between;\n  padding: 10px 50px;\n}\nheader h1 {\n  color: #111;\n  display: inline-block;\n  font-size: 32px;\n  font-weight: normal;\n}\nheader nav {\n  display: flex;\n}\nheader nav li {\n  list-style: none;\n  margin-right: 20px;\n}\nheader nav li a:not(last-child) {\n  padding: 0 10px;\n}\nheader nav li a {\n  color: #111;\n  font-family: Abel, sans-serif;\n  font-size: 22px;\n  position: relative;\n  text-decoration: none;\n  transition: color 400ms;\n  z-index: 1;\n}\nheader nav li a:hover {\n  color: #fefefe;\n}\nheader nav li a:after {\n  display: block;\n  position: absolute;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  left: 0;\n  margin: auto;\n  width: 100%;\n  height: 1px;\n  content: '.';\n  color: transparent;\n  background: #6b9b2a;\n  visibility: none;\n  opacity: 0;\n  transition: all 300ms;\n  z-index: -1;\n}\nheader nav li a:hover:after {\n  opacity: 1;\n  visibility: visible;\n  height: 180%;\n}\n@media (max-width: 700px) {\n  header {\n    display: block;\n    padding: 10px 15px;\n    text-align: center;\n  }\n  header h1 {\n    display: block;\n    font-size: 24px;\n  }\n  header nav {\n    display: block;\n  }\n  header nav li {\n    border-bottom: 1px solid #111;\n    padding: 5px 0;\n    margin-right: 0;\n  }\n  header nav li a {\n    font-size: 16px;\n  }\n}\n.Home {\n  background: url("+r(n("./src/assets/banner.jpg"))+") no-repeat center center fixed;\n  background-size: cover;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 94vh;\n  position: relative;\n}\n.Home:after {\n  position: absolute;\n  content: '';\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0,0,0,0.55);\n}\n.Home h2 {\n  color: #f2f2f2;\n  font-family: Abel, sans-serif;\n  font-weight: normal;\n  max-width: 1200px;\n  position: relative;\n  top: -60px;\n  text-align: center;\n  font-size: 40px;\n  z-index: 2;\n}\n@media (max-width: 700px) {\n  .Home {\n    overflow: hidden;\n  }\n  .Home h2 {\n    font-size: 30px;\n    padding: 10px;\n  }\n}\n.List-Container {\n  background-color: #e4a788;\n  padding: 30px 50px;\n  text-align: center;\n}\n.List-Container h2 {\n  font-family: Abel;\n  font-size: 30px;\n  font-weight: normal;\n  margin-bottom: 30px;\n}\n.List-Container .List-Grid {\n  display: grid;\n  grid-gap: 50px 30px;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  margin-bottom: 50px;\n}\n.List-Container button {\n  background-color: #f0e14a;\n  box-shadow: 5px 5px 2px rgba(0,0,0,0.1);\n  cursor: pointer;\n  display: inline-block;\n  font-family: Abel, sans-serif;\n  font-size: 24px;\n  color: #333;\n  border: none;\n  padding: 10px 20px;\n  transition: background-color 200ms, box-shadow 250ms, color 300ms, transform 400ms;\n}\n.List-Container button:hover {\n  background-color: #eedc2d;\n  box-shadow: 10px 10px 2px rgba(0,0,0,0.1);\n  color: #fff;\n  transform: translate(-5px, -5px);\n}\n.List-Item {\n  background-color: rgba(255,255,255,0.8);\n  box-shadow: 2px 5px 0 rgba(0,0,0,0.03);\n  cursor: pointer;\n  font-family: Abel, sans-serif;\n  padding: 0 7% 10% 7%;\n  position: relative;\n  transition: box-shadow 200ms, background-color 250ms, transform 400ms;\n}\n.List-Item:hover {\n  box-shadow: 4px 10px rgba(0,0,0,0.03);\n  background-color: #fff;\n  transform: translate(-2px, -5px) scale(1.02);\n}\n.List-Item img {\n  position: relative;\n  left: -8%;\n  width: 116.2%;\n}\n.List-Item h3 {\n  font-family: Abel, sans-serif;\n  font-size: 24px;\n  font-weight: normal;\n  padding: 10px 0;\n}\n.List-Item p {\n  border-bottom: 1px solid rgba(0,0,0,0.3);\n  display: flex;\n  font-size: 15px;\n  padding: 16px 0;\n  justify-content: space-between;\n}\n.List-Item p span {\n  color: rgba(0,0,0,0.7);\n}\n.Loader {\n  background-color: #e4a788;\n  color: #97ce4c;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n}\n.back-arrow {\n  position: absolute;\n  background-color: #5c8524;\n  border-radius: 50%;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n  top: 20px;\n  left: 20px;\n  transition: background-color 400ms, transform 500ms;\n}\n.back-arrow svg {\n  fill: #fefefe;\n  width: 30px;\n  height: 30px;\n}\n.back-arrow:hover {\n  background-color: #97ce4c;\n  transform: scale(1.3);\n}\n.Single-Info-Container {\n  background-color: #f0e14a;\n  width: 100%;\n  height: 93.5vh;\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n}\n.Single-Info-Container .Single-Info {\n  background-color: #fefefe;\n  border-radius: 5px;\n  display: flex;\n  height: 60%;\n  box-shadow: 16px 16px 1px rgba(0,0,0,0.1);\n  width: 90%;\n  max-width: 1200px;\n}\n.Single-Info-Container .Single-Info.Episode,\n.Single-Info-Container .Single-Info.Location {\n  display: block;\n  max-width: 800px;\n  text-align: center;\n  height: auto;\n}\n.Single-Info-Container .Single-Info.Episode .Single-Info-Text,\n.Single-Info-Container .Single-Info.Location .Single-Info-Text {\n  width: 100%;\n}\n.Single-Info-Container .Single-Info img {\n  width: 50%;\n}\n.Single-Info-Container .Single-Info .Single-Info-Text {\n  font-family: Abel, sans-serif;\n  padding: 20px 90px;\n  width: 50%;\n}\n.Single-Info-Container .Single-Info .Single-Info-Text h2 {\n  color: #5c8524;\n  font-size: 40px;\n}\n.Single-Info-Container .Single-Info .Single-Info-Text p {\n  display: flex;\n  font-size: 20px;\n  align-items: baseline;\n  justify-content: space-between;\n  border-bottom: 1px solid rgba(17,17,17,0.4);\n  padding: 16px 0;\n}\n.Single-Info-Container .Single-Info .Single-Info-Text p span {\n  color: rgba(0,0,0,0.7);\n}\n@media (max-width: 600px) {\n  .Single-Info-Container {\n    display: block;\n    padding-top: 100px;\n    overflow-x: hidden;\n  }\n  .Single-Info-Container .Single-Info {\n    box-shadow: none;\n    height: auto;\n    display: block;\n    width: 80%;\n    margin: 0 auto;\n  }\n  .Single-Info-Container .Single-Info img {\n    width: 100%;\n  }\n  .Single-Info-Container .Single-Info .Single-Info-Text {\n    display: block;\n    padding: 20px 30px;\n    width: 100%;\n  }\n}\n*,\n*:before,\n*:after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n",""])},"./node_modules/css-loader/lib/css-base.js":function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(i=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var i;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},"./node_modules/css-loader/lib/url/escape.js":function(e,t){e.exports=function(e){return"string"!=typeof e?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),/["'() \t\n]/.test(e)?'"'+e.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':e)}},"./node_modules/emotion/dist/index.es.js":function(e,t,n){"use strict";function r(e){return function(e,t){var n=1540483477,r=t^e.length,s=e.length,l=0;for(;s>=4;){var u=o(e,l);u=i(u,n),u=i(u^=u>>>24,n),r=i(r,n),r^=u,l+=4,s-=4}switch(s){case 3:r^=a(e,l),r=i(r^=e.charCodeAt(l+2)<<16,n);break;case 2:r=i(r^=a(e,l),n);break;case 1:r=i(r^=e.charCodeAt(l),n)}return r=i(r^=r>>>13,n),(r^=r>>>15)>>>0}(e,e.length).toString(36)}function o(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function a(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function i(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}n.r(t);var s="__emotion_styles",l="__emotion_target",u={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},c=n("./node_modules/emotion/node_modules/stylis-rule-sheet/index.js"),f=n.n(c);function p(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-emotion",""),e.appendChild(document.createTextNode("")),document.head.appendChild(e),e}n.d(t,"sheet",function(){return d}),n.d(t,"useStylisPlugin",function(){return v}),n.d(t,"registered",function(){return g}),n.d(t,"inserted",function(){return w}),n.d(t,"css",function(){return M}),n.d(t,"keyframes",function(){return I}),n.d(t,"injectGlobal",function(){return L}),n.d(t,"fontFace",function(){return A}),n.d(t,"getRegisteredStyles",function(){return z}),n.d(t,"merge",function(){return U}),n.d(t,"cx",function(){return F}),n.d(t,"hydrate",function(){return D}),n.d(t,"flush",function(){return H});var d=new(function(){function e(){this.isBrowser="undefined"!=typeof window,this.isSpeedy=!0,this.tags=[],this.ctr=0}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.isBrowser?this.tags[0]=p():this.sheet=[],this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isBrowser){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=p();this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(p())}else this.sheet.push(e)},t.flush=function(){this.isBrowser?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0):this.sheet=[],this.injected=!1},e}());d.inject();var h=new function e(t){function n(e,t,n){var o=t.trim().split(v);t=o;var a=o.length,i=e.length;switch(i){case 0:case 1:var s=0;for(e=0===i?"":e[0]+" ";s<a;++s)t[s]=r(e,t[s],n,i).trim();break;default:var l=s=0;for(t=[];s<a;++s)for(var u=0;u<i;++u)t[l++]=r(e[u]+" ",o[s],n,i).trim()}return t}function r(e,t,n,r){var o=t.charCodeAt(0);switch(33>o&&(o=(t=t.trim()).charCodeAt(0)),o){case 38:switch(U+r){case 0:case 1:if(0===e.trim().length)break;default:return t.replace(g,"$1"+e.trim())}break;case 58:switch(t.charCodeAt(1)){case 103:if(0<D&&0<U)return t.replace(w,"$1").replace(g,"$1"+J);break;default:return e.trim()+t}default:if(0<n*U&&0<t.indexOf("\f"))return t.replace(g,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var o=0,i=e+";";if(944==(t=2*t+3*n+4*r)){switch(o=i.length,e=i.indexOf(":",9)+1,n=i.substring(0,e).trim(),r=i.substring(e,o-1).trim(),i.charCodeAt(9)*Q){case 0:break;case 45:if(110!==i.charCodeAt(10))break;default:for(e=t=0,o=(i=r.split((r="",m))).length;t<o;e=0,++t){for(var s=i[t],l=s.split(y);s=l[e];){var u=s.charCodeAt(0);if(1===Q&&(64<u&&90>u||96<u&&123>u||95===u||45===u&&45!==s.charCodeAt(1)))switch(isNaN(parseFloat(s))+(-1!==s.indexOf("("))){case 1:switch(s){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:s+=X}}l[e++]=s}r+=(0===t?"":",")+l.join(" ")}}return r=n+r+";",1===F||2===F&&a(r,1)?"-webkit-"+r+r:r}if(0===F||2===F&&!a(i,1))return i;switch(t){case 1015:return 45===i.charCodeAt(9)?"-webkit-"+i+i:i;case 951:return 116===i.charCodeAt(3)?"-webkit-"+i+i:i;case 963:return 110===i.charCodeAt(5)?"-webkit-"+i+i:i;case 1009:if(100!==i.charCodeAt(4))break;case 969:case 942:return"-webkit-"+i+i;case 978:return"-webkit-"+i+"-moz-"+i+i;case 1019:case 983:return"-webkit-"+i+"-moz-"+i+"-ms-"+i+i;case 883:return 45===i.charCodeAt(8)?"-webkit-"+i+i:i;case 932:if(45===i.charCodeAt(4))switch(i.charCodeAt(5)){case 103:return"-webkit-box-"+i.replace("-grow","")+"-webkit-"+i+"-ms-"+i.replace("grow","positive")+i;case 115:return"-webkit-"+i+"-ms-"+i.replace("shrink","negative")+i;case 98:return"-webkit-"+i+"-ms-"+i.replace("basis","preferred-size")+i}return"-webkit-"+i+"-ms-"+i+i;case 964:return"-webkit-"+i+"-ms-flex-"+i+i;case 1023:if(99!==i.charCodeAt(8))break;return"-webkit-box-pack"+(e=i.substring(i.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+i+"-ms-flex-pack"+e+i;case 1005:return d.test(i)?i.replace(p,":-webkit-")+i.replace(p,":-moz-")+i:i;case 1e3:switch(o=(e=i.substring(13).trim()).indexOf("-")+1,e.charCodeAt(0)+e.charCodeAt(o)){case 226:e=i.replace(T,"tb");break;case 232:e=i.replace(T,"tb-rl");break;case 220:e=i.replace(T,"lr");break;default:return i}return"-webkit-"+i+"-ms-"+e+i;case 1017:if(-1===i.indexOf("sticky",9))break;case 975:switch(o=(i=e).length-10,t=(e=(33===i.charCodeAt(o)?i.substring(0,o):i).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|e.charCodeAt(7))){case 203:if(111>e.charCodeAt(8))break;case 115:i=i.replace(e,"-webkit-"+e)+";"+i;break;case 207:case 102:i=i.replace(e,"-webkit-"+(102<t?"inline-":"")+"box")+";"+i.replace(e,"-webkit-"+e)+";"+i.replace(e,"-ms-"+e+"box")+";"+i}return i+";";case 938:if(45===i.charCodeAt(5))switch(i.charCodeAt(6)){case 105:return"-webkit-"+i+"-webkit-box-"+(e=i.replace("-items",""))+"-ms-flex-"+e+i;case 115:return"-webkit-"+i+"-ms-flex-item-"+i.replace(M,"")+i;default:return"-webkit-"+i+"-ms-flex-line-pack"+i.replace("align-content","")+i}break;case 953:if(0<(o=i.indexOf("-content",9))&&109===i.charCodeAt(o-3)&&45!==i.charCodeAt(o-4))return"width:-webkit-"+(e=i.substring(o-3))+"width:-moz-"+e+"width:"+e;break;case 962:if(i="-webkit-"+i+(102===i.charCodeAt(5)?"-ms-"+i:"")+i,211===n+r&&105===i.charCodeAt(13)&&0<i.indexOf("transform",10))return i.substring(0,i.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+i}return i}function a(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),$(2!==t?r:r.replace(I,"$1"),n,t)}function i(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(N," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,a,i,s,l){for(var c,f=0,p=t;f<K;++f)switch(c=q[f].call(u,e,p,n,r,o,a,i,s,l)){case void 0:case!1:case!0:case null:break;default:p=c}switch(p){case void 0:case!1:case!0:case null:case t:break;default:return p}}function l(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Q=0|n;break;case"global":D=0|n;break;case"cascade":U=0|n;break;case"compress":H=0|n;break;case"semicolon":B=0|n;break;case"preserve":W=0|n;break;case"prefix":$=null,n?"function"!=typeof n?F=1:(F=2,$=n):F=0}}return l}function u(t,r){if(void 0!==this&&this.constructor===u)return e(t);var l=t,p=l.charCodeAt(0);if(33>p&&(p=(l=l.trim()).charCodeAt(0)),0<Q&&(X=l.replace(x,91===p?"":"-")),p=1,1===U?J=l:G=l,l=[J],0<K){var d=s(-1,r,l,l,A,L,0,0,0);void 0!==d&&"string"==typeof d&&(r=d)}var h=function e(t,r,l,u,p){for(var d,h,m,y,v=0,g=0,w=0,x=0,C=0,E=0,O=0,P=0,T=0,N=0,M=0,I=0,H=h=0,q=0,$=0,Z=l.length,ee=Z-1,te="",ne="",re="",oe="";I<Z;){if(m=l.charCodeAt(I),I===ee&&0!==g+x+w+v&&(0!==g&&(m=47===g?10:47),x=w=v=0,Z++,ee++),0===g+x+w+v){if(I===ee&&(0<h&&(te=te.replace(f,"")),0<te.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:te+=l.charAt(I)}m=59}if(1===H)switch(m){case 123:case 125:case 59:case 34:case 39:case 40:case 41:case 44:H=0;case 9:case 13:case 10:case 32:break;default:for(H=0,$=I,d=m,I--,m=59;$<Z;)switch(l.charCodeAt(++$)){case 10:case 13:case 59:I++,m=d;case 58:case 123:$=Z}}switch(m){case 123:for(d=(te=te.trim()).charCodeAt(0),P=1,$=++I;I<Z;){switch(m=l.charCodeAt(I)){case 123:P++;break;case 125:P--}if(0===P)break;I++}switch(N=l.substring($,I),0===d&&(d=(te=te.replace(c,"").trim()).charCodeAt(0)),d){case 64:switch(0<h&&(te=te.replace(f,"")),h=te.charCodeAt(1)){case 100:case 109:case 115:case 45:d=r;break;default:d=V}if($=(N=e(r,d,N,h,p+1)).length,0<W&&0===$&&($=te.length),0<K&&(y=s(3,N,d=n(V,te,q),r,A,L,$,h,p),te=d.join(""),void 0!==y&&0===($=(N=y.trim()).length)&&(h=0,N="")),0<$)switch(h){case 115:te=te.replace(R,i);case 100:case 109:case 45:N=te+"{"+N+"}";break;case 107:N=(te=te.replace(_,"$1 $2"+(0<Q?X:"")))+"{"+N+"}",N=1===F||2===F&&a("@"+N,3)?"@-webkit-"+N+"@"+N:"@"+N;break;default:N=te+N,112===u&&(ne+=N,N="")}else N="";break;default:N=e(r,n(r,te,q),N,u,p+1)}re+=N,N=q=h=M=H=T=0,te="",m=l.charCodeAt(++I);break;case 125:case 59:if(1<($=(te=(0<h?te.replace(f,""):te).trim()).length))switch(0===M&&(d=te.charCodeAt(0),45===d||96<d&&123>d)&&($=(te=te.replace(" ",":")).length),0<K&&void 0!==(y=s(1,te,r,t,A,L,ne.length,u,p))&&0===($=(te=y.trim()).length)&&(te="\0\0"),d=te.charCodeAt(0),h=te.charCodeAt(1),d+h){case 0:break;case 169:case 163:oe+=te+l.charAt(I);break;default:58!==te.charCodeAt($-1)&&(ne+=o(te,d,h,te.charCodeAt(2)))}q=h=M=H=T=0,te="",m=l.charCodeAt(++I)}}switch(m){case 13:case 10:if(0===g+x+w+v+B)switch(O){case 41:case 39:case 34:case 64:case 126:case 62:case 42:case 43:case 47:case 45:case 58:case 44:case 59:case 123:case 125:break;default:0<M&&(H=1)}47===g?g=0:0===U+T&&(h=1,te+="\0"),0<K*Y&&s(0,te,r,t,A,L,ne.length,u,p),L=1,A++;break;case 59:case 125:if(0===g+x+w+v){L++;break}default:switch(L++,d=l.charAt(I),m){case 9:case 32:if(0===x+v+g)switch(C){case 44:case 58:case 9:case 32:d="";break;default:32!==m&&(d=" ")}break;case 0:d="\\0";break;case 12:d="\\f";break;case 11:d="\\v";break;case 38:0===x+g+v&&0<U&&(h=q=1,d="\f"+d);break;case 108:if(0===x+g+v+z&&0<M)switch(I-M){case 2:112===C&&58===l.charCodeAt(I-3)&&(z=C);case 8:111===E&&(z=E)}break;case 58:0===x+g+v&&(M=I);break;case 44:0===g+w+x+v&&(h=1,d+="\r");break;case 34:case 39:0===g&&(x=x===m?0:0===x?m:x);break;case 91:0===x+g+w&&v++;break;case 93:0===x+g+w&&v--;break;case 41:0===x+g+v&&w--;break;case 40:if(0===x+g+v){if(0===T)switch(2*C+3*E){case 533:break;default:P=0,T=1}w++}break;case 64:0===g+w+x+v+M+N&&(N=1);break;case 42:case 47:if(!(0<x+v+w))switch(g){case 0:switch(2*m+3*l.charCodeAt(I+1)){case 235:g=47;break;case 220:$=I,g=42}break;case 42:47===m&&42===C&&(33===l.charCodeAt($+2)&&(ne+=l.substring($,I+1)),d="",g=0)}}if(0===g){if(0===U+x+v+N&&107!==u&&59!==m)switch(m){case 44:case 126:case 62:case 43:case 41:case 40:if(0===T){switch(C){case 9:case 32:case 10:case 13:d+="\0";break;default:d="\0"+d+(44===m?"":"\0")}h=1}else switch(m){case 40:T=++P;break;case 41:0==(T=--P)&&(h=1,d+="\0")}break;case 9:case 32:switch(C){case 0:case 123:case 125:case 59:case 44:case 12:case 9:case 32:case 10:case 13:break;default:0===T&&(h=1,d+="\0")}}te+=d,32!==m&&9!==m&&(O=m)}}E=C,C=m,I++}if($=ne.length,0<W&&0===$&&0===re.length&&0===r[0].length==0&&(109!==u||1===r.length&&(0<U?G:J)===r[0])&&($=r.join(",").length+2),0<$){if(0===U&&107!==u){for(l=0,v=r.length,g=Array(v);l<v;++l){for(E="",O=0,Z=(C=r[l].split(b)).length;O<Z;++O)if(!(0===(P=(x=C[O]).length)&&1<Z)){if(I=E.charCodeAt(E.length-1),q=x.charCodeAt(0),w="",0!==O)switch(I){case 42:case 126:case 62:case 43:case 32:case 40:break;default:w=" "}switch(q){case 38:x=w+G;case 126:case 62:case 43:case 32:case 41:case 40:break;case 91:x=w+x+G;break;case 58:switch(2*x.charCodeAt(1)+3*x.charCodeAt(2)){case 530:if(0<D){x=w+x.substring(8,P-1);break}default:(1>O||1>C[O-1].length)&&(x=w+G+x)}break;case 44:w="";default:x=1<P&&0<x.indexOf(":")?w+x.replace(S,"$1"+G+"$2"):w+x+G}E+=x}g[l]=E.replace(f,"").trim()}r=g}if(d=r,0<K&&void 0!==(y=s(2,ne,d,t,A,L,$,u,p))&&0===(ne=y).length)return oe+ne+re;if(ne=d.join(",")+"{"+ne+"}",0!=F*z){switch(2!==F||a(ne,2)||(z=0),z){case 111:ne=ne.replace(j,":-moz-$1")+ne;break;case 112:ne=ne.replace(k,"::-webkit-input-$1")+ne.replace(k,"::-moz-$1")+ne.replace(k,":-ms-input-$1")+ne}z=0}}return oe+ne+re}(V,l,r,0,0);return 0<K&&void 0!==(d=s(-2,h,l,l,A,L,h.length,0,0))&&"string"!=typeof(h=d)&&(p=0),G=J=X="",z=0,L=A=1,0==H*p?h:h.replace(f,"").replace(C,"").replace(E,"$1").replace(O,"$1").replace(P," ")}var c=/^\0+/g,f=/[\0\r\f]/g,p=/: */g,d=/zoo|gra/,h=/([,: ])(transform)/g,m=/,+\s*(?![^(]*[)])/g,y=/ +\s*(?![^(]*[)])/g,b=/ *[\0] */g,v=/,\r+?/g,g=/([\t\r\n ])*\f?&/g,w=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,x=/\W+/g,_=/@(k\w+)\s*(\S*)\s*/,k=/::(place)/g,j=/:(read-only)/g,C=/\s+(?=[{\];=:>])/g,E=/([[}=:>])\s+/g,O=/(\{[^{]+?);(?=\})/g,P=/\s{2,}/g,S=/([^\(])(:+) */g,T=/[svh]\w+-[tblr]{2}/,R=/\(\s*(.*)\s*\)/g,N=/([^]*?);/g,M=/-self|flex-/g,I=/[^]*?(:[rp][el]a[\w-]+)[^]*/,L=1,A=1,z=0,U=1,F=1,D=1,H=0,B=0,W=0,V=[],q=[],K=0,$=null,Y=0,Q=1,X="",G="",J="";return u.use=function e(t){switch(t){case void 0:case null:K=q.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:q[K++]=t;break;case Boolean:Y=0|!!t}}return e},u.set=l,void 0!==t&&l(t),u}({keyframe:!1}),m=[],y=h.use;var b=f()(function(e){d.insert(e,x)}),v=function(e){m.push(e),y(null)(m)(b)},g={},w={},x="";function _(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":return void 0!==e[s]?"."+e[l]:_.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(T.has(e))return T.get(e);var t="";Array.isArray(e)?e.forEach(function(e){t+=_.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==g[e[n]]?t+=n+"{"+g[e[n]]+"}":t+=P(n)+":"+S(n,e[n])+";":t+=n+"{"+_.call(this,e[n],!1)+"}"},this);return T.set(e,t),t}.call(this,e);default:var n=g[e];return!1===t&&void 0!==n?n:e}}h.use(b);var k,j,C,E,O=/[A-Z]|^ms/g,P=(k=function(e){return e.replace(O,"-$&").toLowerCase()},j={},function(e){return void 0===j[e]&&(j[e]=k(e)),j[e]}),S=function(e,t){return void 0===t||null===t||"boolean"==typeof t?"":1===u[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},T=new WeakMap;var R=/label:\s*([^\s;\n]+)\s*[;\n]/g;function N(e){var t=!0,n="",o="";null==e||void 0===e.raw?(t=!1,n=_.call(this,e,!1)):n=e[0];for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];return i.forEach(function(r,o){var a;n+=_.call(this,r,46===(a=n).charCodeAt(a.length-1)),!0===t&&void 0!==e[o+1]&&(n+=e[o+1])},this),n=n.replace(R,function(e,t){return o+="-"+t,""}),C=r(n+o),E=C+o,n}function M(){var e=N.apply(this,arguments),t="css-"+E;return void 0===g[t]&&(g[t]=e),void 0===w[C]&&(h("."+t,e),w[C]=!0),t}function I(){var e=N.apply(this,arguments),t="animation-"+E;return void 0===w[C]&&(h("","@keyframes "+t+"{"+e+"}"),w[C]=!0),t}function L(){var e=N.apply(this,arguments);void 0===w[C]&&(h("",e),w[C]=!0)}function A(){var e=N.apply(void 0,arguments);void 0===w[C]&&(h("","@font-face{"+e+"}"),w[C]=!0)}function z(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==g[t]?e.push(t):n+=t+" "}),n}function U(e,t){var n=[],r=z(n,e);return n.length<2?e:r+M(n,t)}function F(){return U(function e(){for(var t=arguments.length,n=0,r="";n<t;n++){var o=arguments[n];if(null!=o){var a=r&&r+" "||r;switch(typeof o){case"boolean":break;case"function":r=a+e(o());break;case"object":if(Array.isArray(o))r=a+e.apply(null,o);else for(var i in o)o[i]&&(r&&(r+=" "),r+=i);break;default:r=a+o}}}return r}.apply(void 0,arguments))}function D(e){e.forEach(function(e){w[e]=!0})}function H(){d.flush(),w={},g={},d.inject()}},"./node_modules/emotion/node_modules/stylis-rule-sheet/index.js":function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,a,i,s,l,u,c){switch(n){case 1:0===c&&64===r.charCodeAt(0)&&e(r);break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+"/*|*/"}case-2:r.split("/*|*/}").forEach(t)}}}}()},"./node_modules/fbjs/lib/ExecutionEnvironment.js":function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},"./node_modules/fbjs/lib/containsNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isTextNode.js");e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},"./node_modules/fbjs/lib/emptyFunction.js":function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},"./node_modules/fbjs/lib/emptyObject.js":function(e,t,n){"use strict";e.exports={}},"./node_modules/fbjs/lib/getActiveElement.js":function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},"./node_modules/fbjs/lib/invariant.js":function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,a,i,s,l){if(r(t),!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,a,i,s,l],f=0;(u=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},"./node_modules/fbjs/lib/isNode.js":function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},"./node_modules/fbjs/lib/isTextNode.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/isNode.js");e.exports=function(e){return r(e)&&3==e.nodeType}},"./node_modules/fbjs/lib/shallowEqual.js":function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;for(var i=0;i<n.length;i++)if(!r.call(t,n[i])||!o(e[n[i]],t[n[i]]))return!1;return!0}},"./node_modules/history/DOMUtils.js":function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},"./node_modules/history/LocationUtils.js":function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n("./node_modules/resolve-pathname/index.js")),a=s(n("./node_modules/value-equal/index.js")),i=n("./node_modules/history/PathUtils.js");function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,a){var s=void 0;"string"==typeof e?(s=(0,i.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),a?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,a.pathname)):s.pathname=a.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,a.default)(e.state,t.state)}},"./node_modules/history/PathUtils.js":function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},"./node_modules/history/createBrowserHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=f(n("./node_modules/warning/browser.js")),i=f(n("./node_modules/invariant/browser.js")),s=n("./node_modules/history/LocationUtils.js"),l=n("./node_modules/history/PathUtils.js"),u=f(n("./node_modules/history/createTransitionManager.js")),c=n("./node_modules/history/DOMUtils.js");function f(e){return e&&e.__esModule?e:{default:e}}var p=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),d=e.forceRefresh,h=void 0!==d&&d,m=e.getUserConfirmation,y=void 0===m?c.getConfirmation:m,b=e.keyLength,v=void 0===b?6:b,g=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",w=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return(0,a.default)(!g||(0,l.hasBasename)(i,g),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+g+'".'),g&&(i=(0,l.stripBasename)(i,g)),(0,s.createLocation)(i,r,n)},x=function(){return Math.random().toString(36).substr(2,v)},_=(0,u.default)(),k=function(e){o(A,e),A.length=t.length,_.notifyListeners(A.location,A.action)},j=function(e){(0,c.isExtraneousPopstateEvent)(e)||O(w(e.state))},C=function(){O(w(p()))},E=!1,O=function(e){E?(E=!1,k()):_.confirmTransitionTo(e,"POP",y,function(t){t?k({action:"POP",location:e}):P(e)})},P=function(e){var t=A.location,n=T.indexOf(t.key);-1===n&&(n=0);var r=T.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(E=!0,N(o))},S=w(p()),T=[S.key],R=function(e){return g+(0,l.createPath)(e)},N=function(e){t.go(e)},M=0,I=function(e){1===(M+=e)?((0,c.addEventListener)(window,"popstate",j),f&&(0,c.addEventListener)(window,"hashchange",C)):0===M&&((0,c.removeEventListener)(window,"popstate",j),f&&(0,c.removeEventListener)(window,"hashchange",C))},L=!1,A={length:t.length,action:"POP",location:S,createHref:R,push:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,x(),A.location);_.confirmTransitionTo(i,"PUSH",y,function(e){if(e){var r=R(i),o=i.key,s=i.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var l=T.indexOf(A.location.key),u=T.slice(0,-1===l?0:l+1);u.push(i.key),T=u,k({action:"PUSH",location:i})}else(0,a.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,x(),A.location);_.confirmTransitionTo(i,"REPLACE",y,function(e){if(e){var r=R(i),o=i.key,s=i.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var l=T.indexOf(A.location.key);-1!==l&&(T[l]=i.key),k({action:"REPLACE",location:i})}else(0,a.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:N,goBack:function(){return N(-1)},goForward:function(){return N(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=_.setPrompt(e);return L||(I(1),L=!0),function(){return L&&(L=!1,I(-1)),t()}},listen:function(e){var t=_.appendListener(e);return I(1),function(){I(-1),t()}}};return A}},"./node_modules/history/createHashHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n("./node_modules/warning/browser.js")),a=c(n("./node_modules/invariant/browser.js")),i=n("./node_modules/history/LocationUtils.js"),s=n("./node_modules/history/PathUtils.js"),l=c(n("./node_modules/history/createTransitionManager.js")),u=n("./node_modules/history/DOMUtils.js");function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},p=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},d=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(u.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,u.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?u.getConfirmation:c,m=e.hashType,y=void 0===m?"slash":m,b=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",v=f[y],g=v.encodePath,w=v.decodePath,x=function(){var e=w(p());return(0,o.default)(!b||(0,s.hasBasename)(e,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+b+'".'),b&&(e=(0,s.stripBasename)(e,b)),(0,i.createLocation)(e)},_=(0,l.default)(),k=function(e){r(z,e),z.length=t.length,_.notifyListeners(z.location,z.action)},j=!1,C=null,E=function(){var e=p(),t=g(e);if(e!==t)d(t);else{var n=x(),r=z.location;if(!j&&(0,i.locationsAreEqual)(r,n))return;if(C===(0,s.createPath)(n))return;C=null,O(n)}},O=function(e){j?(j=!1,k()):_.confirmTransitionTo(e,"POP",h,function(t){t?k({action:"POP",location:e}):P(e)})},P=function(e){var t=z.location,n=N.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=N.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(j=!0,M(o))},S=p(),T=g(S);S!==T&&d(T);var R=x(),N=[(0,s.createPath)(R)],M=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},I=0,L=function(e){1===(I+=e)?(0,u.addEventListener)(window,"hashchange",E):0===I&&(0,u.removeEventListener)(window,"hashchange",E)},A=!1,z={length:t.length,action:"POP",location:R,createHref:function(e){return"#"+g(b+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,z.location);_.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(b+t);if(p()!==r){C=t,function(e){window.location.hash=e}(r);var a=N.lastIndexOf((0,s.createPath)(z.location)),i=N.slice(0,-1===a?0:a+1);i.push(t),N=i,k({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),k()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,i.createLocation)(e,void 0,void 0,z.location);_.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,s.createPath)(n),r=g(b+t);p()!==r&&(C=t,d(r));var o=N.indexOf((0,s.createPath)(z.location));-1!==o&&(N[o]=t),k({action:"REPLACE",location:n})}})},go:M,goBack:function(){return M(-1)},goForward:function(){return M(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=_.setPrompt(e);return A||(L(1),A=!0),function(){return A&&(A=!1,L(-1)),t()}},listen:function(e){var t=_.appendListener(e);return L(1),function(){L(-1),t()}}};return z}},"./node_modules/history/createMemoryHistory.js":function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=u(n("./node_modules/warning/browser.js")),i=n("./node_modules/history/PathUtils.js"),s=n("./node_modules/history/LocationUtils.js"),l=u(n("./node_modules/history/createTransitionManager.js"));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,u=void 0===n?["/"]:n,f=e.initialIndex,p=void 0===f?0:f,d=e.keyLength,h=void 0===d?6:d,m=(0,l.default)(),y=function(e){o(_,e),_.length=_.entries.length,m.notifyListeners(_.location,_.action)},b=function(){return Math.random().toString(36).substr(2,h)},v=c(p,0,u.length-1),g=u.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,b()):(0,s.createLocation)(e,void 0,e.key||b())}),w=i.createPath,x=function(e){var n=c(_.index+e,0,_.entries.length-1),r=_.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},_={length:g.length,action:"POP",location:g[v],index:v,entries:g,createHref:w,push:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,b(),_.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,b(),_.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(_.entries[_.index]=o,y({action:"REPLACE",location:o}))})},go:x,goBack:function(){return x(-1)},goForward:function(){return x(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return _}},"./node_modules/history/createTransitionManager.js":function(e,t,n){"use strict";t.__esModule=!0;var r,o=n("./node_modules/warning/browser.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,a.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):((0,a.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},"./node_modules/hoist-non-react-statics/index.js":function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,a=Object.getOwnPropertyDescriptor,i=Object.getPrototypeOf,s=i&&i(Object);return function l(u,c,f){if("string"!=typeof c){if(s){var p=i(c);p&&p!==s&&l(u,p,f)}var d=r(c);o&&(d=d.concat(o(c)));for(var h=0;h<d.length;++h){var m=d[h];if(!(e[m]||t[m]||f&&f[m])){var y=a(c,m);try{n(u,m,y)}catch(e){}}}return u}return u}}()},"./node_modules/invariant/browser.js":function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],c=0;(l=new Error(t.replace(/%s/g,function(){return u[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},"./node_modules/object-assign/index.js":function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var u in n=Object(arguments[l]))o.call(n,u)&&(s[u]=n[u]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(s[i[c]]=n[i[c]])}}return s}},"./node_modules/prop-types/factoryWithThrowingShims.js":function(e,t,n){"use strict";var r=n("./node_modules/fbjs/lib/emptyFunction.js"),o=n("./node_modules/fbjs/lib/invariant.js"),a=n("./node_modules/prop-types/lib/ReactPropTypesSecret.js");e.exports=function(){function e(e,t,n,r,i,s){s!==a&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},"./node_modules/prop-types/index.js":function(e,t,n){e.exports=n("./node_modules/prop-types/factoryWithThrowingShims.js")()},"./node_modules/prop-types/lib/ReactPropTypesSecret.js":function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},"./node_modules/react-dom/cjs/react-dom.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.1
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/react/index.js"),o=n("./node_modules/fbjs/lib/ExecutionEnvironment.js"),a=n("./node_modules/object-assign/index.js"),i=n("./node_modules/fbjs/lib/emptyFunction.js"),s=n("./node_modules/fbjs/lib/getActiveElement.js"),l=n("./node_modules/fbjs/lib/shallowEqual.js"),u=n("./node_modules/fbjs/lib/containsNode.js"),c=n("./node_modules/fbjs/lib/emptyObject.js");function f(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||f("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,a,i,s,l){(function(e,t,n,r,o,a,i,s,l){this._hasCaughtError=!1,this._caughtError=null;var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,a,i,s,l){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var u=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=u)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}f("198")}};var d=null,h={};function m(){if(d)for(var e in h){var t=h[e],n=d.indexOf(e);if(-1<n||f("96",e),!b[n])for(var r in t.extractEvents||f("97",e),b[n]=t,n=t.eventTypes){var o=void 0,a=n[r],i=t,s=r;v.hasOwnProperty(s)&&f("99",s),v[s]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],i,s);o=!0}else a.registrationName?(y(a.registrationName,i,s),o=!0):o=!1;o||f("98",r,e)}}}function y(e,t,n){g[e]&&f("100",e),g[e]=t,w[e]=t.eventTypes[n].dependencies}var b=[],v={},g={},w={};function x(e){d&&f("101"),d=Array.prototype.slice.call(e),m()}function _(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&f("102",t),h[t]=r,n=!0)}n&&m()}var k=Object.freeze({plugins:b,eventNameDispatchConfigs:v,registrationNameModules:g,registrationNameDependencies:w,possibleRegistrationNames:null,injectEventPluginOrder:x,injectEventPluginsByName:_}),j=null,C=null,E=null;function O(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=E(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function P(e,t){return null==t&&f("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var T=null;function R(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)O(e,t,n[o],r[o]);else n&&O(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function N(e){return R(e,!0)}function M(e){return R(e,!1)}var I={injectEventPluginOrder:x,injectEventPluginsByName:_};function L(e,t){var n=e.stateNode;if(!n)return null;var r=j(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&f("231",t,typeof n),n)}function A(e,t){null!==e&&(T=P(T,e)),e=T,T=null,e&&(S(e,t?N:M),T&&f("95"),p.rethrowCaughtError())}function z(e,t,n,r){for(var o=null,a=0;a<b.length;a++){var i=b[a];i&&(i=i.extractEvents(e,t,n,r))&&(o=P(o,i))}A(o,!1)}var U=Object.freeze({injection:I,getListener:L,runEventsInBatch:A,runExtractedEventsInBatch:z}),F=Math.random().toString(36).slice(2),D="__reactInternalInstance$"+F,H="__reactEventHandlers$"+F;function B(e){if(e[D])return e[D];for(;!e[D];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[D]).tag||6===e.tag?e:null}function W(e){if(5===e.tag||6===e.tag)return e.stateNode;f("33")}function V(e){return e[H]||null}var q=Object.freeze({precacheFiberNode:function(e,t){t[D]=e},getClosestInstanceFromNode:B,getInstanceFromNode:function(e){return!(e=e[D])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:W,getFiberCurrentPropsFromNode:V,updateFiberProps:function(e,t){e[H]=t}});function K(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=K(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function Y(e,t,n){(t=L(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,Y,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?K(t):null,Y,e)}}function G(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=L(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=P(n._dispatchListeners,t),n._dispatchInstances=P(n._dispatchInstances,e))}function J(e){e&&e.dispatchConfig.registrationName&&G(e._targetInst,null,e)}function Z(e){S(e,Q)}function ee(e,t,n,r){if(n&&r)e:{for(var o=n,a=r,i=0,s=o;s;s=K(s))i++;s=0;for(var l=a;l;l=K(l))s++;for(;0<i-s;)o=K(o),i--;for(;0<s-i;)a=K(a),s--;for(;i--;){if(o===a||o===a.alternate)break e;o=K(o),a=K(a)}o=null}else o=null;for(a=o,o=[];n&&n!==a&&(null===(i=n.alternate)||i!==a);)o.push(n),n=K(n);for(n=[];r&&r!==a&&(null===(i=r.alternate)||i!==a);)n.push(r),r=K(r);for(r=0;r<o.length;r++)G(o[r],"bubbled",e);for(e=n.length;0<e--;)G(n[e],"captured",t)}var te=Object.freeze({accumulateTwoPhaseDispatches:Z,accumulateTwoPhaseDispatchesSkipTarget:function(e){S(e,X)},accumulateEnterLeaveDispatches:ee,accumulateDirectDispatches:function(e){S(e,J)}}),ne=null;function re(){return!ne&&o.canUseDOM&&(ne="textContent"in document.documentElement?"textContent":"innerText"),ne}var oe={_root:null,_startText:null,_fallbackText:null};function ae(){if(oe._fallbackText)return oe._fallbackText;var e,t,n=oe._startText,r=n.length,o=ie(),a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return oe._fallbackText=o.slice(e,1<t?1-t:void 0),oe._fallbackText}function ie(){return"value"in oe._root?oe._root.value:oe._root[re()]}var se="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),le={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ue(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?i.thatReturnsTrue:i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}function ce(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function fe(e){e instanceof this||f("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=ce,e.release=fe}a(ue.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<se.length;t++)this[se[t]]=null}}),ue.Interface=le,ue.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(ue);var de=ue.extend({data:null}),he=ue.extend({data:null}),me=[9,13,27,32],ye=o.canUseDOM&&"CompositionEvent"in window,be=null;o.canUseDOM&&"documentMode"in document&&(be=document.documentMode);var ve=o.canUseDOM&&"TextEvent"in window&&!be,ge=o.canUseDOM&&(!ye||be&&8<be&&11>=be),we=String.fromCharCode(32),xe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},_e=!1;function ke(e,t){switch(e){case"topKeyUp":return-1!==me.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function je(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ce=!1;var Ee={eventTypes:xe,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ye)e:{switch(e){case"topCompositionStart":o=xe.compositionStart;break e;case"topCompositionEnd":o=xe.compositionEnd;break e;case"topCompositionUpdate":o=xe.compositionUpdate;break e}o=void 0}else Ce?ke(e,n)&&(o=xe.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=xe.compositionStart);return o?(ge&&(Ce||o!==xe.compositionStart?o===xe.compositionEnd&&Ce&&(a=ae()):(oe._root=r,oe._startText=ie(),Ce=!0)),o=de.getPooled(o,t,n,r),a?o.data=a:null!==(a=je(n))&&(o.data=a),Z(o),a=o):a=null,(e=ve?function(e,t){switch(e){case"topCompositionEnd":return je(t);case"topKeyPress":return 32!==t.which?null:(_e=!0,we);case"topTextInput":return(e=t.data)===we&&_e?null:e;default:return null}}(e,n):function(e,t){if(Ce)return"topCompositionEnd"===e||!ye&&ke(e,t)?(e=ae(),oe._root=null,oe._startText=null,oe._fallbackText=null,Ce=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return ge?null:t.data;default:return null}}(e,n))?((t=he.getPooled(xe.beforeInput,t,n,r)).data=e,Z(t)):t=null,null===a?t:null===t?a:[a,t]}},Oe=null,Pe=null,Se=null;function Te(e){if(e=C(e)){Oe&&"function"==typeof Oe.restoreControlledState||f("194");var t=j(e.stateNode);Oe.restoreControlledState(e.stateNode,e.type,t)}}var Re={injectFiberControlledHostComponent:function(e){Oe=e}};function Ne(e){Pe?Se?Se.push(e):Se=[e]:Pe=e}function Me(){return null!==Pe||null!==Se}function Ie(){if(Pe){var e=Pe,t=Se;if(Se=Pe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}var Le=Object.freeze({injection:Re,enqueueStateRestore:Ne,needsStateRestore:Me,restoreStateIfNeeded:Ie});function Ae(e,t){return e(t)}function ze(e,t,n){return e(t,n)}function Ue(){}var Fe=!1;function De(e,t){if(Fe)return e(t);Fe=!0;try{return Ae(e,t)}finally{Fe=!1,Me()&&(Ue(),Ie())}}var He={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Be(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!He[e.type]:"textarea"===t}function We(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function Ve(e,t){return!(!o.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function qe(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ke(e){e._valueTracker||(e._valueTracker=function(e){var t=qe(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=qe(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ye=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Ge=Qe?Symbol.for("react.call"):60104,Je=Qe?Symbol.for("react.return"):60105,Ze=Qe?Symbol.for("react.portal"):60106,et=Qe?Symbol.for("react.fragment"):60107,tt=Qe?Symbol.for("react.strict_mode"):60108,nt=Qe?Symbol.for("react.provider"):60109,rt=Qe?Symbol.for("react.context"):60110,ot=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,it="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||void 0===e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function lt(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case et:return"ReactFragment";case Ze:return"ReactPortal";case Ge:return"ReactCall";case Je:return"ReactReturn"}return null}function ut(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=lt(e),a=null;n&&(a=lt(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":a?" (created by "+a+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft={},pt={};function dt(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new dt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new dt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new dt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){ht[e]=new dt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new dt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new dt(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){ht[e]=new dt(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new dt(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){ht[e]=new dt(e,5,!1,e.toLowerCase(),null)});var mt=/[\-\:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function bt(e,t,n,r){var o=ht.hasOwnProperty(t)?ht[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!ft.hasOwnProperty(e)&&(ct.test(e)?pt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function vt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function gt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=jt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function wt(e,t){null!=(t=t.checked)&&bt(e,"checked",t,!1)}function xt(e,t){wt(e,t);var n=jt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?kt(e,t.type,n):t.hasOwnProperty("defaultValue")&&kt(e,t.type,jt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function _t(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function kt(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function jt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,yt);ht[t]=new dt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),ht.tabIndex=new dt("tabIndex",1,!1,"tabindex",null);var Ct={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Et(e,t,n){return(e=ue.getPooled(Ct.change,e,t,n)).type="change",Ne(n),Z(e),e}var Ot=null,Pt=null;function St(e){A(e,!1)}function Tt(e){if($e(W(e)))return e}function Rt(e,t){if("topChange"===e)return t}var Nt=!1;function Mt(){Ot&&(Ot.detachEvent("onpropertychange",It),Pt=Ot=null)}function It(e){"value"===e.propertyName&&Tt(Pt)&&De(St,e=Et(Pt,e,We(e)))}function Lt(e,t,n){"topFocus"===e?(Mt(),Pt=n,(Ot=t).attachEvent("onpropertychange",It)):"topBlur"===e&&Mt()}function At(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Tt(Pt)}function zt(e,t){if("topClick"===e)return Tt(t)}function Ut(e,t){if("topInput"===e||"topChange"===e)return Tt(t)}o.canUseDOM&&(Nt=Ve("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:Ct,_isInputEventSupported:Nt,extractEvents:function(e,t,n,r){var o=t?W(t):window,a=void 0,i=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?a=Rt:Be(o)?Nt?a=Ut:(a=At,i=Lt):!(s=o.nodeName)||"input"!==s.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=zt),a&&(a=a(e,t)))return Et(a,n,r);i&&i(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&kt(o,"number",o.value)}},Dt=ue.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Bt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Wt(){return Bt}var Vt=Dt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Wt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Kt={eventTypes:qt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?B(t):null):e=null,e===t)return null;var a=null==e?o:W(e);o=null==t?o:W(t);var i=Vt.getPooled(qt.mouseLeave,e,n,r);return i.type="mouseleave",i.target=a,i.relatedTarget=o,(n=Vt.getPooled(qt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=a,ee(i,n,e,t),[i,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Yt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&f("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&f("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var i=o.child;i;){if(i===n)return Qt(o),e;if(i===r)return Qt(o),t;i=i.sibling}f("188")}if(n.return!==r.return)n=o,r=a;else{i=!1;for(var s=o.child;s;){if(s===n){i=!0,n=o,r=a;break}if(s===r){i=!0,r=o,n=a;break}s=s.sibling}if(!i){for(s=a.child;s;){if(s===n){i=!0,n=a,r=o;break}if(s===r){i=!0,r=a,n=o;break}s=s.sibling}i||f("189")}}n.alternate!==r&&f("190")}return 3!==n.tag&&f("188"),n.stateNode.current===n?e:t}var Gt=ue.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Jt=ue.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Zt=Dt.extend({relatedTarget:null});function en(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var tn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},nn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rn=Dt.extend({key:function(e){if(e.key){var t=tn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=en(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?nn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Wt,charCode:function(e){return"keypress"===e.type?en(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?en(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),on=Vt.extend({dataTransfer:null}),an=Dt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Wt}),sn=ue.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ln=Vt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un={},cn={};function fn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},un[e]=t,cn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){fn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){fn(e,!1)});var pn={eventTypes:un,isInteractiveTopLevelEventType:function(e){return void 0!==(e=cn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=cn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===en(n))return null;case"topKeyDown":case"topKeyUp":e=rn;break;case"topBlur":case"topFocus":e=Zt;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Vt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=on;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=an;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Gt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Dt;break;case"topWheel":e=ln;break;case"topCopy":case"topCut":case"topPaste":e=Jt;break;default:e=ue}return Z(t=e.getPooled(o,t,n,r)),t}},dn=pn.isInteractiveTopLevelEventType,hn=[];function mn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=B(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],z(e.topLevelType,t,e.nativeEvent,We(e.nativeEvent))}var yn=!0;function bn(e){yn=!!e}function vn(e,t,n){if(!n)return null;e=(dn(e)?wn:xn).bind(null,e),n.addEventListener(t,e,!1)}function gn(e,t,n){if(!n)return null;e=(dn(e)?wn:xn).bind(null,e),n.addEventListener(t,e,!0)}function wn(e,t){ze(xn,e,t)}function xn(e,t){if(yn){var n=We(t);if(null!==(n=B(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),hn.length){var r=hn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{De(mn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>hn.length&&hn.push(e)}}}var _n=Object.freeze({get _enabled(){return yn},setEnabled:bn,isEnabled:function(){return yn},trapBubbledEvent:vn,trapCapturedEvent:gn,dispatchEvent:xn});function kn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var jn={animationend:kn("Animation","AnimationEnd"),animationiteration:kn("Animation","AnimationIteration"),animationstart:kn("Animation","AnimationStart"),transitionend:kn("Transition","TransitionEnd")},Cn={},En={};function On(e){if(Cn[e])return Cn[e];if(!jn[e])return e;var t,n=jn[e];for(t in n)if(n.hasOwnProperty(t)&&t in En)return Cn[e]=n[t];return e}o.canUseDOM&&(En=document.createElement("div").style,"AnimationEvent"in window||(delete jn.animationend.animation,delete jn.animationiteration.animation,delete jn.animationstart.animation),"TransitionEvent"in window||delete jn.transitionend.transition);var Pn={topAnimationEnd:On("animationend"),topAnimationIteration:On("animationiteration"),topAnimationStart:On("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:On("transitionend"),topWheel:"wheel"},Sn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Tn={},Rn=0,Nn="_reactListenersID"+(""+Math.random()).slice(2);function Mn(e){return Object.prototype.hasOwnProperty.call(e,Nn)||(e[Nn]=Rn++,Tn[e[Nn]]={}),Tn[e[Nn]]}function In(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ln(e,t){var n,r=In(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=In(r)}}function An(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var zn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Un={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Fn=null,Dn=null,Hn=null,Bn=!1;function Wn(e,t){if(Bn||null==Fn||Fn!==s())return null;var n=Fn;return"selectionStart"in n&&An(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,Hn&&l(Hn,n)?null:(Hn=n,(e=ue.getPooled(Un.select,Dn,e,t)).type="select",e.target=Fn,Z(e),e)}var Vn={eventTypes:Un,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=Mn(a),o=w.onSelect;for(var i=0;i<o.length;i++){var s=o[i];if(!a.hasOwnProperty(s)||!a[s]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?W(t):window,e){case"topFocus":(Be(a)||"true"===a.contentEditable)&&(Fn=a,Dn=t,Hn=null);break;case"topBlur":Hn=Dn=Fn=null;break;case"topMouseDown":Bn=!0;break;case"topContextMenu":case"topMouseUp":return Bn=!1,Wn(n,r);case"topSelectionChange":if(zn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function qn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Kn(e,t,n){var r=e.alternate;return null===r?((r=new qn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function $n(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)a=5;else switch(r){case et:return Yn(e.children,t,n,o);case ot:a=11,t|=3;break;case tt:a=11,t|=2;break;case Ge:a=7;break;case Je:a=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case nt:a=13;break;case rt:a=12;break;case at:a=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;f("130",null==r?r:typeof r,"")}else f("130",null==r?r:typeof r,"")}return(t=new qn(a,e,o,t)).type=r,t.expirationTime=n,t}function Yn(e,t,n,r){return(e=new qn(10,e,r,t)).expirationTime=n,e}function Qn(e,t,n){return(e=new qn(6,e,null,t)).expirationTime=n,e}function Xn(e,t,n){return(t=new qn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),j=q.getFiberCurrentPropsFromNode,C=q.getInstanceFromNode,E=q.getNodeFromInstance,I.injectEventPluginsByName({SimpleEventPlugin:pn,EnterLeaveEventPlugin:Kt,ChangeEventPlugin:Ft,SelectEventPlugin:Vn,BeforeInputEventPlugin:Ee});var Gn=null,Jn=null;function Zn(e){return function(t){try{return e(t)}catch(e){}}}function er(e){"function"==typeof Gn&&Gn(e)}function tr(e){"function"==typeof Jn&&Jn(e)}function nr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function rr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var or=void 0,ar=void 0;function ir(e){or=ar=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=nr(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=nr(null)):e=null,or=n,ar=e!==n?e:null}function sr(e,t){ir(e),e=or;var n=ar;null===n?rr(e,t):null===e.last||null===n.last?(rr(e,t),rr(n,t)):(rr(e,t),n.last=t)}function lr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function ur(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,l=n.first,u=!1;null!==l;){var c=l.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),u||(u=!0,n.baseState=e)}else u||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=lr(l,r,e,o),s=!0):(c=lr(l,r,e,o))&&(e=s?a({},e,c):a(e,c),s=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),u||(n.baseState=e),e}function cr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&f("191",o),o.call(t)}}var fr=Array.isArray;function pr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&f("110"),r=n.stateNode),r||f("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===c?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&f("148"),n._owner||f("254",e)}return e}function dr(e,t){"textarea"!==e.type&&f("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Kn(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function i(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Qn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=pr(e,t,n),r.return=e,r):((r=$n(n,e.mode,r)).ref=pr(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,a){return null===t||10!==t.tag?((t=Yn(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Qn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=$n(t,e.mode,n)).ref=pr(e,null,t),n.return=e,n;case Ze:return(t=Xn(t,e.mode,n)).return=e,t}if(fr(t)||st(t))return(t=Yn(t,e.mode,n,null)).return=e,t;dr(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===et?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case Ze:return n.key===o?u(e,t,n,r):null}if(fr(n)||st(n))return null!==o?null:c(e,t,n,r,null);dr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===et?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case Ze:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(fr(r)||st(r))return c(t,e=e.get(n)||null,r,o,null);dr(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,f=i,m=i=0,y=null;null!==f&&m<s.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var b=d(o,f,s[m],l);if(null===b){null===f&&(f=y);break}e&&f&&null===b.alternate&&t(o,f),i=a(b,i,m),null===c?u=b:c.sibling=b,c=b,f=y}if(m===s.length)return n(o,f),u;if(null===f){for(;m<s.length;m++)(f=p(o,s[m],l))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<s.length;m++)(y=h(f,o,m,s[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),i=a(y,i,m),null===c?u=y:c.sibling=y,c=y);return e&&f.forEach(function(e){return t(o,e)}),u}function y(o,i,s,l){var u=st(s);"function"!=typeof u&&f("150"),null==(s=u.call(s))&&f("151");for(var c=u=null,m=i,y=i=0,b=null,v=s.next();null!==m&&!v.done;y++,v=s.next()){m.index>y?(b=m,m=null):b=m.sibling;var g=d(o,m,v.value,l);if(null===g){m||(m=b);break}e&&m&&null===g.alternate&&t(o,m),i=a(g,i,y),null===c?u=g:c.sibling=g,c=g,m=b}if(v.done)return n(o,m),u;if(null===m){for(;!v.done;y++,v=s.next())null!==(v=p(o,v.value,l))&&(i=a(v,i,y),null===c?u=v:c.sibling=v,c=v);return u}for(m=r(o,m);!v.done;y++,v=s.next())null!==(v=h(m,o,y,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?y:v.key),i=a(v,i,y),null===c?u=v:c.sibling=v,c=v);return e&&m.forEach(function(e){return t(o,e)}),u}return function(e,r,a,s){"object"==typeof a&&null!==a&&a.type===et&&null===a.key&&(a=a.props.children);var l="object"==typeof a&&null!==a;if(l)switch(a.$$typeof){case Xe:e:{var u=a.key;for(l=r;null!==l;){if(l.key===u){if(10===l.tag?a.type===et:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===et?a.props.children:a.props,s)).ref=pr(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===et?((r=Yn(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=$n(a,e.mode,s)).ref=pr(e,r,a),s.return=e,e=s)}return i(e);case Ze:e:{for(l=a.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xn(a,e.mode,s)).return=e,e=r}return i(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,a,s)):(n(e,r),r=Qn(a,e.mode,s)),r.return=e,i(e=r);if(fr(a))return m(e,r,a,s);if(st(a))return y(e,r,a,s);if(l&&dr(e,a),void 0===a)switch(e.tag){case 2:case 1:f("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var mr=hr(!0),yr=hr(!1);function br(e,t,n,r,o,i,s){function u(e,t,n){p(e,t,n,t.expirationTime)}function p(e,t,n,r){t.child=null===e?yr(t,null,n,r):mr(t,e.child,n,r)}function d(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,a){if(d(e,t),!n&&!o)return r&&P(t,!1),b(e,t);n=t.stateNode,Ye.current=t;var i=o?null:n.render();return t.effectTag|=1,o&&(p(e,t,null,a),t.child=null),p(e,t,i,a),t.memoizedState=n.state,t.memoizedProps=n.props,r&&P(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?O(e,t.pendingContext,t.pendingContext!==t.context):t.context&&O(e,t.context,!1),x(e,t.containerInfo)}function y(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var a=0|o.stateNode;if(o.type===t&&0!=(a&n)){for(a=o;null!==a;){var i=a.alternate;if(0===a.expirationTime||a.expirationTime>r)a.expirationTime=r,null!==i&&(0===i.expirationTime||i.expirationTime>r)&&(i.expirationTime=r);else{if(null===i||!(0===i.expirationTime||i.expirationTime>r))break;i.expirationTime=r}a=a.return}a=null}else a=o.child;break;case 13:a=o.type===e.type?null:o.child;break;default:a=o.child}if(null!==a)a.return=o;else for(a=o;null!==a;){if(a===e){a=null;break}if(null!==(o=a.sibling)){a=o;break}a=a.return}o=a}}function b(e,t){if(null!==e&&t.child!==e.child&&f("153"),null!==t.child){var n=Kn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Kn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,g=e.shouldDeprioritizeSubtree,w=t.pushHostContext,x=t.pushHostContainer,_=r.pushProvider,k=n.getMaskedContext,j=n.getUnmaskedContext,C=n.hasContextChanged,E=n.pushContextProvider,O=n.pushTopLevelContextObject,P=n.invalidateContextProvider,S=o.enterHydrationState,T=o.resetHydrationState,R=o.tryToClaimNextHydratableInstance,N=(e=function(e,t,n,r,o){function i(e,t,n,r,o,a){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var i=e.stateNode;return e=e.type,"function"==typeof i.shouldComponentUpdate?i.shouldComponentUpdate(n,o,a):!(e.prototype&&e.prototype.isPureReactComponent&&l(t,n)&&l(r,o))}function s(e,t){t.updater=b,e.stateNode=t,t._reactInternalFiber=e}function u(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&b.enqueueReplaceState(t,t.state,null)}function f(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var p=e.cacheContext,d=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,y=e.hasContextChanged,b={isMounted:Yt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var a=n(e);sr(e,{expirationTime:a,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,a)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:s,callGetDerivedStateFromProps:f,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),i=o?d(e,r):c,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return s(e,n),e.memoizedState=l,null!==(t=f(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&p(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,a=e.pendingProps,i=h(e);o.props=a,o.state=e.memoizedState,o.refs=c,o.context=d(e,i),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&b.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=ur(r,e,n,o,a,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,s=e.stateNode;s.props=e.memoizedProps,s.state=e.memoizedState;var l=e.memoizedProps,c=e.pendingProps,p=s.context,m=h(e);m=d(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(l!==c||p!==m)&&u(e,s,c,m),p=e.memoizedState,t=null!==e.updateQueue?ur(null,e,e.updateQueue,s,c,t):p;var b=void 0;if(l!==c&&(b=f(e,0,c,t)),null!==b&&void 0!==b){t=null===t||void 0===t?b:a({},t,b);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,b))}return l!==c||p!==t||y()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((l=i(e,l,c,p,t,m))?(n||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.effectTag|=4)):("function"==typeof s.componentDidMount&&(e.effectTag|=4),r(e,c),o(e,t)),s.props=c,s.state=t,s.context=m,l):("function"==typeof s.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var s=t.type,l=t.stateNode;l.props=t.memoizedProps,l.state=t.memoizedState;var c=t.memoizedProps,p=t.pendingProps,m=l.context,b=h(t);b=d(t,b),(s="function"==typeof s.getDerivedStateFromProps||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(c!==p||m!==b)&&u(t,l,p,b),m=t.memoizedState,n=null!==t.updateQueue?ur(e,t,t.updateQueue,l,p,n):m;var v=void 0;if(c!==p&&(v=f(t,0,p,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var g=t.updateQueue;null!==g&&(g.baseState=a({},g.baseState,v))}return c!==p||m!==n||y()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,c,p,m,n,b))?(s||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(p,n,b),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(p,n,b)),"function"==typeof l.componentDidUpdate&&(t.effectTag|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,p),o(t,n)),l.props=p,l.state=n,l.context=b,v):("function"!=typeof l.componentDidUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof l.getSnapshotBeforeUpdate||c===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,s,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,M=e.callGetDerivedStateFromProps,I=e.constructClassInstance,L=e.mountClassInstance,A=e.resumeMountClassInstance,z=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:E(t);break;case 4:x(t,t.stateNode.containerInfo);break;case 13:_(t)}return null}switch(t.tag){case 0:null!==e&&f("155");var r=t.type,o=t.pendingProps,i=j(t);return r=r(o,i=k(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=M(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=E(t),N(t,r),L(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,u(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,C()||t.memoizedProps!==n?(r=j(t),o=o(n,r=k(t,r)),t.effectTag|=1,u(e,t,o),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 2:o=E(t),null===e?null===t.stateNode?(I(t,t.pendingProps),L(t,n),r=!0):r=A(t,n):r=z(e,t,n),i=!1;var s=t.updateQueue;return null!==s&&null!==s.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=ur(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){T(),e=b(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&S(t)?(t.effectTag|=2,t.child=yr(t,null,r,n)):(T(),u(e,t,r)),t.memoizedState=o,e=t.child}else T(),e=b(e,t);return e;case 5:return w(t),null===e&&R(t),o=t.type,s=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,C()||s!==r||((s=1&t.mode&&g(o,r))&&(t.expirationTime=1073741823),s&&1073741823===n)?(s=r.children,v(o,r)?s=null:i&&v(o,i)&&(t.effectTag|=16),d(e,t),1073741823!==n&&1&t.mode&&g(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(u(e,t,s),t.memoizedProps=r,e=t.child)):e=b(e,t),e;case 6:return null===e&&R(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,C()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?yr(t,t.stateNode,r,n):mr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return x(t,t.stateNode.containerInfo),o=t.pendingProps,C()||t.memoizedProps!==o?(null===e?t.child=mr(t,null,o,n):u(e,t,o),t.memoizedProps=o,e=t.child):e=b(e,t),e;case 14:return u(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,C()||t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 11:return n=t.pendingProps.children,C()||null!==n&&t.memoizedProps!==n?(u(e,t,n),t.memoizedProps=n,e=t.child):e=b(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,a=t.memoizedProps;if(!C()&&a===o)return t.stateNode=0,_(t),b(e,t);var i=o.value;if(t.memoizedProps=o,null===a)i=1073741823;else if(a.value===o.value){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t);i=0}else{var s=a.value;if(s===i&&(0!==s||1/s==1/i)||s!=s&&i!=i){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t);i=0}else if(i="function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,i):1073741823,0==(i|=0)){if(a.children===o.children)return t.stateNode=0,_(t),b(e,t)}else y(t,r,i,n)}return t.stateNode=i,_(t),u(e,t,o.children),t.child}(e,t,n);case 12:r=t.type,i=t.pendingProps;var l=t.memoizedProps;return o=r._currentValue,s=r._changedBits,C()||0!==s||l!==i?(t.memoizedProps=i,void 0!==(l=i.unstable_observedBits)&&null!==l||(l=1073741823),t.stateNode=l,0!=(s&l)&&y(t,r,s,n),u(e,t,n=(n=i.children)(o)),e=t.child):e=b(e,t),e;default:f("156")}}}}function vr(e,t){var n=t.source;null===t.stack&&ut(n),null!==n&&lt(n),t=t.value,null!==e&&2===e.tag&&lt(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var gr={};function wr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)I(e),e=e.return;te=null,ne=0,ee=null,ae=!1}function n(e){return null!==ie&&ie.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=R(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var a=o.updateQueue;a=null===a?0:a.expirationTime;break e;default:a=0}for(var i=o.child;null!==i;)0!==i.expirationTime&&(0===a||a>i.expirationTime)&&(a=i.expirationTime),i=i.sibling;o.expirationTime=a}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ae=!0;break}e=n}else{if(null!==(e=M(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=T(e.alternate,e,ne);return null===t&&(t=r(e)),Ye.current=null,t}function i(e,n,a){Z&&f("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=Kn((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var i=!1;;){try{if(a)for(;null!==ee&&!j();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){i=!0,C(e);break}var s=(a=ee).return;if(null===s){i=!0,C(e);break}N(s,a,e),ee=r(a)}break}return Z=!1,i||null!==ee?null:ae?(e.pendingCommitExpirationTime=n,e.current.alternate):void f("262")}function s(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ut(e)},next:null}),p(t,r)}function l(e,t){e:{Z&&!oe&&f("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){s(e,r,t,1),e=void 0;break e}break;case 3:s(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&s(e,e,t,1),e=void 0}return e}function u(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?xe?10*(1+((d()+50)/10|0)):25*(1+((d()+500)/25|0)):1,xe&&(0===he||e>he)&&(he=e),e}function p(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||y(r,n),je>ke&&f("185")}e=e.return}n=void 0}return n}function d(){return X=V()-Q,2+(X/10|0)}function h(e,t,n,r,o){var a=J;J=1;try{return e(t,n,r,o)}finally{J=a}}function m(e){if(0!==ue){if(e>ue)return;K(ce)}var t=V()-Q;ue=e,ce=q(v,{timeout:10*(e-2)-t})}function y(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(se=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=se;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(ge?we&&(pe=e,de=1,_(e,1,!1)):1===t?g():m(t))}function b(){var e=0,t=null;if(null!==le)for(var n=le,r=se;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&f("244"),r===r.nextScheduledRoot){se=le=r.nextScheduledRoot=null;break}if(r===se)se=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=se,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t&&1===e?je++:je=0,pe=t,de=e}function v(e){w(0,!0,e)}function g(){w(1,!1,null)}function w(e,t,n){if(ve=n,b(),t)for(;null!==pe&&0!==de&&(0===e||e>=de)&&(!me||d()>=de);)_(pe,de,!me),b();else for(;null!==pe&&0!==de&&(0===e||e>=de);)_(pe,de,!1),b();null!==ve&&(ue=0,ce=-1),0!==de&&m(de),ve=null,me=!1,x()}function x(){if(je=0,null!==_e){var e=_e;_e=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ye||(ye=!0,be=e)}}}if(ye)throw e=be,be=null,ye=!1,e}function _(e,t,n){fe&&f("245"),fe=!0,n?null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(j()?e.finishedWork=n:k(e,n,t))):null!==(n=e.finishedWork)?k(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&k(e,n,t)),fe=!1}function k(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===_e?_e=[r]:_e.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&f("177"),0===(r=n.pendingCommitExpirationTime)&&f("261"),n.pendingCommitExpirationTime=0;var o=d();if(Ye.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var a=t.firstEffect}else a=t;else a=t.firstEffect;for($(n.containerInfo),re=a;null!==re;){var i=!1,s=void 0;try{for(;null!==re;)2048&re.effectTag&&L(re.alternate,re),re=re.nextEffect}catch(e){i=!0,s=e}i&&(null===re&&f("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(re=a;null!==re;){i=!1,s=void 0;try{for(;null!==re;){var u=re.effectTag;if(16&u&&A(re),128&u){var c=re.alternate;null!==c&&W(c)}switch(14&u){case 2:z(re),re.effectTag&=-3;break;case 6:z(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:U(re)}re=re.nextEffect}}catch(e){i=!0,s=e}i&&(null===re&&f("178"),l(re,s),null!==re&&(re=re.nextEffect))}for(Y(n.containerInfo),n.current=t,re=a;null!==re;){u=!1,c=void 0;try{for(a=n,i=o,s=r;null!==re;){var p=re.effectTag;36&p&&D(a,re.alternate,re,i,s),256&p&&H(re,C),128&p&&B(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){u=!0,c=e}u&&(null===re&&f("178"),l(re,c),null!==re&&(re=re.nextEffect))}Z=oe=!1,er(t.stateNode),0===(t=n.current.expirationTime)&&(ie=null),e.remainingExpirationTime=t}function j(){return!(null===ve||ve.timeRemaining()>Ce)&&(me=!0)}function C(e){null===pe&&f("246"),pe.remainingExpirationTime=0,ye||(ye=!0,be=e)}var E=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),O=function(e,t){function n(e){return e===gr&&f("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var a=t.push,i=t.pop,s=e(gr),l=e(gr),u=e(gr);return{getHostContext:function(){return n(s.current)},getRootHostContainer:function(){return n(u.current)},popHostContainer:function(e){i(s,e),i(l,e),i(u,e)},popHostContext:function(e){l.current===e&&(i(s,e),i(l,e))},pushHostContainer:function(e,t){a(u,t,e),a(l,e,e),a(s,gr,e),t=o(t),i(s,e),a(s,t,e)},pushHostContext:function(e){var t=n(u.current),o=n(s.current);o!==(t=r(o,e.type,t))&&(a(l,e,e),a(s,t,e))}}}(e,E),P=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||f("108",lt(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,s=e.pop,l=o(c),u=o(!1),p=c;return{getUnmaskedContext:function(e){return n(e)?p:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return c;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in r)i[a]=n[a];return o&&t(e,n,i),i},hasContextChanged:function(){return u.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(s(u,e),s(l,e))},popTopLevelContextObject:function(e){s(u,e),s(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&f("168"),i(l,t,e),i(u,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||c,p=l.current,i(l,t,e),i(u,u.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||f("169"),t){var o=r(e,p);n.__reactInternalMemoizedMergedChildContext=o,s(u,e),s(l,e),i(l,o,e)}else s(u,e);i(u,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&f("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||f("171")}return e.stateNode.context}}}(E);E=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),a=t(null),i=t(0);return{pushProvider:function(e){var t=e.type._context;n(i,t._changedBits,e),n(a,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=i.current,n=a.current;r(o,e),r(a,e),r(i,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(E);var S=function(e){function t(e,t){var n=new qn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=a(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=i(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;p=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){f("175")},prepareToHydrateHostTextInstance:function(){f("176")},popHydrationState:function(){return!1}};var a=e.canHydrateInstance,i=e.canHydrateTextInstance,s=e.getNextHydratableSibling,l=e.getFirstHydratableChild,u=e.hydrateInstance,c=e.hydrateTextInstance,p=null,d=null,h=!1;return{enterHydrationState:function(e){return d=l(e.stateNode.containerInfo),p=e,h=!0},resetHydrationState:function(){d=p=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=d;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,h=!1,void(p=e);t(p,d)}p=e,d=l(r)}else e.effectTag|=2,h=!1,p=e}},prepareToHydrateHostInstance:function(e,t,n){return t=u(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==p)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=d;n;)t(e,n),n=s(n);return r(e),d=p?s(e.stateNode):null,!0}}}(e),T=br(e,O,P,E,S,p,u).beginWork,R=function(e,t,n,r,o){function a(e){e.effectTag|=4}var i=e.createInstance,s=e.createTextInstance,l=e.appendInitialChild,u=e.finalizeInitialChildren,c=e.prepareUpdate,p=e.persistence,d=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,y=t.popHostContainer,b=n.popContextProvider,v=n.popTopLevelContextObject,g=r.popProvider,w=o.prepareToHydrateHostInstance,x=o.prepareToHydrateHostTextInstance,_=o.popHydrationState,k=void 0,j=void 0,C=void 0;return e.mutation?(k=function(){},j=function(e,t,n){(t.updateQueue=n)&&a(t)},C=function(e,t,n,r){n!==r&&a(t)}):f(p?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return b(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return y(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(_(t),t.effectTag&=-3),k(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=d();var o=t.type;if(null!==e&&null!=t.stateNode){var p=e.memoizedProps,E=t.stateNode,O=m();E=c(E,o,p,r,n,O),j(e,t,E,o,p,r,n,O),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&f("166"),null;if(e=m(),_(t))w(t,n,e)&&a(t);else{p=i(o,r,n,e,t);e:for(O=t.child;null!==O;){if(5===O.tag||6===O.tag)l(p,O.stateNode);else if(4!==O.tag&&null!==O.child){O.child.return=O,O=O.child;continue}if(O===t)break;for(;null===O.sibling;){if(null===O.return||O.return===t)break e;O=O.return}O.sibling.return=O.return,O=O.sibling}u(p,o,r,n,e)&&a(t),t.stateNode=p}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)C(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&f("166"),null;e=d(),n=m(),_(t)?x(t)&&a(t):t.stateNode=s(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||f("165"),t.tag=8,o=[];e:for((p=t.stateNode)&&(p.return=t);null!==p;){if(5===p.tag||6===p.tag||4===p.tag)f("247");else if(9===p.tag)o.push(p.pendingProps.value);else if(null!==p.child){p.child.return=p,p=p.child;continue}for(;null===p.sibling;){if(null===p.return||p.return===t)break e;p=p.return}p.sibling.return=p.return,p=p.sibling}return r=(p=r.handler)(r.props,o),t.child=mr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return y(t),k(t),null;case 13:return g(t),null;case 12:return null;case 0:f("167");default:f("156")}}}}(e,O,P,E,S).completeWork,N=(O=function(e,t,n,r,o){var a=e.popHostContainer,i=e.popHostContext,s=t.popContextProvider,l=t.popTopLevelContextObject,u=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ut(t)};do{switch(e.tag){case 3:return ir(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){ir(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:s(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return a(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return i(e),null;case 4:return a(e),null;case 13:return u(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:s(e);break;case 3:a(e),l(e);break;case 5:i(e);break;case 4:a(e);break;case 13:u(e)}}}}(O,P,E,0,n)).throwException,M=O.unwindWork,I=O.unwindInterruptedWork,L=(O=function(e,t,n,r,o){function a(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function i(e){switch(tr(e),e.tag){case 2:a(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:a(e);break;case 7:s(e.stateNode);break;case 4:p&&u(e)}}function s(e){for(var t=e;;)if(i(t),null===t.child||p&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function u(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&f("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)s(t),o?_(r,t.stateNode):x(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:i(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,p=e.mutation;e=e.persistence,p||f(e?"235":"236");var d=p.commitMount,h=p.commitUpdate,m=p.resetTextContent,y=p.commitTextUpdate,b=p.appendChild,v=p.appendChildToContainer,g=p.insertBefore,w=p.insertInContainerBefore,x=p.removeChild,_=p.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:f("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}f("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:f("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?w(t,o.stateNode,n):g(t,o.stateNode,n):r?v(t,o.stateNode):b(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){u(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,a=t.updateQueue;t.updateQueue=null,null!==a&&h(n,a,o,e,r,t)}break;case 6:null===t.stateNode&&f("162"),n=t.memoizedProps,y(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:f("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&cr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}cr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&d(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:f("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&f("264");var a=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<a.length;n++){var i=(r=a[n]).value,s=r.stack;vr(e,r),t.componentDidCatch(i,{componentStack:null!==s?s:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&f("264"),a=n.capturedValues,n.capturedValues=null,n=0;n<a.length;n++)vr(e,r=a[n]),t(r.value);break;default:f("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ie?ie=new Set([e]):ie.add(e)})).commitBeforeMutationLifeCycles,A=O.commitResetTextContent,z=O.commitPlacement,U=O.commitDeletion,F=O.commitWork,D=O.commitLifeCycles,H=O.commitErrorLogging,B=O.commitAttachRef,W=O.commitDetachRef,V=e.now,q=e.scheduleDeferredCallback,K=e.cancelDeferredCallback,$=e.prepareForCommit,Y=e.resetAfterCommit,Q=V(),X=Q,G=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ae=!1,ie=null,se=null,le=null,ue=0,ce=-1,fe=!1,pe=null,de=0,he=0,me=!1,ye=!1,be=null,ve=null,ge=!1,we=!1,xe=!1,_e=null,ke=1e3,je=0,Ce=1;return{recalculateCurrentTime:d,computeExpirationForFiber:u,scheduleWork:p,requestWork:y,flushRoot:function(e,t){fe&&f("253"),pe=e,de=t,_(e,t,!1),g(),x()},batchedUpdates:function(e,t){var n=ge;ge=!0;try{return e(t)}finally{(ge=n)||fe||g()}},unbatchedUpdates:function(e,t){if(ge&&!we){we=!0;try{return e(t)}finally{we=!1}}return e(t)},flushSync:function(e,t){fe&&f("187");var n=ge;ge=!0;try{return h(e,t)}finally{ge=n,g()}},flushControlled:function(e){var t=ge;ge=!0;try{h(e)}finally{(ge=t)||fe||w(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((d()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(xe)return e(t,n);ge||fe||0===he||(w(he,!1,null),he=0);var r=xe,o=ge;ge=xe=!0;try{return e(t,n)}finally{xe=r,(ge=o)||fe||g()}},flushInteractiveUpdates:function(){fe||0===he||(w(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((d()+500)/25|0));return e<=G&&(e=G+1),G=e},legacyContext:P}}function xr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var i=u(n);n=f(n)?p(n,i):i}else n=c;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),s(r,o),o}function n(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var r=e.getPublicInstance,o=(e=wr(e)).recalculateCurrentTime,i=e.computeExpirationForFiber,s=e.scheduleWork,l=e.legacyContext,u=l.findCurrentUnmaskedContext,f=l.isContextProvider,p=l.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new qn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,r,a){var s=n.current;return t(e,n,r,o(),s=i(s),a)},updateContainerAtExpirationTime:function(e,n,r,a,i){return t(e,n,r,o(),a,i)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return r(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:n,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Gn=Zn(function(e){return t.onCommitFiberRoot(n,e)}),Jn=Zn(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return n(e)},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var _r=Object.freeze({default:xr}),kr=_r&&xr||_r,jr=kr.default?kr.default:kr;var Cr="object"==typeof performance&&"function"==typeof performance.now,Er=void 0;Er=Cr?function(){return performance.now()}:function(){return Date.now()};var Or=void 0,Pr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Sr=null,Tr=!1,Rr=-1,Nr=!1,Mr=0,Ir=33,Lr=33,Ar=void 0;Ar=Cr?{didTimeout:!1,timeRemaining:function(){var e=Mr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Mr-Date.now();return 0<e?e:0}};var zr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===zr){if(Tr=!1,e=Er(),0>=Mr-e){if(!(-1!==Rr&&Rr<=e))return void(Nr||(Nr=!0,requestAnimationFrame(Ur)));Ar.didTimeout=!0}else Ar.didTimeout=!1;Rr=-1,e=Sr,Sr=null,null!==e&&e(Ar)}},!1);var Ur=function(e){Nr=!1;var t=e-Mr+Lr;t<Lr&&Ir<Lr?(8>t&&(t=8),Lr=t<Ir?Ir:t):Ir=t,Mr=e+Lr,Tr||(Tr=!0,window.postMessage(zr,"*"))};Or=function(e,t){return Sr=e,null!=t&&"number"==typeof t.timeout&&(Rr=Er()+t.timeout),Nr||(Nr=!0,requestAnimationFrame(Ur)),0},Pr=function(){Sr=null,Tr=!1,Rr=-1}}else Or=window.requestIdleCallback,Pr=window.cancelIdleCallback;else Or=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Pr=function(e){clearTimeout(e)};function Fr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Dr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Hr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Br(e,t){return null!=t.dangerouslySetInnerHTML&&f("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&f("92"),Array.isArray(t)&&(1>=t.length||f("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function Vr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function qr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var Kr="http://www.w3.org/1999/xhtml",$r="http://www.w3.org/2000/svg";function Yr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Yr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Xr,Gr=void 0,Jr=(Xr=function(e,t){if(e.namespaceURI!==$r||"innerHTML"in e)e.innerHTML=t;else{for((Gr=Gr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Gr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(e,t)})}:Xr);function Zr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var eo={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},to=["Webkit","ms","Moz","O"];function no(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||eo.hasOwnProperty(o)&&eo[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(eo).forEach(function(e){to.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),eo[t]=eo[e]})});var ro=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function oo(e,t,n){t&&(ro[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&f("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&f("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||f("61")),null!=t.style&&"object"!=typeof t.style&&f("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var io=Kr,so=i.thatReturns("");function lo(e,t){var n=Mn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=w[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?gn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(gn("topFocus","focus",e),gn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(Ve("cancel",!0)&&gn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(Ve("close",!0)&&gn("topClose","close",e),n.topClose=!0):Pn.hasOwnProperty(o)&&vn(o,Pn[o],e),n[o]=!0)}}function uo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===io&&(r=Yr(e)),r===io?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":vn("topLoad","load",e);var s=n;break;case"video":case"audio":for(s in Sn)Sn.hasOwnProperty(s)&&vn(s,Sn[s],e);s=n;break;case"source":vn("topError","error",e),s=n;break;case"img":case"image":case"link":vn("topError","error",e),vn("topLoad","load",e),s=n;break;case"form":vn("topReset","reset",e),vn("topSubmit","submit",e),s=n;break;case"details":vn("topToggle","toggle",e),s=n;break;case"input":gt(e,n),s=vt(e,n),vn("topInvalid","invalid",e),lo(r,"onChange");break;case"option":s=Fr(e,n);break;case"select":Hr(e,n),s=a({},n,{value:void 0}),vn("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":Wr(e,n),s=Br(e,n),vn("topInvalid","invalid",e),lo(r,"onChange");break;default:s=n}oo(t,s,so);var l,u=s;for(l in u)if(u.hasOwnProperty(l)){var c=u[l];"style"===l?no(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Jr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&Zr(e,c):"number"==typeof c&&Zr(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(g.hasOwnProperty(l)?null!=c&&lo(r,l):null!=c&&bt(e,l,c,o))}switch(t){case"input":Ke(e),_t(e,n);break;case"textarea":Ke(e),qr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Dr(e,!!n.multiple,t,!1):null!=n.defaultValue&&Dr(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=i)}}function po(e,t,n,r,o){var s=null;switch(t){case"input":n=vt(e,n),r=vt(e,r),s=[];break;case"option":n=Fr(e,n),r=Fr(e,r),s=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),s=[];break;case"textarea":n=Br(e,n),r=Br(e,r),s=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=i)}oo(t,r,so),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var u=n[e];for(t in u)u.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(g.hasOwnProperty(e)?s||(s=[]):(s=s||[]).push(e,null));for(e in r){var c=r[e];if(u=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==u&&(null!=c||null!=u))if("style"===e)if(u){for(t in u)!u.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&u[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(s||(s=[]),s.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(e,""+c)):"children"===e?u===c||"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(g.hasOwnProperty(e)?(null!=c&&lo(o,e),s||u===c||(s=[])):(s=s||[]).push(e,c))}return l&&(s=s||[]).push("style",l),s}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&wt(e,o),ao(n,r),r=ao(n,o);for(var a=0;a<t.length;a+=2){var i=t[a],s=t[a+1];"style"===i?no(e,s):"dangerouslySetInnerHTML"===i?Jr(e,s):"children"===i?Zr(e,s):bt(e,i,s,r)}switch(n){case"input":xt(e,o);break;case"textarea":Vr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Dr(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Dr(e,!!o.multiple,o.defaultValue,!0):Dr(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":vn("topLoad","load",e);break;case"video":case"audio":for(var a in Sn)Sn.hasOwnProperty(a)&&vn(a,Sn[a],e);break;case"source":vn("topError","error",e);break;case"img":case"image":case"link":vn("topError","error",e),vn("topLoad","load",e);break;case"form":vn("topReset","reset",e),vn("topSubmit","submit",e);break;case"details":vn("topToggle","toggle",e);break;case"input":gt(e,n),vn("topInvalid","invalid",e),lo(o,"onChange");break;case"select":Hr(e,n),vn("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":Wr(e,n),vn("topInvalid","invalid",e),lo(o,"onChange")}for(var s in oo(t,n,so),r=null,n)n.hasOwnProperty(s)&&(a=n[s],"children"===s?"string"==typeof a?e.textContent!==a&&(r=["children",a]):"number"==typeof a&&e.textContent!==""+a&&(r=["children",""+a]):g.hasOwnProperty(s)&&null!=a&&lo(o,s));switch(t){case"input":Ke(e),_t(e,n);break;case"textarea":Ke(e),qr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=i)}return r}function yo(e,t){return e.nodeValue!==t}var bo=Object.freeze({createElement:uo,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:yo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(xt(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=V(r);o||f("90"),$e(r),xt(r,o)}}}break;case"textarea":Vr(e,n);break;case"select":null!=(t=n.value)&&Dr(e,!!n.multiple,t,!1)}}});Re.injectFiberControlledHostComponent(bo);var vo=null,go=null;function wo(e){this._expirationTime=Co.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function xo(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function _o(e,t,n){this._internalRoot=Co.createContainer(e,t,n)}function ko(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function jo(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}wo.prototype.render=function(e){this._defer||f("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new xo;return Co.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},wo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},wo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||f("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&f("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,Co.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},wo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},xo.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},xo.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&f("191",n),n()}}},_o.prototype.render=function(e,t){var n=this._internalRoot,r=new xo;return null!==(t=void 0===t?null:t)&&r.then(t),Co.updateContainer(e,n,null,r._onCommit),r},_o.prototype.unmount=function(e){var t=this._internalRoot,n=new xo;return null!==(e=void 0===e?null:e)&&n.then(e),Co.updateContainer(null,t,null,n._onCommit),n},_o.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new xo;return null!==(n=void 0===n?null:n)&&o.then(n),Co.updateContainer(t,r,e,o._onCommit),o},_o.prototype.createBatch=function(){var e=new wo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var Co=jr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=yn;var e=s();if(An(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var a=0,i=-1,l=-1,u=0,c=0,f=e,p=null;t:for(;;){for(var d;f!==t||0!==r&&3!==f.nodeType||(i=a+r),f!==o||0!==n&&3!==f.nodeType||(l=a+n),3===f.nodeType&&(a+=f.nodeValue.length),null!==(d=f.firstChild);)p=f,f=d;for(;;){if(f===e)break t;if(p===t&&++u===r&&(i=a),p===o&&++c===n&&(l=a),null!==(d=f.nextSibling))break;p=(f=p).parentNode}f=d}t=-1===i||-1===l?null:{start:i,end:l}}else t=null}t=t||{start:0,end:0}}else t=null;go={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=go,t=s(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&u(document.documentElement,n)){if(An(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[re()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=Ln(n,e);var a=Ln(n,r);if(o&&a&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==a.node||t.focusOffset!==a.offset)){var i=document.createRange();i.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(i),t.extend(a.node,a.offset)):(i.setEnd(a.node,a.offset),t.addRange(i))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}go=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=uo(e,t,n,r))[D]=o,e[H]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),jo(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[D]=r,e},now:Er,mutation:{commitMount:function(e,t,n){jo(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[H]=o,ho(e,t,n,r,o)},resetTextContent:function(e){Zr(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,a){return e[D]=a,e[H]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[D]=n,yo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Or,cancelDeferredCallback:Pr}),Eo=Co;function Oo(e,t,n,r,o){ko(n)||f("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var i=o;o=function(){var e=Co.getPublicRootInstance(a._internalRoot);i.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new _o(e,!1,t)}(n,r),"function"==typeof o){var s=o;o=function(){var e=Co.getPublicRootInstance(a._internalRoot);s.call(e)}}Co.unbatchedUpdates(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return Co.getPublicRootInstance(a._internalRoot)}function Po(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return ko(t)||f("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ze,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ae=Eo.batchedUpdates,ze=Eo.interactiveUpdates,Ue=Eo.flushInteractiveUpdates;var So={createPortal:Po,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return Co.findHostInstance(t);"function"==typeof e.render?f("188"):f("213",Object.keys(e))},hydrate:function(e,t,n){return Oo(null,e,t,!0,n)},render:function(e,t,n){return Oo(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&f("38"),Oo(e,t,n,!1,r)},unmountComponentAtNode:function(e){return ko(e)||f("40"),!!e._reactRootContainer&&(Co.unbatchedUpdates(function(){Oo(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Po.apply(void 0,arguments)},unstable_batchedUpdates:Co.batchedUpdates,unstable_deferredUpdates:Co.deferredUpdates,flushSync:Co.flushSync,unstable_flushControlled:Co.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:U,EventPluginRegistry:k,EventPropagators:te,ReactControlledComponent:Le,ReactDOMComponentTree:q,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new _o(e,!0,null!=t&&!0===t.hydrate)}};Co.injectIntoDevTools({findFiberByHostInstance:B,bundleType:0,version:"16.3.1",rendererPackageName:"react-dom"});var To=Object.freeze({default:So}),Ro=To&&So||To;e.exports=Ro.default?Ro.default:Ro},"./node_modules/react-dom/index.js":function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n("./node_modules/react-dom/cjs/react-dom.production.min.js")},"./node_modules/react-loadable/lib/index.js":function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var s=n("./node_modules/react/index.js"),l=n("./node_modules/prop-types/index.js"),u=[],c=[];function f(e){var t=e(),n={loading:!0,loaded:null,error:null};return n.promise=t.then(function(e){return n.loading=!1,n.loaded=e,e}).catch(function(e){throw n.loading=!1,n.error=e,e}),n}function p(e){var t={loading:!1,loaded:{},error:null},n=[];try{Object.keys(e).forEach(function(r){var o=f(e[r]);o.loading?t.loading=!0:(t.loaded[r]=o.loaded,t.error=o.error),n.push(o.promise),o.promise.then(function(e){t.loaded[r]=e}).catch(function(e){t.error=e})})}catch(e){t.error=e}return t.promise=Promise.all(n).then(function(e){return t.loading=!1,e}).catch(function(e){throw t.loading=!1,e}),t}function d(e,t){return s.createElement((n=e)&&n.__esModule?n.default:n,t);var n}function h(e,t){var f,p;if(!t.loading)throw new Error("react-loadable requires a `loading` component");var h=Object.assign({loader:null,loading:null,delay:200,timeout:null,render:d,webpack:null,modules:null},t),m=null;function y(){return m||(m=e(h.loader)),m.promise}return u.push(y),"function"==typeof h.webpack&&c.push(function(){if(e=h.webpack,"object"===r(n.m)&&e().every(function(e){return void 0!==e&&void 0!==n.m[e]}))return y();var e}),p=f=function(e){function t(n){o(this,t);var r=a(this,e.call(this,n));return y(),r.state={error:m.error,pastDelay:!1,timedOut:!1,loading:m.loading,loaded:m.loaded},r}return i(t,e),t.preload=function(){return y()},t.prototype.componentWillMount=function(){var e=this;if(this._mounted=!0,this.context.loadable&&Array.isArray(h.modules)&&h.modules.forEach(function(t){e.context.loadable.report(t)}),m.loading){"number"==typeof h.delay&&(0===h.delay?this.setState({pastDelay:!0}):this._delay=setTimeout(function(){e.setState({pastDelay:!0})},h.delay)),"number"==typeof h.timeout&&(this._timeout=setTimeout(function(){e.setState({timedOut:!0})},h.timeout));var t=function(){e._mounted&&(e.setState({error:m.error,loaded:m.loaded,loading:m.loading}),e._clearTimeouts())};m.promise.then(function(){t()}).catch(function(e){throw t(),e})}},t.prototype.componentWillUnmount=function(){this._mounted=!1,this._clearTimeouts()},t.prototype._clearTimeouts=function(){clearTimeout(this._delay),clearTimeout(this._timeout)},t.prototype.render=function(){return this.state.loading||this.state.error?s.createElement(h.loading,{isLoading:this.state.loading,pastDelay:this.state.pastDelay,timedOut:this.state.timedOut,error:this.state.error}):this.state.loaded?h.render(this.state.loaded,this.props):null},t}(s.Component),f.contextTypes={loadable:l.shape({report:l.func.isRequired})},p}function m(e){return h(f,e)}m.Map=function(e){if("function"!=typeof e.render)throw new Error("LoadableMap requires a `render(loaded, props)` function");return h(p,e)};var y=function(e){function t(){return o(this,t),a(this,e.apply(this,arguments))}return i(t,e),t.prototype.getChildContext=function(){return{loadable:{report:this.props.report}}},t.prototype.render=function(){return s.Children.only(this.props.children)},t}(s.Component);function b(e){for(var t=[];e.length;){var n=e.pop();t.push(n())}return Promise.all(t).then(function(){if(e.length)return b(e)})}y.propTypes={report:l.func.isRequired},y.childContextTypes={loadable:l.shape({report:l.func.isRequired}).isRequired},m.Capture=y,m.preloadAll=function(){return new Promise(function(e,t){b(u).then(e,t)})},m.preloadReady=function(){return new Promise(function(e,t){b(c).then(e,e)})},e.exports=m},"./node_modules/react-router-dom/es/index.js":function(e,t,n){"use strict";n.r(t);var r=n("./node_modules/warning/browser.js"),o=n.n(r),a=n("./node_modules/react/index.js"),i=n.n(a),s=n("./node_modules/prop-types/index.js"),l=n.n(s),u=n("./node_modules/history/createBrowserHistory.js"),c=n.n(u),f=n("./node_modules/invariant/browser.js"),p=n.n(f),d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=h(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:d({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;p()(null==n||1===i.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?i.a.Children.only(e):null},t}(i.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var y=m,b=y;function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var g=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=v(this,e.call.apply(e,[this].concat(a))),r.history=c()(r.props),v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(b,{history:this.history,children:this.props.children})},t}(i.a.Component);g.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var w=g,x=n("./node_modules/history/createHashHistory.js"),_=n.n(x);function k(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var j=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=k(this,e.call.apply(e,[this].concat(a))),r.history=_()(r.props),k(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(b,{history:this.history,children:this.props.children})},t}(i.a.Component);j.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var C=j,E=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var P=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},S=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=O(this,e.call.apply(e,[this].concat(a))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!P(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,a=n.to;o?t.replace(a):t.push(a)}},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);p()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return i.a.createElement("a",E({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(i.a.Component);S.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},S.defaultProps={replace:!1},S.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var T=S,R=n("./node_modules/history/createMemoryHistory.js"),N=n.n(R);function M(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var I=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=M(this,e.call.apply(e,[this].concat(a))),r.history=N()(r.props),M(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return i.a.createElement(y,{history:this.history,children:this.props.children})},t}(i.a.Component);I.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var L=I,A=n("./node_modules/react-router/node_modules/path-to-regexp/index.js"),z=n.n(A),U={},F=0,D=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,a=n.exact,i=void 0!==a&&a,s=n.strict,l=void 0!==s&&s,u=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=U[n]||(U[n]={});if(r[e])return r[e];var o=[],a={re:z()(e,o,t),keys:o};return F<1e4&&(r[e]=a,F++),a}(o,{end:i,strict:l,sensitive:void 0!==u&&u}),f=c.re,p=c.keys,d=f.exec(e);if(!d)return null;var h=d[0],m=d.slice(1),y=e===h;return i&&!y?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:y,params:p.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},H=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function B(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var W=function(e){return 0===i.a.Children.count(e)},V=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=B(this,e.call.apply(e,[this].concat(a))),r.state={match:r.computeMatch(r.props,r.context.router)},B(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:H({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,a=e.strict,i=e.exact,s=e.sensitive;if(n)return n;p()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,u=(r||l.location).pathname;return o?D(u,{path:o,strict:a,exact:i,sensitive:s}):l.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!W(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!W(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,a=this.context.router,s=a.history,l=a.route,u=a.staticContext,c={match:e,location:this.props.location||l.location,history:s,staticContext:u};return r?e?i.a.createElement(r,c):null:o?e?o(c):null:n?"function"==typeof n?n(c):W(n)?null:i.a.Children.only(n):null},t}(i.a.Component);V.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},V.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},V.childContextTypes={router:l.a.object.isRequired};var q=V,K=q,$=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Q=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,a=e.activeClassName,s=e.className,l=e.activeStyle,u=e.style,c=e.isActive,f=e.ariaCurrent,p=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return i.a.createElement(K,{path:"object"===(void 0===t?"undefined":Y(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return i.a.createElement(T,$({to:t,className:o?[s,a].filter(function(e){return e}).join(" "):s,style:o?$({},u,l):u,"aria-current":o&&f},p))}})};Q.propTypes={to:T.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},Q.defaultProps={activeClassName:"active",ariaCurrent:"true"};var X=Q;var G=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(i.a.Component);G.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},G.defaultProps={when:!0},G.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var J=G,Z=n("./node_modules/resolve-pathname/index.js"),ee=n("./node_modules/value-equal/index.js"),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(i.a.Component);oe.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ae=oe,ie=n("./node_modules/history/PathUtils.js"),se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ue=function(e,t){return e?se({},t,{pathname:Object(ie.addLeadingSlash)(e)+t.pathname}):t},ce=function(e){return"string"==typeof e?Object(ie.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,a=void 0===o?"":o,i=t.hash,s=void 0===i?"":i,{pathname:r,search:"?"===a?"":a,hash:"#"===s?"":s});var t,n,r,o,a,i,s},fe=function(e){return"string"==typeof e?e:Object(ie.createPath)(e)},pe=function(e){return function(){p()(!1,"You cannot %s with <StaticRouter>",e)}},de=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=le(this,e.call.apply(e,[this].concat(a))),r.createHref=function(e){return Object(ie.addLeadingSlash)(r.props.basename+fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=ue(n,ce(e)),o.url=fe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=ue(n,ce(e)),o.url=fe(o.location)},r.handleListen=function(){return de},r.handleBlock=function(){return de},le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ie.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:se({},t,{pathname:t.pathname.substr(n.length)})}(t,ce(n)),push:this.handlePush,replace:this.handleReplace,go:pe("go"),goBack:pe("goBack"),goForward:pe("goForward"),listen:this.handleListen,block:this.handleBlock};return i.a.createElement(y,se({},r,{history:o}))},t}(i.a.Component);he.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:l.a.object.isRequired};var me=he;var ye=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){p()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return i.a.Children.forEach(t,function(t){if(i.a.isValidElement(t)){var a=t.props,s=a.path,l=a.exact,u=a.strict,c=a.sensitive,f=a.from,p=s||f;null==r&&(o=t,r=p?D(n.pathname,{path:p,exact:l,strict:u,sensitive:c}):e.match)}}),r?i.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(i.a.Component);ye.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ye.propTypes={children:l.a.node,location:l.a.object};var be=ye,ve=D,ge=n("./node_modules/hoist-non-react-statics/index.js"),we=n.n(ge),xe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var _e=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return i.a.createElement(q,{render:function(t){return i.a.createElement(e,xe({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},we()(t,e)};n.d(t,"BrowserRouter",function(){return w}),n.d(t,"HashRouter",function(){return C}),n.d(t,"Link",function(){return T}),n.d(t,"MemoryRouter",function(){return L}),n.d(t,"NavLink",function(){return X}),n.d(t,"Prompt",function(){return J}),n.d(t,"Redirect",function(){return ae}),n.d(t,"Route",function(){return K}),n.d(t,"Router",function(){return b}),n.d(t,"StaticRouter",function(){return me}),n.d(t,"Switch",function(){return be}),n.d(t,"matchPath",function(){return ve}),n.d(t,"withRouter",function(){return _e})},"./node_modules/react-router/node_modules/isarray/index.js":function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},"./node_modules/react-router/node_modules/path-to-regexp/index.js":function(e,t,n){var r=n("./node_modules/react-router/node_modules/isarray/index.js");e.exports=d,e.exports.parse=a,e.exports.compile=function(e,t){return s(a(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=p;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var n,r=[],a=0,i=0,s="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],p=n[1],d=n.index;if(s+=e.slice(i,d),i=d+f.length,p)s+=p[1];else{var h=e[i],m=n[2],y=n[3],b=n[4],v=n[5],g=n[6],w=n[7];s&&(r.push(s),s="");var x=null!=m&&null!=h&&h!==m,_="+"===g||"*"===g,k="?"===g||"*"===g,j=n[2]||c,C=b||v;r.push({name:y||a++,prefix:m||"",delimiter:j,optional:k,repeat:_,partial:x,asterisk:!!w,pattern:C?u(C):w?".*":"[^"+l(j)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var a="",s=n||{},l=(o||{}).pretty?i:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var f,p=s[c.name];if(null==p){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=l(p[d]),!t[u].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");a+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(p),!t[u].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');a+=c.prefix+f}}else a+=c}return a}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function p(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,a=!1!==n.end,i="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)i+=l(u);else{var p=l(u.prefix),d="(?:"+u.pattern+")";t.push(u),u.repeat&&(d+="(?:"+p+d+")*"),i+=d=u.optional?u.partial?p+"("+d+")?":"(?:"+p+"("+d+"))?":p+"("+d+")"}}var h=l(n.delimiter||"/"),m=i.slice(-h.length)===h;return o||(i=(m?i.slice(0,-h.length):i)+"(?:"+h+"(?=$))?"),i+=a?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+i,f(n)),t)}function d(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(d(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return p(a(e,n),t,n)}(e,t,n)}},"./node_modules/react-spinners/dist/helpers/index.js":function(e,t,n){var r,o,a;o=[t],void 0===(a="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.calculateRgba=function(e,t){if("#"===e[0]&&(e=e.slice(1)),3===e.length){var n="";e.split("").forEach(function(e){n+=e,n+=e}),e=n}var r=e.match(/.{2}/g).map(function(e){return parseInt(e,16)}).join(", ");return"rgba("+r+", "+t+")"}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/index.js":function(e,t,n){var r,o,a;o=[e,n("./node_modules/react-spinners/dist/spinners/BarLoader.js"),n("./node_modules/react-spinners/dist/spinners/BeatLoader.js"),n("./node_modules/react-spinners/dist/spinners/BounceLoader.js"),n("./node_modules/react-spinners/dist/spinners/CircleLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClipLoader.js"),n("./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js"),n("./node_modules/react-spinners/dist/spinners/DotLoader.js"),n("./node_modules/react-spinners/dist/spinners/FadeLoader.js"),n("./node_modules/react-spinners/dist/spinners/GridLoader.js"),n("./node_modules/react-spinners/dist/spinners/HashLoader.js"),n("./node_modules/react-spinners/dist/spinners/MoonLoader.js"),n("./node_modules/react-spinners/dist/spinners/PacmanLoader.js"),n("./node_modules/react-spinners/dist/spinners/PropagateLoader.js"),n("./node_modules/react-spinners/dist/spinners/PulseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RingLoader.js"),n("./node_modules/react-spinners/dist/spinners/RiseLoader.js"),n("./node_modules/react-spinners/dist/spinners/RotateLoader.js"),n("./node_modules/react-spinners/dist/spinners/ScaleLoader.js"),n("./node_modules/react-spinners/dist/spinners/SyncLoader.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a,i,s,l,u,c,f,p,d,h,m,y,b,v,g){"use strict";var w=F(t),x=F(n),_=F(r),k=F(o),j=F(a),C=F(i),E=F(s),O=F(l),P=F(u),S=F(c),T=F(f),R=F(p),N=F(d),M=F(h),I=F(m),L=F(y),A=F(b),z=F(v),U=F(g);function F(e){return e&&e.__esModule?e:{default:e}}e.exports={BarLoader:w.default,BeatLoader:x.default,BounceLoader:_.default,CircleLoader:k.default,ClipLoader:j.default,ClimbingBoxLoader:C.default,DotLoader:E.default,FadeLoader:O.default,GridLoader:P.default,HashLoader:S.default,MoonLoader:T.default,PacmanLoader:R.default,PropagateLoader:N.default,PulseLoader:M.default,RingLoader:I.default,RiseLoader:L.default,RotateLoader:A.default,ScaleLoader:z.default,SyncLoader:U.default}})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BarLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=(0,r.keyframes)("0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}"),p=(0,r.keyframes)("0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}"),d=e.Loader=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;overflow:hidden;background-color:",o.props.color,";background-clip:padding-box;display:block;border-radius:2px;will-change:left,right;animation-fill-mode:forwards;animation:",1===e?f:p," 2.1s ",2===e?"1.15s":""," ",1===e?"cubic-bezier(0.65, 0.815, 0.735, 0.395)":"cubic-bezier(0.165, 0.84, 0.44, 1)"," infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.width,"px;height:",o.props.height,"px;overflow:hidden;background-color:",(0,a.calculateRgba)(o.props.color,.2),";background-clip:padding-box;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);d.propTypes={loading:s.default.bool,color:s.default.string,width:s.default.number,height:s.default.number},d.defaultProps={loading:!0,color:"#000000",width:100,height:4};var h=(0,o.onlyUpdateForKeys)(["loading","color","width","height"])(d);h.defaultProps=d.defaultProps,e.default=h})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BeatLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{transform:scale(0.75);opacity:0.2}100%{transform:scale(1);opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;animation:",c," 0.7s ",e%2?"0s":"0.35s"," infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/BounceLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size,"px;width:",o.props.size,"px;background-color:",o.props.color,";border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation:",c," 2.1s ",1===e?"1s":"0s"," infinite ease-in-out;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/CircleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size*(1-e/10),"px;width:",o.props.size*(1-e/10),"px;border:1px solid ",o.props.color,";border-radius:100%;transition:2s;border-bottom:none;border-right:none;top:",.7*e*2.5,"%;left:",.35*e*2.5,"%;animation-fill-mode:'';animation:",c," 1s ",.2*e,"s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:50};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClimbingBoxLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:translate(0,-1em) rotate(-45deg)}5%{transform:translate(0,-1em) rotate(-50deg)}20%{transform:translate(1em,-2em) rotate(47deg)}25%{transform:translate(1em,-2em) rotate(45deg)}30%{transform:translate(1em,-2em) rotate(40deg)}45%{transform:translate(2em,-3em) rotate(137deg)}50%{transform:translate(2em,-3em) rotate(135deg)}55%{transform:translate(2em,-3em) rotate(130deg)}70%{transform:translate(3em,-4em) rotate(217deg)}75%{transform:translate(3em,-4em) rotate(220deg)}100%{transform:translate(0,-1em) rotate(-225deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{position:absolute;left:0;bottom:-0.1em;height:1em;width:1em;background-color:transparent;border-radius:15%;border:0.25em solid ",o.props.color,";transform:translate(0,-1em) rotate(-45deg);animation-fill-mode:both;animation:",c," 2.5s infinite cubic-bezier(.79,0,.47,.97);}")},o.wrapper=function(){return(0,r.css)("{position:absolute;top:50%;left:50%;margin-top:-2.7em;margin-left:-2.7em;width:5.4em;height:5.4em;font-size:",o.props.size,";}")},o.hill=function(){return(0,r.css)("{position:absolute;width:7.1em;height:7.1em;top:1.7em;left:1.7em;border-left:0.25em solid ",o.props.color,";transform:rotate(45deg);}")},o.container=(0,r.css)("{position:relative;width:7.1em;height:7.1em;}"),u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.container},a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style()}),a.default.createElement("div",{className:this.hill()}))):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:15};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ClipLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(0.8)}100%{transform:rotate(360deg) scale(1)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(){return(0,r.css)("{background:transparent !important;width:",o.props.size,"px;height:",o.props.size,"px;border-radius:100%;border:2px solid;border-color:",o.props.color,";border-bottom-color:transparent;display:inline-block;animation:",c," 0.75s 0s infinite linear;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.style()}):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:35};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/DotLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:",e%2?"0":"auto",";bottom:",e%2?"auto":"0",";height:",o.props.size/2,"px;width:",o.props.size/2,"px;background-color:",o.props.color,";border-radius:100%;animation-fill-mode:forwards;animation:",f," 2s ",2===e?"-1s":"0s"," infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;animation-fill-mode:forwards;animation:",c," 2s 0s infinite linear;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},p.defaultProps={loading:!0,color:"#000000",size:60};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/FadeLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("50%{opacity:0.3}100%{opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;width:",o.props.width,"px;margin:",o.props.margin,";background-color:",o.props.color,";border-radius:",o.props.radius,";transition:2s;animation-fill-mode:'both';animation:",c," 1.2s ",.12*e,"s infinite ease-in-out;}")},o.radius=20,o.quarter=o.radius/2+o.radius/5.5,o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;top:",o.radius,"px;left:",o.radius,"px;width:",3*o.radius,"px;height:",3*o.radius,"px;}")},o.a=function(){return(0,r.css)("composes:",o.style(1),";top:",o.radius,";left:0;")},o.b=function(){return(0,r.css)("composes:",o.style(2),";top:",o.quarter,";left:",o.quarter,";transform:rotate(-45deg);")},o.c=function(){return(0,r.css)("composes:",o.style(3),";top:0;left:",o.radius,";transform:rotate(90deg);")},o.d=function(){return(0,r.css)("composes:",o.style(4),";top:",-o.quarter,";left:",o.quarter,";transform:rotate(45deg);")},o.e=function(){return(0,r.css)("composes:",o.style(5),";top:",-o.radius,";left:0;")},o.f=function(){return(0,r.css)("composes:",o.style(6),";top:",-o.quarter,";left:",-o.quarter,";transform:rotate(-45deg);")},o.g=function(){return(0,r.css)("composes:",o.style(7),";top:0;left:",-o.radius,";transform:rotate(90deg);")},o.h=function(){return(0,r.css)("composes:",o.style(8),";top:",o.quarter,";left:",-o.quarter,";transform:rotate(45deg);")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.a()}),a.default.createElement("div",{className:this.b()}),a.default.createElement("div",{className:this.c()}),a.default.createElement("div",{className:this.d()}),a.default.createElement("div",{className:this.e()}),a.default.createElement("div",{className:this.f()}),a.default.createElement("div",{className:this.g()}),a.default.createElement("div",{className:this.h()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},f.defaultProps={loading:!0,color:"#000000",height:15,width:5,margin:"2px",radius:2};var p=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/GridLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1)}50%{transform:scale(0.5);opacity:0.7}100%{transform:scale(1);opacity:1}"),f=function(e){return Math.random()*e},p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,";height:",o.props.size,";margin:",o.props.margin,";border-radius:100%;animation-fill-mode:'both';animation:",c," ",e/100+.6,"s ",e/100-.2,"s infinite ease;}")},o.wrapper=function(){return(0,r.css)("{width:",3*parseFloat(o.props.size)+6*parseFloat(o.props.margin),"px;font-size:0;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))}),a.default.createElement("div",{className:this.style(f(100))})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/HashLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js"),n("./node_modules/react-spinners/dist/helpers/index.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=l(t),s=l(n);function l(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,s=Array(i),l=0;l<i;l++)s[l]=arguments[l];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.thickness=function(){return o.props.size/5},o.lat=function(){return(o.props.size-o.thickness())/2},o.offset=function(){return o.lat()-o.thickness()},o.color=function(){return(0,a.calculateRgba)(o.props.color,.75)},o.before=function(){return(0,r.keyframes)("0%{width:",o.thickness(),"px;box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}35%{width:",o.props.size,"px;box-shadow:0 ",-o.offset(),"px ",o.color(),",0 ",o.offset(),"px ",o.color(),"}70%{width:",o.thickness(),"px;box-shadow:",-o.lat(),"px ",-o.offset(),"px ",o.color(),",",o.lat(),"px ",o.offset(),"px ",o.color(),"}100%{box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}")},o.after=function(){return(0,r.keyframes)("0%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}35%{height:",o.props.size,"px;box-shadow:",o.offset(),"px 0 ",o.color(),",",-o.offset(),"px 0 ",o.color(),"}70%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",-o.lat(),"px ",o.color(),",",-o.offset(),"px ",o.lat(),"px ",o.color(),"}100%{box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}")},o.style=function(e){return(0,r.css)("{position:absolute;content:'';top:50%;left:50%;display:block;width:",o.props.size/5,"px;height:",o.props.size/5,"px;border-radius:",o.props.size/10,"px;transform:translate(-50%,-50%);animation-fill-mode:none;animation:",1===e?o.before():o.after()," 2s infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;transform:rotate(165deg);}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);f.propTypes={loading:s.default.bool,size:s.default.number,color:s.default.string},f.defaultProps={loading:!0,size:50,color:"#000000"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/MoonLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.moonSize=function(){return o.props.size/7},o.ballStyle=function(e){return(0,r.css)("{width:",e,"px;height:",e,"px;border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size+2*o.moonSize(),"px;height:",o.props.size+2*o.moonSize(),"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;}")},o.ball=function(){return(0,r.css)("composes:",o.ballStyle(o.moonSize()),";background-color:",o.props.color,";opacity:0.8;position:absolute;top:",o.props.size/2-o.moonSize()/2,"px;animation:",c," 0.6s 0s infinite linear;animation-fill-mode:forwards;")},o.circle=function(){return(0,r.css)("composes:",o.ballStyle(o.props.size),";border:",o.moonSize(),"px solid ",o.props.color,";opacity:0.1;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.ball()}),a.default.createElement("div",{className:this.circle()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PacmanLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(-44deg)}"),(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(44deg)}")],f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.ball=function(){return(0,r.keyframes)("75%{opacity:0.7}100%{transform:translate(",-4*o.props.size,"px,",-o.props.size/4,"px)}")},o.ballStyle=function(e){return(0,r.css)("{width:10px;height:10px;background-color:",o.props.color,";margin:",o.props.margin,";border-radius:100%;transform:translate(0,",-o.props.size/4,"px);position:absolute;top:25px;left:100px;animation:",o.ball()," 1s ",.25*e,"s infinite linear;animation-fill-mode:both;}")},o.s1=function(){return o.props.size+"px solid transparent"},o.s2=function(){return o.props.size+"px solid "+o.props.color},o.pacmanStyle=function(e){return(0,r.css)("{width:0;height:0;border-right:",o.s1(),";border-top:",0===e?o.s1():o.s2(),";border-left:",o.s2(),";border-bottom:",0===e?o.s2():o.s1(),";border-radius:",o.props.size,"px;position:absolute;animation:",c[e]," 0.8s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;height:",o.props.size,"px;width:",o.props.size,"px;}")},o.pac=function(){return o.pacmanStyle(0)},o.man=function(){return(0,r.css)("composes:",o.pacmanStyle(1),";position:absolute;")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.pac()}),a.default.createElement("div",{className:this.man()}),a.default.createElement("div",{className:this.ballStyle(2)}),a.default.createElement("div",{className:this.ballStyle(3)}),a.default.createElement("div",{className:this.ballStyle(4)}),a.default.createElement("div",{className:this.ballStyle(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:25,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PropagateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=[1,3,5],f=[(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}50%{transform:translateX(-",c[1],"rem) scale(0.6)}75%{transform:translateX(-",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",c[0],"rem) scale(0.75)}75%{transform:translateX(-",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}75%{transform:translateX(",c[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",c[0],"rem) scale(0.75)}50%{transform:translateX(",c[1],"rem) scale(0.6)}75%{transform:translateX(",c[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}")],p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;font-size:",o.props.size/3,"px;width:",o.props.size,"px;height:",o.props.size,"px;background:",o.props.color,";border-radius:50%;animation:",f[e]," 1.5s  infinite;animation-fill-mode:forwards;}")},o.wrapper=function(){return(0,r.css)("{position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(0)}),a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,size:i.default.number,color:i.default.string},p.defaultProps={loading:!0,size:15,color:"#000000"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/PulseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1);opacity:1}45%{transform:scale(0.1);opacity:0.7}80%{transform:scale(1);opacity:1}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.75s ",.12*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RingLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}"),f=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:0;left:0;width:",o.props.size,"px;height:",o.props.size,"px;border:",o.props.size/10,"px solid ",o.props.color,";opacity:0.4;border-radius:100%;animation-fill-mode:forwards;perspective:800px;animation:",1===e?c:f," 2s 0s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{width:",o.props.size,"px;height:",o.props.size,"px;position:relative;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number},p.defaultProps={loading:!0,color:"#000000",size:60};var d=(0,o.onlyUpdateForKeys)(["loading","color","size"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RiseLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scale(1.1)}25%{translateY(-",30,"px)}50%{transform:scale(0.4)}75%{transform:translateY(",30,"px)}100%{transform:translateY(0) scale(1.0)}"),f=(0,r.keyframes)("0%{transform:scale(0.4)}25%{translateY(",30,"px)}50%{transform:scale(1.1)}75%{transform:translateY(",-30,"px)}100%{transform:translateY(0) scale(0.75)}"),p=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",e%2==0?c:f," 1s 0s infinite cubic-bezier(.15,.46,.9,.6);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);p.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},p.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var d=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/RotateLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{opacity:0.8;position:absolute;top:0;left:",e%2?-28:25,"px;}")},o.ball=function(){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("composes:",o.ball(),";display:inline-block;position:relative;animation-fill-mode:both;animation:",c," 1s 0s infinite cubic-bezier(.7,-.13,.22,.86);")},o.long=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(1),";")},o.short=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(2),";")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.long()}),a.default.createElement("div",{className:this.short()})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/ScaleLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("0%{transform:scaley(1.0)}50%{transform:scaley(0.4)}100%{transform:scaley(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.width,"px;height:",o.props.height,"px;margin:",o.props.margin,";border-radius:",o.props.radius,"px;display:inline-block;animation:",c," 1s ",.1*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)}),a.default.createElement("div",{className:this.style(4)}),a.default.createElement("div",{className:this.style(5)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,height:i.default.number,width:i.default.number,margin:i.default.string,radius:i.default.number},f.defaultProps={loading:!0,color:"#000000",height:35,width:4,margin:"2px",radius:2};var p=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/dist/spinners/SyncLoader.js":function(e,t,n){var r,o,a;o=[t,n("./node_modules/react/index.js"),n("./node_modules/prop-types/index.js"),n("./node_modules/emotion/dist/index.es.js"),n("./node_modules/recompose/es/Recompose.js")],void 0===(a="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=s(t),i=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var c=(0,r.keyframes)("33%{transform:translateY(10px)}66%{transform:translateY(-10px)}100%{transform:translateY(0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return o=u(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",c," 0.6s ",.07*e,"s infinite ease-in-out;animation-fill-mode:both;}")},u(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),l(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",null,a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)}),a.default.createElement("div",{className:this.style(3)})):null}}]),t}(a.default.Component);f.propTypes={loading:i.default.bool,color:i.default.string,size:i.default.number,margin:i.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=a)},"./node_modules/react-spinners/index.js":function(e,t,n){e.exports=n("./node_modules/react-spinners/dist/index.js")},"./node_modules/react/cjs/react.production.min.js":function(e,t,n){"use strict";
/** @license React v16.3.1
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n("./node_modules/object-assign/index.js"),o=n("./node_modules/fbjs/lib/emptyObject.js"),a=n("./node_modules/fbjs/lib/emptyFunction.js"),i="function"==typeof Symbol&&Symbol.for,s=i?Symbol.for("react.element"):60103,l=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,f=i?Symbol.for("react.provider"):60109,p=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.async_mode"):60111,h=i?Symbol.for("react.forward_ref"):60112,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||b}function g(){}function w(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||b}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var x=w.prototype=new g;x.constructor=w,r(x,v.prototype),x.isPureReactComponent=!0;var _={current:null},k=Object.prototype.hasOwnProperty,j={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r=void 0,o={},a=null,i=null;if(null!=t)for(r in void 0!==t.ref&&(i=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!j.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:s,type:e,key:a,ref:i,props:o,_owner:_.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var O=/\/+/g,P=[];function S(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function T(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var a=!1;if(null===e)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case s:case l:a=!0}}if(a)return n(r,e,""===t?"."+N(e,0):t),1;if(a=0,t=""===t?".":t+":",Array.isArray(e))for(var i=0;i<e.length;i++){var u=t+N(o=e[i],i);a+=R(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=m&&e[m]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),i=0;!(o=e.next()).done;)a+=R(o=o.value,u=t+N(o,i++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return a}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function M(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,a.thatReturnsArgument):null!=e&&(E(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function L(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(O,"$&/")+"/"),t=S(t,a,r,o),null==e||R(e,"",I,t),T(t)}var A={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=S(null,null,t,n),null==e||R(e,"",M,t),T(t)},count:function(e){return null==e?0:R(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return L(e,t,null,a.thatReturnsArgument),t},only:function(e){return E(e)||y("143"),e}},createRef:function(){return{current:null}},Component:v,PureComponent:w,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},Fragment:u,StrictMode:c,unstable_AsyncMode:d,createElement:C,cloneElement:function(e,t,n){var o=void 0,a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(i=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)k.call(t,o)&&!j.hasOwnProperty(o)&&(a[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))a.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];a.children=c}return{$$typeof:s,type:e.type,key:i,ref:l,props:a,_owner:u}},createFactory:function(e){var t=C.bind(null,e);return t.type=e,t},isValidElement:E,version:"16.3.1",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},z=Object.freeze({default:A}),U=z&&A||z;e.exports=U.default?U.default:U},"./node_modules/react/index.js":function(e,t,n){"use strict";e.exports=n("./node_modules/react/cjs/react.production.min.js")},"./node_modules/recompose/es/Recompose.js":function(e,t,n){"use strict";n.r(t),n.d(t,"mapProps",function(){return m}),n.d(t,"withProps",function(){return x}),n.d(t,"withPropsOnChange",function(){return k}),n.d(t,"withHandlers",function(){return C}),n.d(t,"defaultProps",function(){return E}),n.d(t,"renameProp",function(){return P}),n.d(t,"renameProps",function(){return T}),n.d(t,"flattenProp",function(){return R}),n.d(t,"withState",function(){return N}),n.d(t,"withStateHandlers",function(){return M}),n.d(t,"withReducer",function(){return I}),n.d(t,"branch",function(){return A}),n.d(t,"renderComponent",function(){return z}),n.d(t,"renderNothing",function(){return F}),n.d(t,"shouldUpdate",function(){return D}),n.d(t,"pure",function(){return H}),n.d(t,"onlyUpdateForKeys",function(){return B}),n.d(t,"onlyUpdateForPropTypes",function(){return W}),n.d(t,"withContext",function(){return V}),n.d(t,"getContext",function(){return q}),n.d(t,"lifecycle",function(){return K}),n.d(t,"toClass",function(){return Y}),n.d(t,"setStatic",function(){return f}),n.d(t,"setPropTypes",function(){return Q}),n.d(t,"setDisplayName",function(){return p}),n.d(t,"compose",function(){return X}),n.d(t,"getDisplayName",function(){return d}),n.d(t,"wrapDisplayName",function(){return h}),n.d(t,"isClassComponent",function(){return $}),n.d(t,"createSink",function(){return G}),n.d(t,"componentFromProp",function(){return J}),n.d(t,"nest",function(){return Z}),n.d(t,"hoistStatics",function(){return ee}),n.d(t,"componentFromStream",function(){return ae}),n.d(t,"componentFromStreamWithConfig",function(){return oe}),n.d(t,"mapPropsStream",function(){return le}),n.d(t,"mapPropsStreamWithConfig",function(){return se}),n.d(t,"createEventHandler",function(){return ce}),n.d(t,"createEventHandlerWithConfig",function(){return ue}),n.d(t,"setObservableConfig",function(){return ne});var r=n("./node_modules/react/index.js"),o=n.n(r),a=n("./node_modules/fbjs/lib/shallowEqual.js"),i=n.n(a);n.d(t,"shallowEqual",function(){return i.a});var s=n("./node_modules/hoist-non-react-statics/index.js"),l=n.n(s),u=n("./node_modules/change-emitter/lib/index.js"),c=n("./node_modules/symbol-observable/es/index.js"),f=function(e,t){return function(n){return n[e]=t,n}},p=function(e){return f("displayName",e)},d=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0},h=function(e,t){return t+"("+d(e)+")"},m=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(e(t))}}},y=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},g=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},w=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},x=function(e){return m(function(t){return b({},t,"function"==typeof e?e(t):e)})},_=function(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r];e.hasOwnProperty(o)&&(n[o]=e[o])}return n},k=function(e,t){return function(n){var o=Object(r.createFactory)(n),a="function"==typeof e?e:function(t,n){return!i()(_(t,e),_(n,e))};return function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=w(this,e.call.apply(e,[this].concat(i))),o.computedProps=t(o.props),w(o,r)}return v(n,e),n.prototype.componentWillReceiveProps=function(e){a(this.props,e)&&(this.computedProps=t(e))},n.prototype.render=function(){return o(b({},this.props,this.computedProps))},n}(r.Component)}},j=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r));return n},C=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return n=r=w(this,e.call.apply(e,[this].concat(i))),a.call(r),w(r,n)}return v(t,e),t.prototype.componentWillReceiveProps=function(){this.cachedHandlers={}},t.prototype.render=function(){return n(b({},this.props,this.handlers))},t}(r.Component),a=function(){var t=this;this.cachedHandlers={},this.handlers=j("function"==typeof e?e(this.props):e,function(e,n){return function(){var r=t.cachedHandlers[n];if(r)return r.apply(void 0,arguments);var o=e(t.props);return t.cachedHandlers[n]=o,o.apply(void 0,arguments)}})};return o}},E=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){return n(e)};return o.defaultProps=e,o}},O=function(e,t){for(var n=g(e,[]),r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&delete n[o]}return n},P=function(e,t){return m(function(n){var r;return b({},O(n,[e]),((r={})[t]=n[e],r))})},S=Object.keys,T=function(e){return m(function(t){return b({},O(t,S(e)),(n=_(t,S(e)),r=function(t,n){return e[n]},S(n).reduce(function(e,t){var o=n[t];return e[r(o,t)]=o,e},{})));var n,r})},R=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(b({},t,t[e]))}}},N=function(e,t,n){return function(o){var a=Object(r.createFactory)(o);return function(r){function o(){var e,t;y(this,o);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return e=t=w(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:"function"==typeof n?n(t.props):n},t.updateStateValue=function(e,n){return t.setState(function(t){var n=t.stateValue;return{stateValue:"function"==typeof e?e(n):e}},n)},w(t,e)}return v(o,r),o.prototype.render=function(){var n;return a(b({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.updateStateValue,n)))},o}(r.Component)}},M=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=w(this,e.call.apply(e,[this].concat(a))),s.call(r),w(r,n)}return v(t,e),t.prototype.shouldComponentUpdate=function(e,t){var n=e!==this.props,r=!i()(t,this.state);return n||r},t.prototype.render=function(){return o(b({},this.props,this.state,this.stateUpdaters))},t}(r.Component),s=function(){var n=this;this.state="function"==typeof e?e(this.props):e,this.stateUpdaters=j(t,function(e){return function(t){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];t&&"function"==typeof t.persist&&t.persist(),n.setState(function(n,r){return e(n,r).apply(void 0,[t].concat(o))})}})};return a}},I=function(e,t,n,o){return function(a){var i=Object(r.createFactory)(a);return function(r){function a(){var e,t;y(this,a);for(var o=arguments.length,i=Array(o),s=0;s<o;s++)i[s]=arguments[s];return e=t=w(this,r.call.apply(r,[this].concat(i))),t.state={stateValue:t.initializeStateValue()},t.dispatch=function(e){return t.setState(function(t){var r=t.stateValue;return{stateValue:n(r,e)}})},w(t,e)}return v(a,r),a.prototype.initializeStateValue=function(){return void 0!==o?"function"==typeof o?o(this.props):o:n(void 0,{type:"@@recompose/INIT"})},a.prototype.render=function(){var n;return i(b({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.dispatch,n)))},a}(r.Component)}},L=function(e){return e},A=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L;return function(o){var a=void 0,i=void 0;return function(s){return e(s)?(a=a||Object(r.createFactory)(t(o)))(s):(i=i||Object(r.createFactory)(n(o)))(s)}}},z=function(e){return function(t){var n=Object(r.createFactory)(e);return function(e){return n(e)}}},U=function(e){function t(){return y(this,t),w(this,e.apply(this,arguments))}return v(t,e),t.prototype.render=function(){return null},t}(r.Component),F=function(e){return U},D=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){function r(){return y(this,r),w(this,t.apply(this,arguments))}return v(r,t),r.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},r.prototype.render=function(){return n(this.props)},r}(r.Component)}},H=function(e){return D(function(e,t){return!i()(e,t)})(e)},B=function(e){return D(function(t,n){return!i()(_(n,e),_(t,e))})},W=function(e){var t=e.propTypes;var n=Object.keys(t||{});return B(n)(e)},V=function(e,t){return function(n){var o=Object(r.createFactory)(n),a=function(e){function n(){var r,o;y(this,n);for(var a=arguments.length,i=Array(a),s=0;s<a;s++)i[s]=arguments[s];return r=o=w(this,e.call.apply(e,[this].concat(i))),o.getChildContext=function(){return t(o.props)},w(o,r)}return v(n,e),n.prototype.render=function(){return o(this.props)},n}(r.Component);return a.childContextTypes=e,a}},q=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e,t){return n(b({},e,t))};return o.contextTypes=e,o}},K=function(e){return function(t){var n=Object(r.createFactory)(t);var o=function(e){function t(){return y(this,t),w(this,e.apply(this,arguments))}return v(t,e),t.prototype.render=function(){return n(b({},this.props,this.state))},t}(r.Component);return Object.keys(e).forEach(function(t){return o.prototype[t]=e[t]}),o}},$=function(e){return Boolean(e&&e.prototype&&"function"==typeof e.prototype.render)},Y=function(e){if($(e))return e;var t=function(t){function n(){return y(this,n),w(this,t.apply(this,arguments))}return v(n,t),n.prototype.render=function(){return"string"==typeof e?o.a.createElement(e,this.props):e(this.props,this.context)},n}(r.Component);return t.displayName=d(e),t.propTypes=e.propTypes,t.contextTypes=e.contextTypes,t.defaultProps=e.defaultProps,t},Q=function(e){return f("propTypes",e)};function X(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var G=function(e){return function(t){function n(){return y(this,n),w(this,t.apply(this,arguments))}return v(n,t),n.prototype.componentWillMount=function(){e(this.props)},n.prototype.componentWillReceiveProps=function(t){e(t)},n.prototype.render=function(){return null},n}(r.Component)},J=function(e){var t=function(t){return Object(r.createElement)(t[e],O(t,[e]))};return t.displayName="componentFromProp("+e+")",t},Z=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.map(r.createFactory);return function(e){var t=g(e,[]),n=e.children;return o.reduceRight(function(e,n){return n(t,e)},n)}},ee=function(e){return function(t){var n=e(t);return l()(n,t),n}},te={fromESObservable:null,toESObservable:null},ne=function(e){te=e},re={fromESObservable:function(e){return"function"==typeof te.fromESObservable?te.fromESObservable(e):e},toESObservable:function(e){return"function"==typeof te.toESObservable?te.toESObservable(e):e}},oe=function(e){return function(t){return function(n){function r(){var o,a,i;y(this,r);for(var s=arguments.length,l=Array(s),f=0;f<s;f++)l[f]=arguments[f];return a=i=w(this,n.call.apply(n,[this].concat(l))),i.state={vdom:null},i.propsEmitter=Object(u.createChangeEmitter)(),i.props$=e.fromESObservable(((o={subscribe:function(e){return{unsubscribe:i.propsEmitter.listen(function(t){t?e.next(t):e.complete()})}}})[c.a]=function(){return this},o)),i.vdom$=e.toESObservable(t(i.props$)),w(i,a)}return v(r,n),r.prototype.componentWillMount=function(){var e=this;this.subscription=this.vdom$.subscribe({next:function(t){e.setState({vdom:t})}}),this.propsEmitter.emit(this.props)},r.prototype.componentWillReceiveProps=function(e){this.propsEmitter.emit(e)},r.prototype.shouldComponentUpdate=function(e,t){return t.vdom!==this.state.vdom},r.prototype.componentWillUnmount=function(){this.propsEmitter.emit(),this.subscription.unsubscribe()},r.prototype.render=function(){return this.state.vdom},r}(r.Component)}},ae=function(e){return oe(re)(e)},ie=function(e){return e},se=function(e){var t=oe({fromESObservable:ie,toESObservable:ie});return function(n){return function(o){var a=Object(r.createFactory)(o),i=e.fromESObservable,s=e.toESObservable;return t(function(e){var t;return(t={subscribe:function(t){var r=s(n(i(e))).subscribe({next:function(e){return t.next(a(e))}});return{unsubscribe:function(){return r.unsubscribe()}}}})[c.a]=function(){return this},t})}}},le=function(e){return se(re)(e)},ue=function(e){return function(){var t,n=Object(u.createChangeEmitter)(),r=e.fromESObservable(((t={subscribe:function(e){return{unsubscribe:n.listen(function(t){return e.next(t)})}}})[c.a]=function(){return this},t));return{handler:n.emit,stream:r}}},ce=ue(re)},"./node_modules/resolve-pathname/index.js":function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&r(e),s=t&&r(t),l=i||s;if(e&&r(e)?a=n:n.length&&(a.pop(),a=a.concat(n)),!a.length)return"/";var u=void 0;if(a.length){var c=a[a.length-1];u="."===c||".."===c||""===c}else u=!1;for(var f=0,p=a.length;p>=0;p--){var d=a[p];"."===d?o(a,p):".."===d?(o(a,p),f++):f&&(o(a,p),f--)}if(!l)for(;f--;f)a.unshift("..");!l||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return u&&"/"!==h.substr(-1)&&(h+="/"),h}},"./node_modules/style-loader/lib/addStyles.js":function(e,t,n){var r,o,a={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,c=[],f=n("./node_modules/style-loader/lib/urls.js");function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var i=0;i<o.parts.length;i++)o.parts[i](r.parts[i]);for(;i<r.parts.length;i++)o.parts.push(v(r.parts[i],t))}else{var s=[];for(i=0;i<r.parts.length;i++)s.push(v(r.parts[i],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],i=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[i]?r[i].parts.push(s):n.push(r[i]={id:i,parts:[s]})}return n}function h(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),c.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=c.indexOf(e);t>=0&&c.splice(t,1)}function y(e){var t=document.createElement("style");return e.attrs.type="text/css",b(t,e.attrs),h(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function v(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var i=u++;n=l||(l=y(t)),r=x.bind(null,n,i,!1),o=x.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",b(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=f(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var i=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var i=n[o];(s=a[i.id]).refs--,r.push(s)}e&&p(d(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var g,w=(g=[],function(e,t){return g[e]=t,g.filter(Boolean).join("\n")});function x(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},"./node_modules/style-loader/lib/urls.js":function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},"./node_modules/symbol-observable/es/index.js":function(e,t,n){"use strict";(function(e,r){var o,a=n("./node_modules/symbol-observable/es/ponyfill.js");o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n("./node_modules/webpack/buildin/global.js"),n("./node_modules/webpack/buildin/harmony-module.js")(e))},"./node_modules/symbol-observable/es/ponyfill.js":function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},"./node_modules/value-equal/index.js":function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var s=Object.keys(t),l=Object.keys(n);return s.length===l.length&&s.every(function(r){return e(t[r],n[r])})}return!1}},"./node_modules/warning/browser.js":function(e,t,n){"use strict";e.exports=function(){}},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./node_modules/webpack/buildin/harmony-module.js":function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},"./src/assets/banner.jpg":function(e,t,n){e.exports=n.p+"578ad640119229a8761c382a5038f625.jpg"},"./src/components/Home.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r};t.default=function(){return a.default.createElement("div",{className:"Home"},a.default.createElement("h2",null,"Welcome to Mortypedia, the home of everything Rick and Morty! Feel free to look around at the characters, locations, and episodes."))}},"./src/components/Loader.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r},i=n("./node_modules/react-spinners/index.js");t.default=function(e){return a.default.createElement("div",{className:"Loader"},a.default.createElement(i.PropagateLoader,{size:25}))}},"./src/components/Loadmang.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=a(n("./node_modules/react-loadable/lib/index.js")),o=a(n("./src/components/Loader.js"));function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){return(0,r.default)({loading:o.default,loader:e})}},"./src/components/Navbar.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n("./node_modules/react/index.js"),a=(r=o)&&r.__esModule?r:{default:r},i=n("./node_modules/react-router-dom/es/index.js");t.default=function(){return a.default.createElement("header",null,a.default.createElement("h1",null,"Mortypedia"),a.default.createElement("nav",null,a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/"},"Home")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/characters"},"Characters")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/locations"},"Locations")),a.default.createElement("li",null,a.default.createElement(i.Link,{to:"/episodes"},"Episodes"))))}},"./src/containers/App.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n("./node_modules/react/index.js"),a=c(o),i=n("./node_modules/react-router-dom/es/index.js"),s=c(n("./src/components/Loadmang.js")),l=c(n("./src/components/Home.js")),u=c(n("./src/components/Navbar.js"));function c(e){return e&&e.__esModule?e:{default:e}}var f=(0,s.default)(function(){return n.e(5).then(function(){var e=n("./src/components/Characters.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),p=(0,s.default)(function(){return n.e(4).then(function(){var e=n("./src/components/Locations.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),d=(0,s.default)(function(){return n.e(3).then(function(){var e=n("./src/components/Episodes.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),h=(0,s.default)(function(){return n.e(2).then(function(){var e=n("./src/components/SingleCharacter.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),m=(0,s.default)(function(){return n.e(1).then(function(){var e=n("./src/components/SingleLocation.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),y=(0,s.default)(function(){return n.e(0).then(function(){var e=n("./src/components/SingleEpisode.js");return"object"==typeof e&&e&&e.__esModule?e:Object.assign({},"object"==typeof e&&e,{default:e})})}),b=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.Component),r(t,[{key:"render",value:function(){return a.default.createElement(i.HashRouter,null,a.default.createElement("div",null,a.default.createElement(u.default,null),a.default.createElement(i.Route,{exact:!0,path:"/",component:l.default}),a.default.createElement(i.Route,{exact:!0,path:"/characters",component:f}),a.default.createElement(i.Route,{exact:!0,path:"/locations",component:p}),a.default.createElement(i.Route,{exact:!0,path:"/episodes",component:d}),a.default.createElement(i.Route,{exact:!0,path:"/characters/:id",component:h}),a.default.createElement(i.Route,{exact:!0,path:"/locations/:id",component:m}),a.default.createElement(i.Route,{exact:!0,path:"/episodes/:id",component:y})))}}]),t}();t.default=b},"./src/index.js":function(e,t,n){"use strict";var r=i(n("./node_modules/react/index.js")),o=i(n("./node_modules/react-dom/index.js"));n("./src/styles/index.styl");var a=i(n("./src/containers/App.js"));function i(e){return e&&e.__esModule?e:{default:e}}o.default.render(r.default.createElement(a.default,null),document.getElementById("root"))},"./src/styles/index.styl":function(e,t,n){var r=n("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl");"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0},a=n("./node_modules/style-loader/lib/addStyles.js")(r,o);r.locals&&(e.exports=r.locals),e.hot.accept("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl",function(t){!function(){var t=n("./node_modules/css-loader/index.js!./node_modules/stylus-loader/index.js!./src/styles/index.styl");if("string"==typeof t&&(t=[[e.i,t,""]]),!function(e,t){var n,r=0;for(n in e){if(!t||e[n]!==t[n])return!1;r++}for(n in t)r--;return 0===r}(r.locals,t.locals))throw new Error("Aborting CSS HMR due to changed css-modules locals.");a(t)}()}),e.hot.dispose(function(){a()})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NoYW5nZS1lbWl0dGVyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2luZGV4LnN0eWwiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uLXV0aWxzL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vtb3Rpb24vZGlzdC9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vdGlvbi9ub2RlX21vZHVsZXMvc3R5bGlzLXJ1bGUtc2hlZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaXNUZXh0Tm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1sb2FkYWJsZS9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9MaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Td2l0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL3dpdGhSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L2hlbHBlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQmFyTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0JlYXRMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvQm91bmNlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0NpcmNsZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9DbGltYmluZ0JveExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9DbGlwTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0RvdExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9GYWRlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL0dyaWRMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvSGFzaExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Nb29uTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1BhY21hbkxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9Qcm9wYWdhdGVMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUHVsc2VMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwaW5uZXJzL2Rpc3Qvc3Bpbm5lcnMvUmluZ0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9SaXNlTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9kaXN0L3NwaW5uZXJzL1JvdGF0ZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9TY2FsZUxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3Bpbm5lcnMvZGlzdC9zcGlubmVycy9TeW5jTG9hZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGlubmVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb21wb3NlL2VzL1JlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd2FybmluZy9icm93c2VyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvYmFubmVyLmpwZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Ib21lLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0xvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Mb2FkbWFuZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9OYXZiYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRhaW5lcnMvQXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL2luZGV4LnN0eWw/ZWYzMyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayIsIndpbmRvdyIsImhvdEF2YWlsYWJsZUZpbGVzTWFwIiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJob3RVcGRhdGUiLCJob3RXYWl0aW5nRmlsZXMiLCJob3RDaHVua3NMb2FkaW5nIiwiaG90VXBkYXRlRG93bmxvYWRlZCIsImhvdEFkZFVwZGF0ZUNodW5rIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdEN1cnJlbnRIYXNoIiwiaG90UmVxdWVzdFRpbWVvdXQiLCJob3RDdXJyZW50TW9kdWxlRGF0YSIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwiaG90Q3JlYXRlUmVxdWlyZSIsIm1lIiwiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJmbiIsInJlcXVlc3QiLCJob3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiaW5kZXhPZiIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFN0YXR1c0hhbmRsZXJzIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90Q2hlY2siLCJhcHBseSIsIkVycm9yIiwicmVxdWVzdFRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIlhNTEh0dHBSZXF1ZXN0IiwicmVxdWVzdFBhdGgiLCJwIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImMiLCJoIiwicHJvbWlzZSIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJzcmMiLCJhcHBlbmRDaGlsZCIsImhvdERvd25sb2FkVXBkYXRlQ2h1bmsiLCJkZWZlcnJlZCIsImhvdEFwcGx5IiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImNiIiwiaiIsIm1vZHVsZSIsImdldEFmZmVjdGVkU3R1ZmYiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJ0eXBlIiwiX21haW4iLCJwYXJlbnRJZCIsInBhcmVudCIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsImNvbmNhdCIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsImFkZEFsbFRvU2V0IiwiYSIsImIiLCJpdGVtIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwiam9pbiIsIm9uRGVjbGluZWQiLCJpZ25vcmVEZWNsaW5lZCIsIm9uVW5hY2NlcHRlZCIsImlnbm9yZVVuYWNjZXB0ZWQiLCJvbkFjY2VwdGVkIiwib25EaXNwb3NlZCIsImlkeCIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiX2Rpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwic3BsaWNlIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yaWdpbmFsRXJyb3IiLCI2IiwiZXhwb3J0cyIsImwiLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsImRlY2xpbmUiLCJkaXNwb3NlIiwiYWRkRGlzcG9zZUhhbmRsZXIiLCJyZW1vdmVEaXNwb3NlSGFuZGxlciIsImNoZWNrIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJ1bmRlZmluZWQiLCJob3RDcmVhdGVNb2R1bGUiLCJwcm9taXNlcyIsImluc3RhbGxlZENodW5rRGF0YSIsIm5jIiwic2V0QXR0cmlidXRlIiwic2V0VGltZW91dCIsIm9uU2NyaXB0Q29tcGxldGUiLCJ0YXJnZXQiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJjaHVuayIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJhbGwiLCJtIiwiZCIsImdldHRlciIsIm8iLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsIm9lIiwianNvbnBBcnJheSIsIm9sZEpzb25wRnVuY3Rpb24iLCJiaW5kIiwicyIsImNyZWF0ZUNoYW5nZUVtaXR0ZXIiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJsaXN0ZW4iLCJsaXN0ZW5lciIsImlzU3Vic2NyaWJlZCIsImluZGV4IiwiZW1pdCIsImxpc3RlbmVycyIsImFyZ3VtZW50cyIsImVzY2FwZSIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJzdHJpbmdpZnkiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ1cmwiLCJ0ZXN0IiwicmVwbGFjZSIsImhhc2hTdHJpbmciLCJzdHIiLCJzZWVkIiwiY3VycmVudEluZGV4IiwiayIsIlVJbnQzMiIsIlVtdWwzMiIsIlVJbnQxNiIsImNoYXJDb2RlQXQiLCJoYXNoIiwicG9zIiwiU1RZTEVTX0tFWSIsIlRBUkdFVF9LRVkiLCJ1bml0bGVzcyIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIm1ha2VTdHlsZVRhZyIsInRhZyIsImNyZWF0ZVRleHROb2RlIiwic2hlZXQiLCJTdHlsZVNoZWV0IiwiaXNCcm93c2VyIiwiaXNTcGVlZHkiLCJ0YWdzIiwiY3RyIiwiX3Byb3RvIiwiaW5qZWN0IiwiaW5qZWN0ZWQiLCJzcGVlZHkiLCJib29sIiwiaW5zZXJ0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJfdGFnIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsaXMiLCJmYSIsImhhIiwiaWEiLCJ0cmltIiwic3BsaXQiLCJ4YSIsImYiLCJtYSIsInoiLCJNIiwiWSIsInlhIiwiUiIsImphIiwic3Vic3RyaW5nIiwiUSIsInphIiwiQWEiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJUIiwidyIsIlUiLCJCYSIsIm5hIiwiYWEiLCJDYSIsIkRhIiwiYmEiLCJFYSIsInNhIiwiRmEiLCJPIiwicSIsIkUiLCJjYSIsIkYiLCJlYSIsIm9hIiwia2EiLCJYIiwiY29uc3RydWN0b3IiLCJHYSIsIksiLCJJIiwieSIsIlYiLCJIIiwidiIsIkEiLCJCIiwieCIsIkMiLCJHIiwiTiIsIkwiLCJ0IiwiRCIsImciLCJ1IiwiUyIsIlAiLCJjaGFyQXQiLCJxYSIsIlciLCJyYSIsInRhIiwibGEiLCJKIiwiQXJyYXkiLCJ1YSIsInZhIiwid2EiLCJaIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJ1c2UiLCJkYSIsIkZ1bmN0aW9uIiwiQm9vbGVhbiIsImtleWZyYW1lIiwiZXh0ZXJuYWxTdHlsaXNQbHVnaW5zIiwiaW5zZXJ0aW9uUGx1Z2luIiwic3R5bGlzX3J1bGVfc2hlZXRfZGVmYXVsdCIsImN1cnJlbnRTb3VyY2VNYXAiLCJ1c2VTdHlsaXNQbHVnaW4iLCJwbHVnaW4iLCJyZWdpc3RlcmVkIiwiaW5zZXJ0ZWQiLCJoYW5kbGVJbnRlcnBvbGF0aW9uIiwiaW50ZXJwb2xhdGlvbiIsImNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImNvbnRleHQiLCJvYmoiLCJvYmplY3RUb1N0cmluZ0NhY2hlIiwiaGFzIiwic3RyaW5nIiwiaXNBcnJheSIsImtleSIsInByb2Nlc3NTdHlsZU5hbWUiLCJpbmRleF9lc19wcm9jZXNzU3R5bGVWYWx1ZSIsImNhY2hlZCIsImNhY2hlIiwiaW5kZXhfZXNfaGFzaCIsImluZGV4X2VzX25hbWUiLCJoeXBoZW5hdGVSZWdleCIsInN0eWxlTmFtZSIsInRvTG93ZXJDYXNlIiwiYXJnIiwiV2Vha01hcCIsImxhYmVsUGF0dGVybiIsImNyZWF0ZVN0eWxlcyIsInN0cmluZ3MiLCJzdHJpbmdNb2RlIiwic3R5bGVzIiwiaWRlbnRpZmllck5hbWUiLCJyYXciLCJfbGVuIiwiaW50ZXJwb2xhdGlvbnMiLCJfa2V5IiwibWF0Y2giLCJwMSIsImNzcyIsInNlbGVjdG9yIiwia2V5ZnJhbWVzIiwiYW5pbWF0aW9uIiwiaW5qZWN0R2xvYmFsIiwiZm9udEZhY2UiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJtZXJnZSIsImN4IiwiY2xhc3NuYW1lcyIsImxlbiIsImNscyIsIm5leHQiLCJoeWRyYXRlIiwiaWRzIiwidG9TaGVldCIsImJsb2NrIiwic2VsZWN0b3JzIiwibGluZSIsImNvbHVtbiIsImF0IiwiZGVwdGgiLCJkZWxpbWl0ZXIiLCJmYWN0b3J5IiwiY2FuVXNlRE9NIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VXb3JrZXJzIiwiV29ya2VyIiwiY2FuVXNlRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjYW5Vc2VWaWV3cG9ydCIsInNjcmVlbiIsImlzSW5Xb3JrZXIiLCJpc1RleHROb2RlIiwiY29udGFpbnNOb2RlIiwib3V0ZXJOb2RlIiwiaW5uZXJOb2RlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1ha2VFbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbiIsInRoYXRSZXR1cm5zIiwidGhhdFJldHVybnNGYWxzZSIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zTnVsbCIsInRoYXRSZXR1cm5zVGhpcyIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJkb2MiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0IiwiY29uZGl0aW9uIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJkZWZhdWx0VmlldyIsIm93bmVyRG9jdW1lbnQiLCJOb2RlIiwibm9kZVR5cGUiLCJub2RlTmFtZSIsImlzTm9kZSIsImlzIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwibm9kZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsIm1lc3NhZ2UiLCJjb25maXJtIiwic3VwcG9ydHNIaXN0b3J5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaGlzdG9yeSIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJzdGF0ZSIsImxvY2F0aW9uc0FyZUVxdWFsIiwiY3JlYXRlTG9jYXRpb24iLCJfZXh0ZW5kcyIsImFzc2lnbiIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl92YWx1ZUVxdWFsMiIsIl9QYXRoVXRpbHMiLCJkZWZhdWx0IiwicGF0aCIsImN1cnJlbnRMb2NhdGlvbiIsImxvY2F0aW9uIiwicGFyc2VQYXRoIiwicGF0aG5hbWUiLCJzZWFyY2giLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3Vic3RyIiwiaGFzQmFzZW5hbWUiLCJwcmVmaXgiLCJSZWdFeHAiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3dhcm5pbmcyIiwiX2ludmFyaWFudDIiLCJfTG9jYXRpb25VdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJfRE9NVXRpbHMiLCJnZXRIaXN0b3J5U3RhdGUiLCJwcm9wcyIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3JlZiIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJNYXRoIiwicmFuZG9tIiwidHJhbnNpdGlvbk1hbmFnZXIiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsIm5vdGlmeUxpc3RlbmVycyIsImFjdGlvbiIsImhhbmRsZVBvcFN0YXRlIiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwicHJvbXB0IiwidW5ibG9jayIsInNldFByb21wdCIsInVubGlzdGVuIiwiYXBwZW5kTGlzdGVuZXIiLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtaW4iLCJtYXgiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiX3dhcm5pbmciLCJuZXh0UHJvbXB0IiwiaXNBY3RpdmUiLCJmaWx0ZXIiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZXMiLCJkZWZhdWx0UHJvcHMiLCJkaXNwbGF5TmFtZSIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInByb3BUeXBlcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiZGVzY3JpcHRvciIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsImludmFyaWFudCIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0Iiwic2hpbSIsInByb3BOYW1lIiwiY29tcG9uZW50TmFtZSIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImZ1bmMiLCJudW1iZXIiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudCIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX2NhdWdodEVycm9yIiwiX2hhc0NhdWdodEVycm9yIiwiX3JldGhyb3dFcnJvciIsIl9oYXNSZXRocm93RXJyb3IiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2siLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJwYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwiZnJlZXplIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiY3VycmVudFRhcmdldCIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIkxhIiwiTWEiLCJOYSIsInN0YXRlTm9kZSIsImRpc2FibGVkIiwiT2EiLCJQYSIsIlFhIiwiaW5qZWN0aW9uIiwiZ2V0TGlzdGVuZXIiLCJydW5FdmVudHNJbkJhdGNoIiwicnVuRXh0cmFjdGVkRXZlbnRzSW5CYXRjaCIsIlJhIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJYYSIsInByZWNhY2hlRmliZXJOb2RlIiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiYmIiLCJkaXNwYXRjaENvbmZpZyIsImRiIiwiX3RhcmdldEluc3QiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiYWx0ZXJuYXRlIiwiamIiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsImtiIiwibGIiLCJkb2N1bWVudEVsZW1lbnQiLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibWIiLCJuYiIsIm9iIiwicGIiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiZGVmYXVsdFByZXZlbnRlZCIsImlzVHJ1c3RlZCIsIm5hdGl2ZUV2ZW50IiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJyYiIsImV2ZW50UG9vbCIsInNiIiwiZGVzdHJ1Y3RvciIsInFiIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXh0ZW5kIiwidGIiLCJ1YiIsInZiIiwid2IiLCJ4YiIsImRvY3VtZW50TW9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiYmVmb3JlSW5wdXQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsIktiIiwiTGIiLCJrZXlDb2RlIiwiTWIiLCJkZXRhaWwiLCJOYiIsIlFiIiwid2hpY2giLCJPYiIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsIlBiIiwiUmIiLCJTYiIsIlRiIiwiVWIiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwiVmIiLCJpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50IiwiV2IiLCJYYiIsIlliIiwiWmIiLCJlbnF1ZXVlU3RhdGVSZXN0b3JlIiwibmVlZHNTdGF0ZVJlc3RvcmUiLCJyZXN0b3JlU3RhdGVJZk5lZWRlZCIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZGF0ZXRpbWUtbG9jYWwiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInRlbCIsInRleHQiLCJ0aW1lIiwid2VlayIsImZjIiwiZ2MiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsImhjIiwiaWMiLCJrYyIsIl92YWx1ZVRyYWNrZXIiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiamMiLCJsYyIsImNoZWNrZWQiLCJtYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJvYyIsInBjIiwicWMiLCJyYyIsInNjIiwidGMiLCJ1YyIsInZjIiwid2MiLCJ4YyIsInljIiwiemMiLCJBYyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiQmMiLCJDYyIsIkRjIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIkhjIiwiU2MiLCJ0b1VwcGVyQ2FzZSIsIlRjIiwiRmMiLCJHYyIsIkVjIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJVYyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiVmMiLCJXYyIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJYYyIsIlljIiwiWmMiLCIkYyIsInRhYkluZGV4IiwiYWQiLCJjaGFuZ2UiLCJiZCIsImNkIiwiZGQiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImpkIiwia2QiLCJsZCIsIm1kIiwibmQiLCJvZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJwZCIsInZpZXciLCJxZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJyZCIsImdldE1vZGlmaWVyU3RhdGUiLCJzZCIsInRkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidG9FbGVtZW50IiwidWQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInZkIiwicGFyZW50V2luZG93Iiwid2QiLCJlZmZlY3RUYWciLCJ4ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ5ZCIsInpkIiwic2libGluZyIsImN1cnJlbnQiLCJDZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJEZCIsImNsaXBib2FyZERhdGEiLCJFZCIsIkZkIiwiY2hhckNvZGUiLCJHZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJIZCIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJJZCIsInJlcGVhdCIsImxvY2FsZSIsIkpkIiwiZGF0YVRyYW5zZmVyIiwiS2QiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiTGQiLCJNZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiTmQiLCJPZCIsIlBkIiwiaXNJbnRlcmFjdGl2ZSIsIlFkIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwiUmQiLCJTZCIsIlRkIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsImNvbnRhaW5lckluZm8iLCJ0b3BMZXZlbFR5cGUiLCJVZCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiJGQiLCJhZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImJlIiwiY2UiLCJkZSIsInN0eWxlIiwidHJhbnNpdGlvbiIsImVlIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BCbHVyIiwidG9wQ2FuY2VsIiwidG9wQ2hhbmdlIiwidG9wQ2xpY2siLCJ0b3BDbG9zZSIsInRvcENvbXBvc2l0aW9uRW5kIiwidG9wQ29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uVXBkYXRlIiwidG9wQ29udGV4dE1lbnUiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wRm9jdXMiLCJ0b3BJbnB1dCIsInRvcEtleURvd24iLCJ0b3BLZXlQcmVzcyIsInRvcEtleVVwIiwidG9wTG9hZCIsInRvcExvYWRTdGFydCIsInRvcE1vdXNlRG93biIsInRvcE1vdXNlTW92ZSIsInRvcE1vdXNlT3V0IiwidG9wTW91c2VPdmVyIiwidG9wTW91c2VVcCIsInRvcFBhc3RlIiwidG9wU2Nyb2xsIiwidG9wU2VsZWN0aW9uQ2hhbmdlIiwidG9wVGV4dElucHV0IiwidG9wVG9nZ2xlIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJmZSIsInRvcEFib3J0IiwidG9wQ2FuUGxheSIsInRvcENhblBsYXlUaHJvdWdoIiwidG9wRHVyYXRpb25DaGFuZ2UiLCJ0b3BFbXB0aWVkIiwidG9wRW5jcnlwdGVkIiwidG9wRW5kZWQiLCJ0b3BFcnJvciIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJmaXJzdENoaWxkIiwibGUiLCJ0ZXh0Q29udGVudCIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiY29udGVudEVkaXRhYmxlIiwibmUiLCJzZWxlY3QiLCJwZSIsInFlIiwicmUiLCJzZSIsInVlIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIndlIiwib25TZWxlY3QiLCJ4ZSIsInJlZiIsInBlbmRpbmdQcm9wcyIsIm1lbW9pemVkU3RhdGUiLCJ1cGRhdGVRdWV1ZSIsIm1lbW9pemVkUHJvcHMiLCJtb2RlIiwibGFzdEVmZmVjdCIsImZpcnN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImV4cGlyYXRpb25UaW1lIiwieWUiLCJ6ZSIsImlzUmVhY3RDb21wb25lbnQiLCJBZSIsIiQkdHlwZW9mIiwiQmUiLCJDZSIsInBlbmRpbmdDaGlsZHJlbiIsImltcGxlbWVudGF0aW9uIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsImJhc2VTdGF0ZSIsImZpcnN0IiwibGFzdCIsImNhbGxiYWNrTGlzdCIsImhhc0ZvcmNlVXBkYXRlIiwiaXNJbml0aWFsaXplZCIsImNhcHR1cmVkVmFsdWVzIiwiS2UiLCJTZXQiLCJMZSIsIk1lIiwiTmUiLCJPZSIsIlBlIiwicGFydGlhbFN0YXRlIiwiUWUiLCJpc1JlcGxhY2UiLCJpc0ZvcmNlZCIsImNhcHR1cmVkVmFsdWUiLCJSZSIsIlRlIiwiVWUiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwicmVmcyIsIlZlIiwiV2UiLCJNYXAiLCJkb25lIiwiWGUiLCJZZSIsIlplIiwicmVuZGVyIiwicGVuZGluZ0NvbnRleHQiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsInB1c2hQcm92aWRlciIsImdldE1hc2tlZENvbnRleHQiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVwZGF0ZXIiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY2FjaGVDb250ZXh0IiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc01vdW50ZWQiLCJlbnF1ZXVlU2V0U3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJhZG9wdENsYXNzSW5zdGFuY2UiLCJjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsIlNlIiwiS2MiLCJMYyIsIkRiIiwiTWMiLCJFYiIsImJlZ2luV29yayIsIl9jb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsImJmIiwic3RhY2siLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZGYiLCJrZiIsIllhIiwiTmMiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIlphIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJGYiIsIndnIiwidmUiLCJJYyIsIlBjIiwiR2IiLCJ5ZyIsIlFjIiwibGciLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiSGIiLCIkYSIsIkliIiwiX29uQ29tcGxldGUiLCJ2ZyIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwiYWIiLCJrZyIsInRlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJqZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJnZXRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiZ2YiLCJwb3BQcm92aWRlciIsImhmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZmYiLCJjcmVhdGVJbnN0YW5jZSIsImNyZWF0ZVRleHRJbnN0YW5jZSIsImFwcGVuZEluaXRpYWxDaGlsZCIsImZpbmFsaXplSW5pdGlhbENoaWxkcmVuIiwicHJlcGFyZVVwZGF0ZSIsInBlcnNpc3RlbmNlIiwibXV0YXRpb24iLCJjb21wbGV0ZVdvcmsiLCJoYW5kbGVyIiwiJGUiLCJ0aHJvd0V4Y2VwdGlvbiIsInVud2luZFdvcmsiLCJ1bndpbmRJbnRlcnJ1cHRlZFdvcmsiLCJhZiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiZ2V0UHVibGljSW5zdGFuY2UiLCJjb21taXRNb3VudCIsImNvbW1pdFVwZGF0ZSIsInJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRUZXh0VXBkYXRlIiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJjb21taXRSZXNldFRleHRDb250ZW50IiwiY29tbWl0UGxhY2VtZW50IiwiY29tbWl0RGVsZXRpb24iLCJjb21taXRXb3JrIiwiY29tbWl0TGlmZUN5Y2xlcyIsImNvbW1pdEVycm9yTG9nZ2luZyIsImNvbXBvbmVudFN0YWNrIiwiY29tbWl0QXR0YWNoUmVmIiwiY29tbWl0RGV0YWNoUmVmIiwiY2YiLCJhZGQiLCJzY2hlZHVsZURlZmVycmVkQ2FsbGJhY2siLCJjYW5jZWxEZWZlcnJlZENhbGxiYWNrIiwicHJlcGFyZUZvckNvbW1pdCIsInJlc2V0QWZ0ZXJDb21taXQiLCJSYyIsInJlY2FsY3VsYXRlQ3VycmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyIiwic2NoZWR1bGVXb3JrIiwicmVxdWVzdFdvcmsiLCJmbHVzaFJvb3QiLCJiYXRjaGVkVXBkYXRlcyIsInVuYmF0Y2hlZFVwZGF0ZXMiLCJmbHVzaFN5bmMiLCJmbHVzaENvbnRyb2xsZWQiLCJkZWZlcnJlZFVwZGF0ZXMiLCJzeW5jVXBkYXRlcyIsImludGVyYWN0aXZlVXBkYXRlcyIsImZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzIiwiY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbiIsImxlZ2FjeUNvbnRleHQiLCJsZiIsIkFkIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsIkJkIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJHZSIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwibWYiLCJuZiIsIm9mIiwicWYiLCJwZXJmb3JtYW5jZSIsInJmIiwic2YiLCJ0ZiIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiZGlkVGltZW91dCIsIkNmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiRGYiLCJwb3N0TWVzc2FnZSIsIkluZmluaXR5IiwiRmYiLCJDaGlsZHJlbiIsIkVmIiwiR2YiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsIkhmIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIklmIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJKZiIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsIlFmIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlJmIiwibGFzdENoaWxkIiwibm9kZVZhbHVlIiwiU2YiLCJUZiIsIlVmIiwic2V0UHJvcGVydHkiLCJWZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIldmIiwiWGYiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImNyZWF0ZUVsZW1lbnROUyIsImJnIiwiY2ciLCJfX2h0bWwiLCJvbkNsaWNrIiwib25jbGljayIsImRnIiwiZWciLCJmZyIsIm1nIiwibmciLCJzZXRJbml0aWFsUHJvcGVydGllcyIsImRpZmZQcm9wZXJ0aWVzIiwidXBkYXRlUHJvcGVydGllcyIsImRpZmZIeWRyYXRlZFByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRUZXh0Iiwid2FybkZvclVubWF0Y2hlZFRleHQiLCJ3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudCIsIndhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkVGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwib2ciLCJwZyIsInFnIiwiX2NhbGxiYWNrcyIsIl9uZXh0IiwiX2hhc0NoaWxkcmVuIiwiX2RpZENvbXBsZXRlIiwiX2NoaWxkcmVuIiwicmciLCJfZGlkQ29tbWl0IiwiX29uQ29tbWl0Iiwic2ciLCJfaW50ZXJuYWxSb290IiwidGciLCJ1ZyIsImF1dG9Gb2N1cyIsImNvbW1pdCIsInVubW91bnQiLCJsZWdhY3lfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjcmVhdGVCYXRjaCIsInRhZ05hbWUiLCJyYW5nZUNvdW50IiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJoaWRkZW4iLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIkNnIiwiRWciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRGciLCJGZyIsInBmIiwiR2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJIZyIsIklnIiwiY2hlY2tEQ0UiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJ3cml0YWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiUmVhY3QiLCJBTExfSU5JVElBTElaRVJTIiwiUkVBRFlfSU5JVElBTElaRVJTIiwibG9hZCIsImxvYWRlciIsImxvYWRpbmciLCJsb2FkZWQiLCJjYXRjaCIsImxvYWRNYXAiLCJyZXMiLCJjcmVhdGVMb2FkYWJsZUNvbXBvbmVudCIsImxvYWRGbiIsIl9jbGFzcyIsIl90ZW1wIiwib3B0cyIsImRlbGF5Iiwid2VicGFjayIsImluaXQiLCJnZXRNb2R1bGVJZHMiLCJldmVyeSIsIl9SZWFjdCRDb21wb25lbnQiLCJMb2FkYWJsZUNvbXBvbmVudCIsIl90aGlzIiwicGFzdERlbGF5IiwidGltZWRPdXQiLCJwcmVsb2FkIiwiX3RoaXMyIiwiX21vdW50ZWQiLCJsb2FkYWJsZSIsIm1vZHVsZU5hbWUiLCJyZXBvcnQiLCJfZGVsYXkiLCJfdGltZW91dCIsIl9jbGVhclRpbWVvdXRzIiwiaXNMb2FkaW5nIiwiQ29tcG9uZW50IiwiTG9hZGFibGUiLCJDYXB0dXJlIiwiX1JlYWN0JENvbXBvbmVudDIiLCJvbmx5IiwiZmx1c2hJbml0aWFsaXplcnMiLCJpbml0aWFsaXplcnMiLCJwcmVsb2FkQWxsIiwicHJlbG9hZFJlYWR5IiwiUm91dGVyX1JvdXRlciIsIlJvdXRlciIsImNvbXB1dGVNYXRjaCIsInJvdXRlciIsInJvdXRlIiwicGFyYW1zIiwiaXNFeGFjdCIsIl9wcm9wcyIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJyZWFjdF9kZWZhdWx0IiwiY291bnQiLCJuZXh0UHJvcHMiLCJicm93c2VyX2RlZmF1bHQiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJlc19Sb3V0ZXIiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1JvdXRlciIsIkJyb3dzZXJSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkJyb3dzZXJSb3V0ZXJfQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXIiLCJCcm93c2VyUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnlfZGVmYXVsdCIsIkJyb3dzZXJSb3V0ZXJfaW5oZXJpdHMiLCJlc19Ccm93c2VyUm91dGVyIiwiSGFzaFJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiSGFzaFJvdXRlcl9IYXNoUm91dGVyIiwiSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVIYXNoSGlzdG9yeV9kZWZhdWx0IiwiSGFzaFJvdXRlcl9pbmhlcml0cyIsImVzX0hhc2hSb3V0ZXIiLCJMaW5rX2V4dGVuZHMiLCJMaW5rX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rX0xpbmsiLCJMaW5rIiwiTGlua19jbGFzc0NhbGxDaGVjayIsImhhbmRsZUNsaWNrIiwiX3RoaXMkcHJvcHMiLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJlc19MaW5rIiwiTWVtb3J5Um91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJNZW1vcnlSb3V0ZXJfTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyIiwiTWVtb3J5Um91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlTWVtb3J5SGlzdG9yeV9kZWZhdWx0IiwiTWVtb3J5Um91dGVyX2luaGVyaXRzIiwicmVhY3Rfcm91dGVyX2RvbV9lc19NZW1vcnlSb3V0ZXIiLCJwYXR0ZXJuQ2FjaGUiLCJjYWNoZUNvdW50IiwiZXNfbWF0Y2hQYXRoIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJwYXR0ZXJuIiwiY2FjaGVLZXkiLCJjb21waWxlZFBhdHRlcm4iLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiZXhlYyIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJSb3V0ZV9leHRlbmRzIiwiUm91dGVfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJvdXRlX2lzRW1wdHlDaGlsZHJlbiIsIlJvdXRlX1JvdXRlIiwiUm91dGUiLCJSb3V0ZV9jbGFzc0NhbGxDaGVjayIsIlJvdXRlX2luaGVyaXRzIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiZ2V0SXNBY3RpdmUiLCJhcmlhQ3VycmVudCIsInJlc3QiLCJOYXZMaW5rX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX3JlZjIiLCJhcmlhLWN1cnJlbnQiLCJlc19OYXZMaW5rIiwiUHJvbXB0X1Byb21wdCIsIlByb21wdCIsIlByb21wdF9jbGFzc0NhbGxDaGVjayIsIlByb21wdF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUHJvbXB0X2luaGVyaXRzIiwiZW5hYmxlIiwiZGlzYWJsZSIsIndoZW4iLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1Byb21wdCIsIkxvY2F0aW9uVXRpbHNfZXh0ZW5kcyIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJyZXNvbHZlX3BhdGhuYW1lIiwiTG9jYXRpb25VdGlsc19sb2NhdGlvbnNBcmVFcXVhbCIsInZhbHVlX2VxdWFsIiwiUmVkaXJlY3RfUmVkaXJlY3QiLCJSZWRpcmVjdCIsIlJlZGlyZWN0X2NsYXNzQ2FsbENoZWNrIiwiUmVkaXJlY3RfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZGlyZWN0X2luaGVyaXRzIiwiaXNTdGF0aWMiLCJwZXJmb3JtIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwicmVhY3Rfcm91dGVyX2RvbV9lc19SZWRpcmVjdCIsIlN0YXRpY1JvdXRlcl9leHRlbmRzIiwiU3RhdGljUm91dGVyX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTdGF0aWNSb3V0ZXJfYWRkQmFzZW5hbWUiLCJQYXRoVXRpbHMiLCJTdGF0aWNSb3V0ZXJfY3JlYXRlTG9jYXRpb24iLCJfb2JqZWN0JHBhdGhuYW1lIiwiX29iamVjdCRzZWFyY2giLCJfb2JqZWN0JGhhc2giLCJTdGF0aWNSb3V0ZXJfY3JlYXRlVVJMIiwiU3RhdGljUm91dGVyX3N0YXRpY0hhbmRsZXIiLCJtZXRob2ROYW1lIiwibm9vcCIsIlN0YXRpY1JvdXRlcl9TdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXIiLCJTdGF0aWNSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJoYW5kbGVQdXNoIiwiaGFuZGxlUmVwbGFjZSIsIl90aGlzJHByb3BzMiIsImhhbmRsZUxpc3RlbiIsImhhbmRsZUJsb2NrIiwiU3RhdGljUm91dGVyX2luaGVyaXRzIiwiU3RhdGljUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiU3RhdGljUm91dGVyX3N0cmlwQmFzZW5hbWUiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N0YXRpY1JvdXRlciIsIlN3aXRjaF9Td2l0Y2giLCJTd2l0Y2giLCJTd2l0Y2hfY2xhc3NDYWxsQ2hlY2siLCJTd2l0Y2hfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlN3aXRjaF9pbmhlcml0cyIsImlzVmFsaWRFbGVtZW50IiwiX2VsZW1lbnQkcHJvcHMiLCJwYXRoUHJvcCIsImNsb25lRWxlbWVudCIsInJlYWN0X3JvdXRlcl9kb21fZXNfU3dpdGNoIiwicmVhY3Rfcm91dGVyX2RvbV9lc19tYXRjaFBhdGgiLCJ3aXRoUm91dGVyX2V4dGVuZHMiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX3dpdGhSb3V0ZXIiLCJ3cmFwcGVkQ29tcG9uZW50UmVmIiwicmVtYWluaW5nUHJvcHMiLCJ3aXRoUm91dGVyX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicm91dGVDb21wb25lbnRQcm9wcyIsIldyYXBwZWRDb21wb25lbnQiLCJob2lzdF9ub25fcmVhY3Rfc3RhdGljc19kZWZhdWx0IiwiYXJyIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJlc2NhcGVkIiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwibWF0Y2hlcyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImF0dGFjaEtleXMiLCJmbGFncyIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImNhbGN1bGF0ZVJnYmEiLCJyZ2JWYWx1ZXMiLCJoZXgiLCJwYXJzZUludCIsIl9CYXJMb2FkZXIiLCJfQmVhdExvYWRlciIsIl9Cb3VuY2VMb2FkZXIiLCJfQ2lyY2xlTG9hZGVyIiwiX0NsaXBMb2FkZXIiLCJfQ2xpbWJpbmdCb3hMb2FkZXIiLCJfRG90TG9hZGVyIiwiX0ZhZGVMb2FkZXIiLCJfR3JpZExvYWRlciIsIl9IYXNoTG9hZGVyIiwiX01vb25Mb2FkZXIiLCJfUGFjbWFuTG9hZGVyIiwiX1Byb3BhZ2F0ZUxvYWRlciIsIl9QdWxzZUxvYWRlciIsIl9SaW5nTG9hZGVyIiwiX1Jpc2VMb2FkZXIiLCJfUm90YXRlTG9hZGVyIiwiX1NjYWxlTG9hZGVyIiwiX1N5bmNMb2FkZXIiLCJfQmFyTG9hZGVyMiIsIl9CZWF0TG9hZGVyMiIsIl9Cb3VuY2VMb2FkZXIyIiwiX0NpcmNsZUxvYWRlcjIiLCJfQ2xpcExvYWRlcjIiLCJfQ2xpbWJpbmdCb3hMb2FkZXIyIiwiX0RvdExvYWRlcjIiLCJfRmFkZUxvYWRlcjIiLCJfR3JpZExvYWRlcjIiLCJfSGFzaExvYWRlcjIiLCJfTW9vbkxvYWRlcjIiLCJfUGFjbWFuTG9hZGVyMiIsIl9Qcm9wYWdhdGVMb2FkZXIyIiwiX1B1bHNlTG9hZGVyMiIsIl9SaW5nTG9hZGVyMiIsIl9SaXNlTG9hZGVyMiIsIl9Sb3RhdGVMb2FkZXIyIiwiX1NjYWxlTG9hZGVyMiIsIl9TeW5jTG9hZGVyMiIsIkJhckxvYWRlciIsIkJlYXRMb2FkZXIiLCJCb3VuY2VMb2FkZXIiLCJDaXJjbGVMb2FkZXIiLCJDbGlwTG9hZGVyIiwiQ2xpbWJpbmdCb3hMb2FkZXIiLCJEb3RMb2FkZXIiLCJGYWRlTG9hZGVyIiwiR3JpZExvYWRlciIsIkhhc2hMb2FkZXIiLCJNb29uTG9hZGVyIiwiUGFjbWFuTG9hZGVyIiwiUHJvcGFnYXRlTG9hZGVyIiwiUHVsc2VMb2FkZXIiLCJSaW5nTG9hZGVyIiwiUmlzZUxvYWRlciIsIlJvdGF0ZUxvYWRlciIsIlNjYWxlTG9hZGVyIiwiU3luY0xvYWRlciIsIl9yZWFjdCIsIl9wcm9wVHlwZXMiLCJfZW1vdGlvbiIsIl9yZWNvbXBvc2UiLCJfaGVscGVycyIsIkxvYWRlciIsIl9yZWFjdDIiLCJfcHJvcFR5cGVzMiIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJsb25nIiwic2hvcnQiLCJoZWlnaHQiLCJ3cmFwcGVyIiwid2lkdGgiLCJvbmx5VXBkYXRlRm9yS2V5cyIsImJlYXQiLCJzaXplIiwibWFyZ2luIiwiYm91bmNlIiwiY2lyY2xlIiwiY2xpbWJpbmdCb3giLCJoaWxsIiwiY29udGFpbmVyIiwiY2xpcCIsInJvdGF0ZSIsImZhZGUiLCJyYWRpdXMiLCJxdWFydGVyIiwiZ3JpZCIsInJhbmQiLCJ0aGlja25lc3MiLCJsYXQiLCJiZWZvcmUiLCJhZnRlciIsIm1vb24iLCJtb29uU2l6ZSIsImJhbGxTdHlsZSIsImJhbGwiLCJwYWNtYW4iLCJzMSIsInMyIiwicGFjbWFuU3R5bGUiLCJwYWMiLCJtYW4iLCJkaXN0YW5jZSIsInByb3BhZ2F0ZSIsInB1bHNlIiwicmlnaHQiLCJldmVuIiwib2RkIiwic2NhbGUiLCJzeW5jIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImtleVByZWZpeCIsIj0iLCI6IiwidG9BcnJheSIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwiY3JlYXRlRmFjdG9yeSIsInNldFN0YXRpYyIsIkJhc2VDb21wb25lbnQiLCJzZXREaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiQ29tcG9uZW50JCQxIiwid3JhcERpc3BsYXlOYW1lIiwiaG9jTmFtZSIsIm1hcFByb3BzIiwicHJvcHNNYXBwZXIiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2xhc3NDYWxsQ2hlY2siLCJpbmhlcml0cyIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIndpdGhQcm9wcyIsInBpY2siLCJ3aXRoUHJvcHNPbkNoYW5nZSIsInNob3VsZE1hcE9yS2V5cyIsInNob3VsZE1hcCIsImZianNfbGliX3NoYWxsb3dFcXVhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJfQ29tcG9uZW50IiwiV2l0aFByb3BzT25DaGFuZ2UiLCJjb21wdXRlZFByb3BzIiwibWFwVmFsdWVzIiwid2l0aEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJXaXRoSGFuZGxlcnMiLCJfaW5pdGlhbGlzZVByb3BzIiwiY2FjaGVkSGFuZGxlcnMiLCJjcmVhdGVIYW5kbGVyIiwiaGFuZGxlck5hbWUiLCJjYWNoZWRIYW5kbGVyIiwiRGVmYXVsdFByb3BzIiwib3duZXJQcm9wcyIsIm9taXQiLCJyZW5hbWVQcm9wIiwib2xkTmFtZSIsIm5ld05hbWUiLCJfYmFiZWxIZWxwZXJzJGV4dGVuZHMiLCJyZW5hbWVQcm9wcyIsIm5hbWVNYXAiLCJfIiwiZmxhdHRlblByb3AiLCJ3aXRoU3RhdGUiLCJzdGF0ZU5hbWUiLCJzdGF0ZVVwZGF0ZXJOYW1lIiwiaW5pdGlhbFN0YXRlIiwiV2l0aFN0YXRlIiwic3RhdGVWYWx1ZSIsInVwZGF0ZVN0YXRlVmFsdWUiLCJ1cGRhdGVGbiIsIndpdGhTdGF0ZUhhbmRsZXJzIiwic3RhdGVVcGRhdGVycyIsIldpdGhTdGF0ZUhhbmRsZXJzIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwibWF5QmVFdmVudCIsIl9sZW4yIiwiX2tleTIiLCJ3aXRoUmVkdWNlciIsImRpc3BhdGNoTmFtZSIsInJlZHVjZXIiLCJXaXRoUmVkdWNlciIsImluaXRpYWxpemVTdGF0ZVZhbHVlIiwiZGlzcGF0Y2giLCJpZGVudGl0eSIsImJyYW5jaCIsImxlZnRGYWN0b3J5IiwicmlnaHRGYWN0b3J5IiwicmVuZGVyQ29tcG9uZW50IiwiTm90aGluZyIsInJlbmRlck5vdGhpbmciLCJzaG91bGRVcGRhdGUiLCJTaG91bGRVcGRhdGUiLCJwdXJlIiwiaG9jIiwicHJvcEtleXMiLCJvbmx5VXBkYXRlRm9yUHJvcFR5cGVzIiwid2l0aENvbnRleHQiLCJXaXRoQ29udGV4dCIsImdldENvbnRleHQiLCJHZXRDb250ZXh0IiwibGlmZWN5Y2xlIiwic3BlYyIsIkxpZmVjeWNsZSIsImhvb2siLCJpc0NsYXNzQ29tcG9uZW50IiwidG9DbGFzcyIsImJhc2VDb21wb25lbnQiLCJUb0NsYXNzIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0Iiwic2V0UHJvcFR5cGVzIiwiY29tcG9zZSIsImZ1bmNzIiwiY3JlYXRlU2luayIsIlNpbmsiLCJjb21wb25lbnRGcm9tUHJvcCIsIm5lc3QiLCJDb21wb25lbnRzIiwiZmFjdG9yaWVzIiwicmVkdWNlUmlnaHQiLCJob2lzdFN0YXRpY3MiLCJoaWdoZXJPcmRlckNvbXBvbmVudCIsIk5ld0NvbXBvbmVudCIsImhvaXN0X25vbl9yZWFjdF9zdGF0aWNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9jb25maWciLCJmcm9tRVNPYnNlcnZhYmxlIiwidG9FU09ic2VydmFibGUiLCJjb25maWd1cmVPYnNlcnZhYmxlIiwiY29uZmlnIiwib2JzZXJ2YWJsZSIsInN0cmVhbSIsImNvbXBvbmVudEZyb21TdHJlYW1XaXRoQ29uZmlnIiwiY29uZmlnJCQxIiwicHJvcHNUb1Zkb20iLCJDb21wb25lbnRGcm9tU3RyZWFtIiwiX2NvbmZpZyRmcm9tRVNPYnNlcnZhIiwidmRvbSIsInByb3BzRW1pdHRlciIsImNoYW5nZV9lbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJwcm9wcyQiLCJzdWJzY3JpYmUiLCJvYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCJzeW1ib2xfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwidmRvbSQiLCJzdWJzY3JpcHRpb24iLCJjb21wb25lbnRGcm9tU3RyZWFtIiwiaWRlbnRpdHkkMSIsIm1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyIsInRyYW5zZm9ybSIsImNoaWxkUHJvcHMiLCJtYXBQcm9wc1N0cmVhbSIsImNyZWF0ZUV2ZW50SGFuZGxlcldpdGhDb25maWciLCJlbWl0dGVyIiwiY3JlYXRlRXZlbnRIYW5kbGVyIiwiaXNBYnNvbHV0ZSIsInNwbGljZU9uZSIsIl9fd2VicGFja19leHBvcnRzX18iLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJoYXNUcmFpbGluZ1NsYXNoIiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImF0b2IiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJhZGRBdHRycyIsImVsIiwicmVtb3ZlIiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwicmVsIiwiY3JlYXRlTGlua0VsZW1lbnQiLCJhdXRvRml4VXJscyIsImNvbnZlcnRUb0Fic29sdXRlVXJscyIsImJsb2IiLCJvbGRTcmMiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIm5ld09iaiIsIkRFQlVHIiwibmV3TGlzdCIsIm1heVJlbW92ZSIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJjc3NOb2RlIiwiY2hpbGROb2RlcyIsImJhc2VVcmwiLCJwcm90b2NvbCIsImhvc3QiLCJjdXJyZW50RGlyIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwicm9vdCIsIl9wb255ZmlsbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZ2xvYmFsIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwidmFsdWVFcXVhbCIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJldmFsIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJfcmVhY3RTcGlubmVycyIsIl9yZWFjdExvYWRhYmxlMiIsIl9yZWFjdFJvdXRlckRvbSIsIkNoYXJhY3RlcnMiLCJfTG9hZG1hbmcyIiwiTG9jYXRpb25zIiwiRXBpc29kZXMiLCJTaW5nbGVDaGFyYWN0ZXIiLCJTaW5nbGVMb2NhdGlvbiIsIlNpbmdsZUVwaXNvZGUiLCJBcHAiLCJfTmF2YmFyMiIsIl9Ib21lMiIsIl9yZWFjdERvbTIiLCJfQXBwMiIsImdldEVsZW1lbnRCeUlkIiwiaG1yIiwibG9jYWxzIiwiX19XRUJQ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TCxLQUFLLGdCQUFnQnF1QyxVQUFXdWUseUJBWmxDQyxpRENickIsUUFBQXRzRSxFQUFBLHNDQUNBQSxFQUFBLHNDQUNBQSxFQUFBLDJCQUNBLFFBQUFBLEVBQUEsK0VBRUF5c0UsRUFBQWp0RCxRQUFTbXVCLE9BQU8rckIsRUFBQWw2QyxRQUFBN2IsY0FBQStvRSxFQUFBbHRELFFBQUEsTUFBU2hjLFNBQVNtcEUsZUFBZSxvRENKakQsSUFBQWpoRSxFQUFBMUwsRUFBQSxvR0FFQSxpQkFBQTBMLFFBQUFuSCxFQUFBdEcsRUFBQXlOLEVBQUEsTUFPQSxJQUFBdEgsR0FBZXdvRSxLQUFBLEVBRWY1RyxlQVBBQSxFQVFBcUMsZ0JBQUExL0QsR0FFQTNGLEVBQUFoRCxFQUFBLCtDQUFBQSxDQUFBMEwsRUFBQXRILEdBRUFzSCxFQUFBbWhFLFNBQUF0b0UsRUFBQXdELFFBQUEyRCxFQUFBbWhFLFFBR0F0b0UsRUFBQXBFLElBQUE4SCxPQUFBLDRHQUFBNmtFLElBQUEsV0FDQSxJQUFBQyxFQUFBL3NFLEVBQUEsb0dBaUJBLEdBZkEsaUJBQUErc0UsUUFBQXhvRSxFQUFBdEcsRUFBQTh1RSxFQUFBLE9BRUEsU0FBQXBuRSxFQUFBQyxHQUNBLElBQUFzUyxFQUFBdlIsRUFBQSxFQUVBLElBQUF1UixLQUFBdlMsRUFBQSxDQUNBLElBQUFDLEdBQUFELEVBQUF1UyxLQUFBdFMsRUFBQXNTLEdBQUEsU0FDQXZSLElBR0EsSUFBQXVSLEtBQUF0UyxFQUFBZSxJQUVBLFdBQUFBLEVBVkEsQ0FXRytFLEVBQUFtaEUsT0FBQUUsRUFBQUYsUUFFSCxVQUFBM3FFLE1BQUEsdURBRUFjLEVBQUErcEUsR0FwQkEsS0F1QkF4b0UsRUFBQXBFLElBQUFrSSxRQUFBLFdBQWdDckYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHR9O1xuXG4gXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG4gXHRcdDtcbiBcdFx0aGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpXG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCI4MGIzODA4OWFmZjNjZGE5YzY3OFwiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XG4gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbiBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4gXHRcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkgbWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG4gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0KTtcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuIFx0XHR9O1xuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xuIFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4gXHRcdFx0XHR9LFxuIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fTtcbiBcdFx0Zm9yICh2YXIgbmFtZSBpbiBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcImVcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0cmV0dXJuIGZuO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgaG90ID0ge1xuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcbiBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG4gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cbiBcdFx0XHQvLyBNb2R1bGUgQVBJXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxuIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIikgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xuIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4gXHRcdFx0aWYgKCF1cGRhdGUpIHtcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbiBcdFx0XHR9XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbiBcdFx0XHRob3RBdmFpbGFibGVGaWxlc01hcCA9IHVwZGF0ZS5jO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcblxuIFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuIFx0XHRcdFx0XHRyZXNvbHZlOiByZXNvbHZlLFxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbiBcdFx0XHRmb3IodmFyIGNodW5rSWQgaW4gaW5zdGFsbGVkQ2h1bmtzKVxuIFx0XHRcdHtcbiBcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0Rpc3Bvc2UgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdFwiIGluIFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vblVuYWNjZXB0ZWQpIG9wdGlvbnMub25VbmFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRkZWZhdWx0OlxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcbiBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvQXBwbHkpIHtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuIFx0XHRcdFx0XHRcdFx0KVxuIFx0XHRcdFx0XHRcdCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQoXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbiBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0KVxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuIFx0XHRPYmplY3Qua2V5cyhob3RBdmFpbGFibGVGaWxlc01hcCkuZm9yRWFjaChmdW5jdGlvbihjaHVua0lkKSB7XG4gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0fSk7XG5cbiBcdFx0dmFyIGlkeDtcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcbiBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG4gXHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcbiBcdFx0XHRcdGNiKGRhdGEpO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xuXG4gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbiBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4gXHRcdHZhciBkZXBlbmRlbmN5O1xuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG4gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcblxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4gXHRcdFx0XHRcdFx0aWYgKGNiKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcbiBcdFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuIFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRtb2R1bGVJZCA9IGl0ZW0ubW9kdWxlO1xuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHR0cnkge1xuIFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjI7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbiBcdFx0aWYgKGVycm9yKSB7XG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcbiBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuIFx0XHR9XG5cbiBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0NjogMFxuIFx0fTtcblxuXG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cbiBcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JztcbiBcdFx0XHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbiBcdFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuIFx0XHRcdFx0XHRvblNjcmlwdENvbXBsZXRlKHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KTtcbiBcdFx0XHRcdH0sIDEyMDAwMCk7XG4gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRcdFx0ZnVuY3Rpb24gb25TY3JpcHRDb21wbGV0ZShldmVudCkge1xuIFx0XHRcdFx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG4gXHRcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHRcdFx0dmFyIGNodW5rID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRcdFx0XHRpZihjaHVuayAhPT0gMCkge1xuIFx0XHRcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuIFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcignTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKScpO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuIFx0XHRcdFx0XHRcdFx0Y2h1bmtbMV0oZXJyb3IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH07XG4gXHRcdFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gXHR9O1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX2hhc2hfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoXCIuL3NyYy9pbmRleC5qc1wiKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIGNyZWF0ZUNoYW5nZUVtaXR0ZXIgPSBleHBvcnRzLmNyZWF0ZUNoYW5nZUVtaXR0ZXIgPSBmdW5jdGlvbiBjcmVhdGVDaGFuZ2VFbWl0dGVyKCkge1xuICB2YXIgY3VycmVudExpc3RlbmVycyA9IFtdO1xuICB2YXIgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG5cbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0KCkge1xuICAgIGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkobGlzdGVuZXJzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGlzdGVuOiBsaXN0ZW4sXG4gICAgZW1pdDogZW1pdFxuICB9O1xufTsiLCJ2YXIgZXNjYXBlID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi91cmwvZXNjYXBlLmpzXCIpO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJoZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk3Y2U0YztcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC1mYW1pbHk6IEFiZWwsIHNhbnMtc2VyaWY7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBwYWRkaW5nOiAxMHB4IDUwcHg7XFxufVxcbmhlYWRlciBoMSB7XFxuICBjb2xvcjogIzExMTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogMzJweDtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxufVxcbmhlYWRlciBuYXYge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuaGVhZGVyIG5hdiBsaSB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xcbn1cXG5oZWFkZXIgbmF2IGxpIGE6bm90KGxhc3QtY2hpbGQpIHtcXG4gIHBhZGRpbmc6IDAgMTBweDtcXG59XFxuaGVhZGVyIG5hdiBsaSBhIHtcXG4gIGNvbG9yOiAjMTExO1xcbiAgZm9udC1mYW1pbHk6IEFiZWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDIycHg7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICB0cmFuc2l0aW9uOiBjb2xvciA0MDBtcztcXG4gIHotaW5kZXg6IDE7XFxufVxcbmhlYWRlciBuYXYgbGkgYTpob3ZlciB7XFxuICBjb2xvcjogI2ZlZmVmZTtcXG59XFxuaGVhZGVyIG5hdiBsaSBhOmFmdGVyIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIGNvbnRlbnQ6ICcuJztcXG4gIGNvbG9yOiB0cmFuc3BhcmVudDtcXG4gIGJhY2tncm91bmQ6ICM2YjliMmE7XFxuICB2aXNpYmlsaXR5OiBub25lO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IGFsbCAzMDBtcztcXG4gIHotaW5kZXg6IC0xO1xcbn1cXG5oZWFkZXIgbmF2IGxpIGE6aG92ZXI6YWZ0ZXIge1xcbiAgb3BhY2l0eTogMTtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICBoZWlnaHQ6IDE4MCU7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgaGVhZGVyIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBhZGRpbmc6IDEwcHggMTVweDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcbiAgaGVhZGVyIGgxIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGZvbnQtc2l6ZTogMjRweDtcXG4gIH1cXG4gIGhlYWRlciBuYXYge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG4gIGhlYWRlciBuYXYgbGkge1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgIzExMTtcXG4gICAgcGFkZGluZzogNXB4IDA7XFxuICAgIG1hcmdpbi1yaWdodDogMDtcXG4gIH1cXG4gIGhlYWRlciBuYXYgbGkgYSB7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gIH1cXG59XFxuLkhvbWUge1xcbiAgYmFja2dyb3VuZDogdXJsKFwiICsgZXNjYXBlKHJlcXVpcmUoXCIuLi9hc3NldHMvYmFubmVyLmpwZ1wiKSkgKyBcIikgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXIgZml4ZWQ7XFxuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGhlaWdodDogOTR2aDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLkhvbWU6YWZ0ZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29udGVudDogJyc7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNTUpO1xcbn1cXG4uSG9tZSBoMiB7XFxuICBjb2xvcjogI2YyZjJmMjtcXG4gIGZvbnQtZmFtaWx5OiBBYmVsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIG1heC13aWR0aDogMTIwMHB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdG9wOiAtNjBweDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG4gIHotaW5kZXg6IDI7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgLkhvbWUge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgfVxcbiAgLkhvbWUgaDIge1xcbiAgICBmb250LXNpemU6IDMwcHg7XFxuICAgIHBhZGRpbmc6IDEwcHg7XFxuICB9XFxufVxcbi5MaXN0LUNvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRhNzg4O1xcbiAgcGFkZGluZzogMzBweCA1MHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG4uTGlzdC1Db250YWluZXIgaDIge1xcbiAgZm9udC1mYW1pbHk6IEFiZWw7XFxuICBmb250LXNpemU6IDMwcHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcXG59XFxuLkxpc3QtQ29udGFpbmVyIC5MaXN0LUdyaWQge1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtZ2FwOiA1MHB4IDMwcHg7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdChhdXRvLWZpdCwgbWlubWF4KDI4MHB4LCAxZnIpKTtcXG4gIG1hcmdpbi1ib3R0b206IDUwcHg7XFxufVxcbi5MaXN0LUNvbnRhaW5lciBidXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZTE0YTtcXG4gIGJveC1zaGFkb3c6IDVweCA1cHggMnB4IHJnYmEoMCwwLDAsMC4xKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtZmFtaWx5OiBBYmVsLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgY29sb3I6ICMzMzM7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDIwMG1zLCBib3gtc2hhZG93IDI1MG1zLCBjb2xvciAzMDBtcywgdHJhbnNmb3JtIDQwMG1zO1xcbn1cXG4uTGlzdC1Db250YWluZXIgYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWRjMmQ7XFxuICBib3gtc2hhZG93OiAxMHB4IDEwcHggMnB4IHJnYmEoMCwwLDAsMC4xKTtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTVweCwgLTVweCk7XFxufVxcbi5MaXN0LUl0ZW0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsMjU1LDI1NSwwLjgpO1xcbiAgYm94LXNoYWRvdzogMnB4IDVweCAwIHJnYmEoMCwwLDAsMC4wMyk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LWZhbWlseTogQWJlbCwgc2Fucy1zZXJpZjtcXG4gIHBhZGRpbmc6IDAgNyUgMTAlIDclO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAyMDBtcywgYmFja2dyb3VuZC1jb2xvciAyNTBtcywgdHJhbnNmb3JtIDQwMG1zO1xcbn1cXG4uTGlzdC1JdGVtOmhvdmVyIHtcXG4gIGJveC1zaGFkb3c6IDRweCAxMHB4IHJnYmEoMCwwLDAsMC4wMyk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTJweCwgLTVweCkgc2NhbGUoMS4wMik7XFxufVxcbi5MaXN0LUl0ZW0gaW1nIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGxlZnQ6IC04JTtcXG4gIHdpZHRoOiAxMTYuMiU7XFxufVxcbi5MaXN0LUl0ZW0gaDMge1xcbiAgZm9udC1mYW1pbHk6IEFiZWwsIHNhbnMtc2VyaWY7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgcGFkZGluZzogMTBweCAwO1xcbn1cXG4uTGlzdC1JdGVtIHAge1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4zKTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmb250LXNpemU6IDE1cHg7XFxuICBwYWRkaW5nOiAxNnB4IDA7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcbi5MaXN0LUl0ZW0gcCBzcGFuIHtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuNyk7XFxufVxcbi5Mb2FkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U0YTc4ODtcXG4gIGNvbG9yOiAjOTdjZTRjO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDB2dztcXG4gIGhlaWdodDogMTAwdmg7XFxufVxcbi5iYWNrLWFycm93IHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1Yzg1MjQ7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMTBweDtcXG4gIHRvcDogMjBweDtcXG4gIGxlZnQ6IDIwcHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDQwMG1zLCB0cmFuc2Zvcm0gNTAwbXM7XFxufVxcbi5iYWNrLWFycm93IHN2ZyB7XFxuICBmaWxsOiAjZmVmZWZlO1xcbiAgd2lkdGg6IDMwcHg7XFxuICBoZWlnaHQ6IDMwcHg7XFxufVxcbi5iYWNrLWFycm93OmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5N2NlNGM7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMyk7XFxufVxcbi5TaW5nbGUtSW5mby1Db250YWluZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YwZTE0YTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiA5My41dmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG4uU2luZ2xlLUluZm8tQ29udGFpbmVyIC5TaW5nbGUtSW5mbyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmVmZWZlO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNjAlO1xcbiAgYm94LXNoYWRvdzogMTZweCAxNnB4IDFweCByZ2JhKDAsMCwwLDAuMSk7XFxuICB3aWR0aDogOTAlO1xcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XFxufVxcbi5TaW5nbGUtSW5mby1Db250YWluZXIgLlNpbmdsZS1JbmZvLkVwaXNvZGUsXFxuLlNpbmdsZS1JbmZvLUNvbnRhaW5lciAuU2luZ2xlLUluZm8uTG9jYXRpb24ge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBtYXgtd2lkdGg6IDgwMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbn1cXG4uU2luZ2xlLUluZm8tQ29udGFpbmVyIC5TaW5nbGUtSW5mby5FcGlzb2RlIC5TaW5nbGUtSW5mby1UZXh0LFxcbi5TaW5nbGUtSW5mby1Db250YWluZXIgLlNpbmdsZS1JbmZvLkxvY2F0aW9uIC5TaW5nbGUtSW5mby1UZXh0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4uU2luZ2xlLUluZm8tQ29udGFpbmVyIC5TaW5nbGUtSW5mbyBpbWcge1xcbiAgd2lkdGg6IDUwJTtcXG59XFxuLlNpbmdsZS1JbmZvLUNvbnRhaW5lciAuU2luZ2xlLUluZm8gLlNpbmdsZS1JbmZvLVRleHQge1xcbiAgZm9udC1mYW1pbHk6IEFiZWwsIHNhbnMtc2VyaWY7XFxuICBwYWRkaW5nOiAyMHB4IDkwcHg7XFxuICB3aWR0aDogNTAlO1xcbn1cXG4uU2luZ2xlLUluZm8tQ29udGFpbmVyIC5TaW5nbGUtSW5mbyAuU2luZ2xlLUluZm8tVGV4dCBoMiB7XFxuICBjb2xvcjogIzVjODUyNDtcXG4gIGZvbnQtc2l6ZTogNDBweDtcXG59XFxuLlNpbmdsZS1JbmZvLUNvbnRhaW5lciAuU2luZ2xlLUluZm8gLlNpbmdsZS1JbmZvLVRleHQgcCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMTcsMTcsMTcsMC40KTtcXG4gIHBhZGRpbmc6IDE2cHggMDtcXG59XFxuLlNpbmdsZS1JbmZvLUNvbnRhaW5lciAuU2luZ2xlLUluZm8gLlNpbmdsZS1JbmZvLVRleHQgcCBzcGFuIHtcXG4gIGNvbG9yOiByZ2JhKDAsMCwwLDAuNyk7XFxufVxcbkBtZWRpYSAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgLlNpbmdsZS1JbmZvLUNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBwYWRkaW5nLXRvcDogMTAwcHg7XFxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIH1cXG4gIC5TaW5nbGUtSW5mby1Db250YWluZXIgLlNpbmdsZS1JbmZvIHtcXG4gICAgYm94LXNoYWRvdzogbm9uZTtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDgwJTtcXG4gICAgbWFyZ2luOiAwIGF1dG87XFxuICB9XFxuICAuU2luZ2xlLUluZm8tQ29udGFpbmVyIC5TaW5nbGUtSW5mbyBpbWcge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG4gIC5TaW5nbGUtSW5mby1Db250YWluZXIgLlNpbmdsZS1JbmZvIC5TaW5nbGUtSW5mby1UZXh0IHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBhZGRpbmc6IDIwcHggMzBweDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxufVxcbiosXFxuKjpiZWZvcmUsXFxuKjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBjb2xvcjogaW5oZXJpdDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlc2NhcGUodXJsKSB7XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB1cmxcbiAgICB9XG4gICAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gICAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gICAgfVxuICAgIC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSkge1xuICAgICAgICByZXR1cm4gJ1wiJyArIHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpICsgJ1wiJ1xuICAgIH1cblxuICAgIHJldHVybiB1cmxcbn1cbiIsIi8vIG11cm11cmhhc2gyIHZpYSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yYXljbW9yZ2FuLzU4ODQyM1xuZnVuY3Rpb24gaGFzaFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGhhc2goc3RyLCBzdHIubGVuZ3RoKS50b1N0cmluZygzNik7XG59XG5cbmZ1bmN0aW9uIGhhc2goc3RyLCBzZWVkKSB7XG4gIHZhciBtID0gMHg1YmQxZTk5NTtcbiAgdmFyIHIgPSAyNDtcbiAgdmFyIGggPSBzZWVkIF4gc3RyLmxlbmd0aDtcbiAgdmFyIGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIHZhciBjdXJyZW50SW5kZXggPSAwO1xuXG4gIHdoaWxlIChsZW5ndGggPj0gNCkge1xuICAgIHZhciBrID0gVUludDMyKHN0ciwgY3VycmVudEluZGV4KTtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGsgXj0gayA+Pj4gcjtcbiAgICBrID0gVW11bDMyKGssIG0pO1xuICAgIGggPSBVbXVsMzIoaCwgbSk7XG4gICAgaCBePSBrO1xuICAgIGN1cnJlbnRJbmRleCArPSA0O1xuICAgIGxlbmd0aCAtPSA0O1xuICB9XG5cbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDM6XG4gICAgICBoIF49IFVJbnQxNihzdHIsIGN1cnJlbnRJbmRleCk7XG4gICAgICBoIF49IHN0ci5jaGFyQ29kZUF0KGN1cnJlbnRJbmRleCArIDIpIDw8IDE2O1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgaCBePSBVSW50MTYoc3RyLCBjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChjdXJyZW50SW5kZXgpO1xuICAgICAgaCA9IFVtdWwzMihoLCBtKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgaCBePSBoID4+PiAxMztcbiAgaCA9IFVtdWwzMihoLCBtKTtcbiAgaCBePSBoID4+PiAxNTtcbiAgcmV0dXJuIGggPj4+IDA7XG59XG5cbmZ1bmN0aW9uIFVJbnQzMihzdHIsIHBvcykge1xuICByZXR1cm4gc3RyLmNoYXJDb2RlQXQocG9zKyspICsgKHN0ci5jaGFyQ29kZUF0KHBvcysrKSA8PCA4KSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgMTYpICsgKHN0ci5jaGFyQ29kZUF0KHBvcykgPDwgMjQpO1xufVxuXG5mdW5jdGlvbiBVSW50MTYoc3RyLCBwb3MpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQ29kZUF0KHBvcysrKSArIChzdHIuY2hhckNvZGVBdChwb3MrKykgPDwgOCk7XG59XG5cbmZ1bmN0aW9uIFVtdWwzMihuLCBtKSB7XG4gIG4gPSBuIHwgMDtcbiAgbSA9IG0gfCAwO1xuICB2YXIgbmxvID0gbiAmIDB4ZmZmZjtcbiAgdmFyIG5oaSA9IG4gPj4+IDE2O1xuICB2YXIgcmVzID0gbmxvICogbSArICgobmhpICogbSAmIDB4ZmZmZikgPDwgMTYpIHwgMDtcbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIHBhID0gZnVuY3Rpb24gZmEoaGEpIHtcbiAgZnVuY3Rpb24gVihiLCBjLCBkLCBrLCBsKSB7XG4gICAgZm9yICh2YXIgYSA9IDAsIGYgPSAwLCBuID0gMCwgZSA9IDAsIGgsIHEsIG0sIHYgPSAwLCBBID0gMCwgQiA9IDAsIHggPSAwLCBDID0gMCwgcCA9IDAsIEcgPSAwLCByID0gMCwgTiA9IHEgPSAwLCBMID0gMCwgdCA9IDAsIEQgPSBkLmxlbmd0aCwgRiA9IEQgLSAxLCBnID0gXCJcIiwgdSA9IFwiXCIsIFMgPSBcIlwiLCBNID0gXCJcIiwgSDsgciA8IEQ7KSB7XG4gICAgICBtID0gZC5jaGFyQ29kZUF0KHIpO1xuICAgICAgciA9PT0gRiAmJiAwICE9PSBmICsgZSArIG4gKyBhICYmICgwICE9PSBmICYmIChtID0gNDcgPT09IGYgPyAxMCA6IDQ3KSwgZSA9IG4gPSBhID0gMCwgRCsrLCBGKyspO1xuXG4gICAgICBpZiAoMCA9PT0gZiArIGUgKyBuICsgYSkge1xuICAgICAgICBpZiAociA9PT0gRiAmJiAoMCA8IHEgJiYgKGcgPSBnLnJlcGxhY2UoUCwgXCJcIikpLCAwIDwgZy50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGcgKz0gZC5jaGFyQXQocik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbSA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKDEgPT09IE4pIHN3aXRjaCAobSkge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgTiA9IDA7XG5cbiAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBmb3IgKE4gPSAwLCB0ID0gciwgaCA9IG0sIHItLSwgbSA9IDU5OyB0IDwgRDspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChkLmNoYXJDb2RlQXQoKyt0KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgcisrLCBtID0gaDtcblxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICB0ID0gRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGcgPSBnLnRyaW0oKTtcbiAgICAgICAgICAgIGggPSBnLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB4ID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytyOyByIDwgRDspIHtcbiAgICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdChyKTtcblxuICAgICAgICAgICAgICBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICB4LS07XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0geCkgYnJlYWs7XG4gICAgICAgICAgICAgIHIrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IGQuc3Vic3RyaW5nKHQsIHIpO1xuICAgICAgICAgICAgMCA9PT0gaCAmJiAoaCA9IChnID0gZy5yZXBsYWNlKHFhLCBcIlwiKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKGgpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgcSAmJiAoZyA9IGcucmVwbGFjZShQLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgcSA9IGcuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgaCA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBoID0gVztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwID0gVihjLCBoLCBwLCBxLCBsICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IHAubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBYICYmIDAgPT09IHQgJiYgKHQgPSBnLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgMCA8IEUgJiYgKGggPSBpYShXLCBnLCBMKSwgSCA9IE8oMywgcCwgaCwgYywgSSwgeSwgdCwgcSwgbCksIGcgPSBoLmpvaW4oXCJcIiksIHZvaWQgMCAhPT0gSCAmJiAwID09PSAodCA9IChwID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKHEgPSAwLCBwID0gXCJcIikpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZyA9IGcucmVwbGFjZShyYSwgc2EpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBcIntcIiArIHAgKyBcIn1cIjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBnID0gZy5yZXBsYWNlKHRhLCBcIiQxICQyXCIgKyAoMCA8IFEgPyBUIDogXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBwID0gZyArIFwie1wiICsgcCArIFwifVwiO1xuICAgICAgICAgICAgICAgICAgICBwID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIFUoXCJAXCIgKyBwLCAzKSA/IFwiQC13ZWJraXQtXCIgKyBwICsgXCJAXCIgKyBwIDogXCJAXCIgKyBwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcCA9IGcgKyBwLCAxMTIgPT09IGsgJiYgKHAgPSAodSArPSBwLCBcIlwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHAgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcCA9IFYoYywgaWEoYywgZywgTCksIHAsIGssIGwgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUyArPSBwO1xuICAgICAgICAgICAgcCA9IEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZyA9ICgwIDwgcSA/IGcucmVwbGFjZShQLCBcIlwiKSA6IGcpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBnLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gRyAmJiAoaCA9IGcuY2hhckNvZGVBdCgwKSwgNDUgPT09IGggfHwgOTYgPCBoICYmIDEyMyA+IGgpICYmICh0ID0gKGcgPSBnLnJlcGxhY2UoXCIgXCIsIFwiOlwiKSkubGVuZ3RoKSwgMCA8IEUgJiYgdm9pZCAwICE9PSAoSCA9IE8oMSwgZywgYywgYiwgSSwgeSwgdS5sZW5ndGgsIGssIGwpKSAmJiAwID09PSAodCA9IChnID0gSC50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSBcIlxceDAwXFx4MDBcIiksIGggPSBnLmNoYXJDb2RlQXQoMCksIHEgPSBnLmNoYXJDb2RlQXQoMSksIGggKyBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE2OTpcbiAgICAgICAgICAgICAgY2FzZSAxNjM6XG4gICAgICAgICAgICAgICAgTSArPSBnICsgZC5jaGFyQXQocik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZy5jaGFyQ29kZUF0KHQgLSAxKSAmJiAodSArPSBqYShnLCBoLCBxLCBnLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEwgPSBxID0gRyA9IE4gPSBDID0gMDtcbiAgICAgICAgICAgIGcgPSBcIlwiO1xuICAgICAgICAgICAgbSA9IGQuY2hhckNvZGVBdCgrK3IpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAobSkge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhICsga2EpIHN3aXRjaCAoQikge1xuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgIGNhc2UgMTI2OlxuICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgMCA8IEcgJiYgKE4gPSAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgNDcgPT09IGYgPyBmID0gMCA6IDAgPT09IHogKyBDICYmIChxID0gMSwgZyArPSBcIlxceDAwXCIpO1xuICAgICAgICAgIDAgPCBFICogbGEgJiYgTygwLCBnLCBjLCBiLCBJLCB5LCB1Lmxlbmd0aCwgaywgbCk7XG4gICAgICAgICAgeSA9IDE7XG4gICAgICAgICAgSSsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBmICsgZSArIG4gKyBhKSB7XG4gICAgICAgICAgICB5Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB5Kys7XG4gICAgICAgICAgaCA9IGQuY2hhckF0KHIpO1xuXG4gICAgICAgICAgc3dpdGNoIChtKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gZSArIGEgKyBmKSBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICBoID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBtICYmIChoID0gXCIgXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIGggPSBcIlxcXFwwXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICBoID0gXCJcXFxcZlwiO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgaCA9IFwiXFxcXHZcIjtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgYSAmJiAwIDwgeiAmJiAocSA9IEwgPSAxLCBoID0gXCJcXGZcIiArIGgpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBlICsgZiArIGEgKyBKICYmIDAgPCBHKSBzd2l0Y2ggKHIgLSBHKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB2ICYmIDU4ID09PSBkLmNoYXJDb2RlQXQociAtIDMpICYmIChKID0gdik7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEEgJiYgKEogPSBBKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBhICYmIChHID0gcik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBmICsgbiArIGUgKyBhICYmIChxID0gMSwgaCArPSBcIlxcclwiKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgIDAgPT09IGYgJiYgKGUgPSBlID09PSBtID8gMCA6IDAgPT09IGUgPyBtIDogZSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBmICYmIChlID0gZSA9PT0gbSA/IDAgOiAwID09PSBlID8gbSA6IGUpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gZSArIGYgKyBuICYmIGErKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IGUgKyBmICsgbiAmJiBhLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBlICsgZiArIGEgJiYgbi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGUgKyBmICsgYSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBDKSBzd2l0Y2ggKDIgKiB2ICsgMyAqIEEpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgeCA9IDAsIEMgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuKys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gZiArIG4gKyBlICsgYSArIEcgKyBwICYmIChwID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IGUgKyBhICsgbikpIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIG0gKyAzICogZC5jaGFyQ29kZUF0KHIgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBmID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IHIsIGYgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IG0gJiYgNDIgPT09IHYgJiYgKDMzID09PSBkLmNoYXJDb2RlQXQodCArIDIpICYmICh1ICs9IGQuc3Vic3RyaW5nKHQsIHIgKyAxKSksIGggPSBcIlwiLCBmID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoMCA9PT0gZikge1xuICAgICAgICAgICAgaWYgKDAgPT09IHogKyBlICsgYSArIHAgJiYgMTA3ICE9PSBrICYmIDU5ICE9PSBtKSBzd2l0Y2ggKG0pIHtcbiAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgIGNhc2UgNjI6XG4gICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IEMpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgaCArPSBcIlxceDAwXCI7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBoID0gXCJcXHgwMFwiICsgaCArICg0NCA9PT0gbSA/IFwiXCIgOiBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Ugc3dpdGNoIChtKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgICBDID0gKyt4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgICAgICAgMCA9PT0gKEMgPSAtLXgpICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHYpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAwID09PSBDICYmIChxID0gMSwgaCArPSBcIlxceDAwXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZyArPSBoO1xuICAgICAgICAgICAgMzIgIT09IG0gJiYgOSAhPT0gbSAmJiAoQiA9IG0pO1xuICAgICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBBID0gdjtcbiAgICAgIHYgPSBtO1xuICAgICAgcisrO1xuICAgIH1cblxuICAgIHQgPSB1Lmxlbmd0aDtcbiAgICAwIDwgWCAmJiAwID09PSB0ICYmIDAgPT09IFMubGVuZ3RoICYmIDAgPT09IGNbMF0ubGVuZ3RoID09PSAhMSAmJiAoMTA5ICE9PSBrIHx8IDEgPT09IGMubGVuZ3RoICYmICgwIDwgeiA/IEsgOiBSKSA9PT0gY1swXSkgJiYgKHQgPSBjLmpvaW4oXCIsXCIpLmxlbmd0aCArIDIpO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICBpZiAoMCA9PT0geiAmJiAxMDcgIT09IGspIHtcbiAgICAgICAgZCA9IDA7XG4gICAgICAgIGEgPSBjLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGYgPSBBcnJheShhKTsgZCA8IGE7ICsrZCkge1xuICAgICAgICAgIHYgPSBjW2RdLnNwbGl0KHVhKTtcbiAgICAgICAgICBBID0gXCJcIjtcbiAgICAgICAgICBCID0gMDtcblxuICAgICAgICAgIGZvciAoRCA9IHYubGVuZ3RoOyBCIDwgRDsgKytCKSB7XG4gICAgICAgICAgICBpZiAoISgwID09PSAoeCA9IChlID0gdltCXSkubGVuZ3RoKSAmJiAxIDwgRCkpIHtcbiAgICAgICAgICAgICAgciA9IEEuY2hhckNvZGVBdChBLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICBMID0gZS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICBuID0gXCJcIjtcbiAgICAgICAgICAgICAgaWYgKDAgIT09IEIpIHN3aXRjaCAocikge1xuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgY2FzZSAxMjY6XG4gICAgICAgICAgICAgICAgY2FzZSA2MjpcbiAgICAgICAgICAgICAgICBjYXNlIDQzOlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIiBcIjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHN3aXRjaCAoTCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIEs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNjpcbiAgICAgICAgICAgICAgICBjYXNlIDYyOlxuICAgICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBlID0gbiArIGUgKyBLO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZS5jaGFyQ29kZUF0KDEpICsgMyAqIGUuY2hhckNvZGVBdCgyKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDUzMDpcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA8IFkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuICsgZS5zdWJzdHJpbmcoOCwgeCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPiBCIHx8IDEgPiB2W0IgLSAxXS5sZW5ndGgpIGUgPSBuICsgSyArIGU7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAgIG4gPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGUgPSAxIDwgeCAmJiAwIDwgZS5pbmRleE9mKFwiOlwiKSA/IG4gKyBlLnJlcGxhY2UodmEsIFwiJDFcIiArIEsgKyBcIiQyXCIpIDogbiArIGUgKyBLO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgQSArPSBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZbZF0gPSBBLnJlcGxhY2UoUCwgXCJcIikudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYyA9IGY7XG4gICAgICB9XG5cbiAgICAgIGggPSBjO1xuICAgICAgaWYgKDAgPCBFICYmIChIID0gTygyLCB1LCBoLCBiLCBJLCB5LCB0LCBrLCBsKSwgdm9pZCAwICE9PSBIICYmIDAgPT09ICh1ID0gSCkubGVuZ3RoKSkgcmV0dXJuIE0gKyB1ICsgUztcbiAgICAgIHUgPSBoLmpvaW4oXCIsXCIpICsgXCJ7XCIgKyB1ICsgXCJ9XCI7XG5cbiAgICAgIGlmICgwICE9PSB3ICogSikge1xuICAgICAgICAyICE9PSB3IHx8IFUodSwgMikgfHwgKEogPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEopIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2Uod2EsIFwiOi1tb3otJDFcIikgKyB1O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHUgPSB1LnJlcGxhY2UoWiwgXCI6Oi13ZWJraXQtaW5wdXQtJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6Oi1tb3otJDFcIikgKyB1LnJlcGxhY2UoWiwgXCI6LW1zLWlucHV0LSQxXCIpICsgdTtcbiAgICAgICAgfVxuXG4gICAgICAgIEogPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBNICsgdSArIFM7XG4gIH1cblxuICBmdW5jdGlvbiBpYShiLCBjLCBkKSB7XG4gICAgdmFyIGsgPSBjLnRyaW0oKS5zcGxpdCh4YSk7XG4gICAgYyA9IGs7XG4gICAgdmFyIGwgPSBrLmxlbmd0aCxcbiAgICAgICAgYSA9IGIubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChhKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBmID0gMDtcblxuICAgICAgICBmb3IgKGIgPSAwID09PSBhID8gXCJcIiA6IGJbMF0gKyBcIiBcIjsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGNbZl0gPSBtYShiLCBjW2ZdLCBkLCBhKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIG4gPSBmID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgZiA8IGw7ICsrZikge1xuICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgYTsgKytlKSB7XG4gICAgICAgICAgICBjW24rK10gPSBtYShiW2VdICsgXCIgXCIsIGtbZl0sIGQsIGEpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gbWEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gbCAmJiAobCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChsKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICBzd2l0Y2ggKHogKyBrKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGlmICgwID09PSBiLnRyaW0oKS5sZW5ndGgpIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBjLnJlcGxhY2UoTSwgXCIkMVwiICsgYi50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHN3aXRjaCAoYy5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICBpZiAoMCA8IFkgJiYgMCA8IHopIHJldHVybiBjLnJlcGxhY2UoeWEsIFwiJDFcIikucmVwbGFjZShNLCBcIiQxXCIgKyBSKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBiLnRyaW0oKSArIGM7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCBkICogeiAmJiAwIDwgYy5pbmRleE9mKFwiXFxmXCIpKSByZXR1cm4gYy5yZXBsYWNlKE0sICg1OCA9PT0gYi5jaGFyQ29kZUF0KDApID8gXCJcIiA6IFwiJDFcIikgKyBiLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGIgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gamEoYiwgYywgZCwgaykge1xuICAgIHZhciBsID0gMCxcbiAgICAgICAgYSA9IGIgKyBcIjtcIjtcbiAgICBjID0gMiAqIGMgKyAzICogZCArIDQgKiBrO1xuXG4gICAgaWYgKDk0NCA9PT0gYykge1xuICAgICAgbCA9IGEubGVuZ3RoO1xuICAgICAgYiA9IGEuaW5kZXhPZihcIjpcIiwgOSkgKyAxO1xuICAgICAgZCA9IGEuc3Vic3RyaW5nKDAsIGIpLnRyaW0oKTtcbiAgICAgIGsgPSBhLnN1YnN0cmluZyhiLCBsIC0gMSkudHJpbSgpO1xuXG4gICAgICBzd2l0Y2ggKGEuY2hhckNvZGVBdCg5KSAqIFEpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgaWYgKDExMCAhPT0gYS5jaGFyQ29kZUF0KDEwKSkgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmb3IgKGEgPSBrLnNwbGl0KChrID0gXCJcIiwgemEpKSwgYiA9IGMgPSAwLCBsID0gYS5sZW5ndGg7IGMgPCBsOyBiID0gMCwgKytjKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBmID0gYVtjXSwgbiA9IGYuc3BsaXQoQWEpOyBmID0gbltiXTspIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgIGlmICgxID09PSBRICYmICg2NCA8IGUgJiYgOTAgPiBlIHx8IDk2IDwgZSAmJiAxMjMgPiBlIHx8IDk1ID09PSBlIHx8IDQ1ID09PSBlICYmIDQ1ICE9PSBmLmNoYXJDb2RlQXQoMSkpKSBzd2l0Y2ggKGlzTmFOKHBhcnNlRmxvYXQoZikpICsgKC0xICE9PSBmLmluZGV4T2YoXCIoXCIpKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5maW5pdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFsdGVybmF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYmFja3dhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJydW5uaW5nXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub3JtYWxcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZvcndhcmRzXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3RoXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJub25lXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2VcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2UtaW5cIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVhc2Utb3V0XCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlYXNlLWluLW91dFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicGF1c2VkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJyZXZlcnNlXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbHRlcm5hdGUtcmV2ZXJzZVwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5oZXJpdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5pdGlhbFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5zZXRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtc3RhcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInN0ZXAtZW5kXCI6XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBmICs9IFQ7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBuW2IrK10gPSBmO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrICs9ICgwID09PSBjID8gXCJcIiA6IFwiLFwiKSArIG4uam9pbihcIiBcIik7XG4gICAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGsgPSBkICsgayArIFwiO1wiO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBVKGssIDEpID8gXCItd2Via2l0LVwiICsgayArIGsgOiBrO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIVUoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA0NSA9PT0gYS5jaGFyQ29kZUF0KDkpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItd2Via2l0LVwiICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbW96LVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1vei1cIiArIGEgKyBcIi1tcy1cIiArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgcmV0dXJuIDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkgPyBcIi13ZWJraXQtXCIgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtYm94LVwiICsgYS5yZXBsYWNlKFwiLWdyb3dcIiwgXCJcIikgKyBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJncm93XCIsIFwicG9zaXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYS5yZXBsYWNlKFwic2hyaW5rXCIsIFwibmVnYXRpdmVcIikgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtXCIgKyBhLnJlcGxhY2UoXCJiYXNpc1wiLCBcInByZWZlcnJlZC1zaXplXCIpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLWZsZXgtXCIgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoXCI6XCIsIDE1KSkucmVwbGFjZShcImZsZXgtXCIsIFwiXCIpLnJlcGxhY2UoXCJzcGFjZS1iZXR3ZWVuXCIsIFwianVzdGlmeVwiKTtcbiAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1ib3gtcGFja1wiICsgYiArIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LXBhY2tcIiArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBCYS50ZXN0KGEpID8gYS5yZXBsYWNlKG5hLCBcIjotd2Via2l0LVwiKSArIGEucmVwbGFjZShuYSwgXCI6LW1vei1cIikgKyBhIDogYTtcblxuICAgICAgY2FzZSAxRTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBsID0gYi5pbmRleE9mKFwiLVwiKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoYWEsIFwidGJcIik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShhYSwgXCJ0Yi1ybFwiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKGFhLCBcImxyXCIpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCItd2Via2l0LVwiICsgYSArIFwiLW1zLVwiICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoXCJzdGlja3lcIiwgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgbCA9IChhID0gYikubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChsKSA/IGEuc3Vic3RyaW5nKDAsIGwpIDogYSkuc3Vic3RyaW5nKGIuaW5kZXhPZihcIjpcIiwgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChjID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCBcIi13ZWJraXQtXCIgKyBiKSArIFwiO1wiICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsIFwiLXdlYmtpdC1cIiArICgxMDIgPCBjID8gXCJpbmxpbmUtXCIgOiBcIlwiKSArIFwiYm94XCIpICsgXCI7XCIgKyBhLnJlcGxhY2UoYiwgXCItd2Via2l0LVwiICsgYikgKyBcIjtcIiArIGEucmVwbGFjZShiLCBcIi1tcy1cIiArIGIgKyBcImJveFwiKSArIFwiO1wiICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgXCI7XCI7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKFwiLWl0ZW1zXCIsIFwiXCIpLCBcIi13ZWJraXQtXCIgKyBhICsgXCItd2Via2l0LWJveC1cIiArIGIgKyBcIi1tcy1mbGV4LVwiICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiBcIi13ZWJraXQtXCIgKyBhICsgXCItbXMtZmxleC1pdGVtLVwiICsgYS5yZXBsYWNlKENhLCBcIlwiKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFwiLXdlYmtpdC1cIiArIGEgKyBcIi1tcy1mbGV4LWxpbmUtcGFja1wiICsgYS5yZXBsYWNlKFwiYWxpZ24tY29udGVudFwiLCBcIlwiKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoMCA8IChsID0gYS5pbmRleE9mKFwiLWNvbnRlbnRcIiwgOSkpICYmIDEwOSA9PT0gYS5jaGFyQ29kZUF0KGwgLSAzKSAmJiA0NSAhPT0gYS5jaGFyQ29kZUF0KGwgLSA0KSkgcmV0dXJuIGIgPSBhLnN1YnN0cmluZyhsIC0gMyksIFwid2lkdGg6LXdlYmtpdC1cIiArIGIgKyBcIndpZHRoOi1tb3otXCIgKyBiICsgXCJ3aWR0aDpcIiArIGI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSBcIi13ZWJraXQtXCIgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gXCItbXMtXCIgKyBhIDogXCJcIikgKyBhLCAyMTEgPT09IGQgKyBrICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKFwidHJhbnNmb3JtXCIsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZihcIjtcIiwgMjcpICsgMSkucmVwbGFjZShEYSwgXCIkMS13ZWJraXQtJDJcIikgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gVShiLCBjKSB7XG4gICAgdmFyIGQgPSBiLmluZGV4T2YoMSA9PT0gYyA/IFwiOlwiIDogXCJ7XCIpLFxuICAgICAgICBrID0gYi5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGQgOiAxMCk7XG4gICAgZCA9IGIuc3Vic3RyaW5nKGQgKyAxLCBiLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBiYSgyICE9PSBjID8gayA6IGsucmVwbGFjZShFYSwgXCIkMVwiKSwgZCwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBzYShiLCBjKSB7XG4gICAgdmFyIGQgPSBqYShjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZCAhPT0gYyArIFwiO1wiID8gZC5yZXBsYWNlKEZhLCBcIiBvciAoJDEpXCIpLnN1YnN0cmluZyg0KSA6IFwiKFwiICsgYyArIFwiKVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gTyhiLCBjLCBkLCBrLCBsLCBhLCBmLCBuLCBlKSB7XG4gICAgZm9yICh2YXIgaCA9IDAsIHEgPSBjLCBtOyBoIDwgRTsgKytoKSB7XG4gICAgICBzd2l0Y2ggKG0gPSBjYVtoXS5jYWxsKEYsIGIsIHEsIGQsIGssIGwsIGEsIGYsIG4sIGUpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBxID0gbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHEpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSAhMTpcbiAgICAgIGNhc2UgITA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICBjYXNlIGM6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gcTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkYShiKSB7XG4gICAgc3dpdGNoIChiKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgRSA9IGNhLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBzd2l0Y2ggKGIuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICBjYXNlIEFycmF5OlxuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGQgPSBiLmxlbmd0aDsgYyA8IGQ7ICsrYykge1xuICAgICAgICAgICAgICBkYShiW2NdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIEZ1bmN0aW9uOlxuICAgICAgICAgICAgY2FbRSsrXSA9IGI7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQm9vbGVhbjpcbiAgICAgICAgICAgIGxhID0gISFiIHwgMDtcbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoYikge1xuICAgIGZvciAodmFyIGMgaW4gYikge1xuICAgICAgdmFyIGQgPSBiW2NdO1xuXG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSBcImtleWZyYW1lXCI6XG4gICAgICAgICAgUSA9IGQgfCAwO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJnbG9iYWxcIjpcbiAgICAgICAgICBZID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNhc2NhZGVcIjpcbiAgICAgICAgICB6ID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcImNvbXByZXNzXCI6XG4gICAgICAgICAgb2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwic2VtaWNvbG9uXCI6XG4gICAgICAgICAga2EgPSBkIHwgMDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwicHJlc2VydmVcIjpcbiAgICAgICAgICBYID0gZCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBcInByZWZpeFwiOlxuICAgICAgICAgIGJhID0gbnVsbCwgZCA/IFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgYmEgPSBkKSA6IHcgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEYoYiwgYykge1xuICAgIGlmICh2b2lkIDAgIT09IHRoaXMgJiYgdGhpcy5jb25zdHJ1Y3RvciA9PT0gRikgcmV0dXJuIGZhKGIpO1xuICAgIHZhciBkID0gYixcbiAgICAgICAgayA9IGQuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGsgJiYgKGsgPSAoZCA9IGQudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcbiAgICAwIDwgUSAmJiAoVCA9IGQucmVwbGFjZShHYSwgOTEgPT09IGsgPyBcIlwiIDogXCItXCIpKTtcbiAgICBrID0gMTtcbiAgICAxID09PSB6ID8gUiA9IGQgOiBLID0gZDtcbiAgICBkID0gW1JdO1xuXG4gICAgaWYgKDAgPCBFKSB7XG4gICAgICB2YXIgbCA9IE8oLTEsIGMsIGQsIGQsIEksIHksIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBsICYmIFwic3RyaW5nXCIgPT09IHR5cGVvZiBsICYmIChjID0gbCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBWKFcsIGQsIGMsIDAsIDApO1xuICAgIDAgPCBFICYmIChsID0gTygtMiwgYSwgZCwgZCwgSSwgeSwgYS5sZW5ndGgsIDAsIDApLCB2b2lkIDAgIT09IGwgJiYgXCJzdHJpbmdcIiAhPT0gdHlwZW9mIChhID0gbCkgJiYgKGsgPSAwKSk7XG4gICAgSyA9IFIgPSBUID0gXCJcIjtcbiAgICBKID0gMDtcbiAgICB5ID0gSSA9IDE7XG4gICAgcmV0dXJuIDAgPT09IG9hICogayA/IGEgOiBhLnJlcGxhY2UoUCwgXCJcIikucmVwbGFjZShIYSwgXCJcIikucmVwbGFjZShJYSwgXCIkMVwiKS5yZXBsYWNlKEphLCBcIiQxXCIpLnJlcGxhY2UoS2EsIFwiIFwiKTtcbiAgfVxuXG4gIHZhciBxYSA9IC9eXFwwKy9nLFxuICAgICAgUCA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgbmEgPSAvOiAqL2csXG4gICAgICBCYSA9IC96b298Z3JhLyxcbiAgICAgIERhID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgemEgPSAvLCtcXHMqKD8hW14oXSpbKV0pL2csXG4gICAgICBBYSA9IC8gK1xccyooPyFbXihdKlspXSkvZyxcbiAgICAgIHVhID0gLyAqW1xcMF0gKi9nLFxuICAgICAgeGEgPSAvLFxccis/L2csXG4gICAgICBNID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICB5YSA9IC86Z2xvYmFsXFwoKCg/OlteXFwoXFwpXFxbXFxdXSp8XFxbLipcXF18XFwoW15cXChcXCldKlxcKSkqKVxcKS9nLFxuICAgICAgR2EgPSAvXFxXKy9nLFxuICAgICAgdGEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBaID0gLzo6KHBsYWNlKS9nLFxuICAgICAgd2EgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBIYSA9IC9cXHMrKD89W3tcXF07PTo+XSkvZyxcbiAgICAgIElhID0gLyhbW309Oj5dKVxccysvZyxcbiAgICAgIEphID0gLyhcXHtbXntdKz8pOyg/PVxcfSkvZyxcbiAgICAgIEthID0gL1xcc3syLH0vZyxcbiAgICAgIHZhID0gLyhbXlxcKF0pKDorKSAqL2csXG4gICAgICBhYSA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIHJhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgRmEgPSAvKFteXSo/KTsvZyxcbiAgICAgIENhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBFYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIHkgPSAxLFxuICAgICAgSSA9IDEsXG4gICAgICBKID0gMCxcbiAgICAgIHogPSAxLFxuICAgICAgdyA9IDEsXG4gICAgICBZID0gMSxcbiAgICAgIG9hID0gMCxcbiAgICAgIGthID0gMCxcbiAgICAgIFggPSAwLFxuICAgICAgVyA9IFtdLFxuICAgICAgY2EgPSBbXSxcbiAgICAgIEUgPSAwLFxuICAgICAgYmEgPSBudWxsLFxuICAgICAgbGEgPSAwLFxuICAgICAgUSA9IDEsXG4gICAgICBUID0gXCJcIixcbiAgICAgIEsgPSBcIlwiLFxuICAgICAgUiA9IFwiXCI7XG4gIEYudXNlID0gZGE7XG4gIEYuc2V0ID0gZWE7XG4gIHZvaWQgMCAhPT0gaGEgJiYgZWEoaGEpO1xuICByZXR1cm4gRjtcbn07XG5cbi8vICB3ZWFrXG5mdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxudmFyIFNUWUxFU19LRVkgPSAnX19lbW90aW9uX3N0eWxlcyc7XG52YXIgVEFSR0VUX0tFWSA9ICdfX2Vtb3Rpb25fdGFyZ2V0JztcbnZhciB1bml0bGVzcyA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IDEsXG4gIGJvcmRlckltYWdlT3V0c2V0OiAxLFxuICBib3JkZXJJbWFnZVNsaWNlOiAxLFxuICBib3JkZXJJbWFnZVdpZHRoOiAxLFxuICBib3hGbGV4OiAxLFxuICBib3hGbGV4R3JvdXA6IDEsXG4gIGJveE9yZGluYWxHcm91cDogMSxcbiAgY29sdW1uQ291bnQ6IDEsXG4gIGNvbHVtbnM6IDEsXG4gIGZsZXg6IDEsXG4gIGZsZXhHcm93OiAxLFxuICBmbGV4UG9zaXRpdmU6IDEsXG4gIGZsZXhTaHJpbms6IDEsXG4gIGZsZXhOZWdhdGl2ZTogMSxcbiAgZmxleE9yZGVyOiAxLFxuICBncmlkUm93OiAxLFxuICBncmlkUm93RW5kOiAxLFxuICBncmlkUm93U3BhbjogMSxcbiAgZ3JpZFJvd1N0YXJ0OiAxLFxuICBncmlkQ29sdW1uOiAxLFxuICBncmlkQ29sdW1uRW5kOiAxLFxuICBncmlkQ29sdW1uU3BhbjogMSxcbiAgZ3JpZENvbHVtblN0YXJ0OiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lQ2xhbXA6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IHsgbWVtb2l6ZSwgU1RZTEVTX0tFWSwgVEFSR0VUX0tFWSwgdW5pdGxlc3MsIGhhc2hTdHJpbmcsIHBhIGFzIFN0eWxpcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgeyBTVFlMRVNfS0VZLCBTdHlsaXMsIFRBUkdFVF9LRVksIGhhc2hTdHJpbmcsIG1lbW9pemUsIHVuaXRsZXNzIH0gZnJvbSAnZW1vdGlvbi11dGlscyc7XG5pbXBvcnQgc3R5bGlzUnVsZVNoZWV0IGZyb20gJ3N0eWxpcy1ydWxlLXNoZWV0JztcblxuLypcblxuaGlnaCBwZXJmb3JtYW5jZSBTdHlsZVNoZWV0IGZvciBjc3MtaW4tanMgc3lzdGVtc1xuXG4tIHVzZXMgbXVsdGlwbGUgc3R5bGUgdGFncyBiZWhpbmQgdGhlIHNjZW5lcyBmb3IgbWlsbGlvbnMgb2YgcnVsZXNcbi0gdXNlcyBgaW5zZXJ0UnVsZWAgZm9yIGFwcGVuZGluZyBpbiBwcm9kdWN0aW9uIGZvciAqbXVjaCogZmFzdGVyIHBlcmZvcm1hbmNlXG4tICdwb2x5ZmlsbHMnIG9uIHNlcnZlciBzaWRlXG5cbi8vIHVzYWdlXG5cbmltcG9ydCBTdHlsZVNoZWV0IGZyb20gJ2dsYW1vci9saWIvc2hlZXQnXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KClcblxuc3R5bGVTaGVldC5pbmplY3QoKVxuLSAnaW5qZWN0cycgdGhlIHN0eWxlc2hlZXQgaW50byB0aGUgcGFnZSAob3IgaW50byBtZW1vcnkgaWYgb24gc2VydmVyKVxuXG5zdHlsZVNoZWV0Lmluc2VydCgnI2JveCB7IGJvcmRlcjogMXB4IHNvbGlkIHJlZDsgfScpXG4tIGFwcGVuZHMgYSBjc3MgcnVsZSBpbnRvIHRoZSBzdHlsZXNoZWV0XG5cbnN0eWxlU2hlZXQuZmx1c2goKVxuLSBlbXB0aWVzIHRoZSBzdHlsZXNoZWV0IG9mIGFsbCBpdHMgY29udGVudHNcblxuKi9cbmZ1bmN0aW9uIHNoZWV0Rm9yVGFnKHRhZykge1xuICBpZiAodGFnLnNoZWV0KSB7XG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldLm93bmVyTm9kZSA9PT0gdGFnKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuc3R5bGVTaGVldHNbaV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VTdHlsZVRhZygpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy50eXBlID0gJ3RleHQvY3NzJztcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgJycpO1xuICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpKTtcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0YWcpO1xuICByZXR1cm4gdGFnO1xufVxuXG52YXIgU3R5bGVTaGVldCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQoKSB7XG4gICAgdGhpcy5pc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgICB0aGlzLmlzU3BlZWR5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJzsgLy8gdGhlIGJpZyBkcmF3YmFjayBoZXJlIGlzIHRoYXQgdGhlIGNzcyB3b24ndCBiZSBlZGl0YWJsZSBpbiBkZXZ0b29sc1xuXG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5pbmplY3QgPSBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgaWYgKHRoaXMuaW5qZWN0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWxyZWFkeSBpbmplY3RlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0Jyb3dzZXIpIHtcbiAgICAgIHRoaXMudGFnc1swXSA9IG1ha2VTdHlsZVRhZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzZXJ2ZXIgc2lkZSAncG9seWZpbGwnLiBqdXN0IGVub3VnaCBiZWhhdmlvciB0byBiZSB1c2VmdWwuXG4gICAgICB0aGlzLnNoZWV0ID0gW107XG4gICAgfVxuXG4gICAgdGhpcy5pbmplY3RlZCA9IHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLnNwZWVkeSA9IGZ1bmN0aW9uIHNwZWVkeShib29sKSB7XG4gICAgaWYgKHRoaXMuY3RyICE9PSAwKSB7XG4gICAgICAvLyBjYW5ub3QgY2hhbmdlIHNwZWVkeSBtb2RlIGFmdGVyIGluc2VydGluZyBhbnkgcnVsZSB0byBzaGVldC4gRWl0aGVyIGNhbGwgc3BlZWR5KCR7Ym9vbH0pIGVhcmxpZXIgaW4geW91ciBhcHAsIG9yIGNhbGwgZmx1c2goKSBiZWZvcmUgc3BlZWR5KCR7Ym9vbH0pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgY2hhbmdlIHNwZWVkeSBub3dcIik7XG4gICAgfVxuXG4gICAgdGhpcy5pc1NwZWVkeSA9ICEhYm9vbDtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUsIHNvdXJjZU1hcCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgLy8gdGhpcyBpcyB0aGUgdWx0cmFmYXN0IHZlcnNpb24sIHdvcmtzIGFjcm9zcyBicm93c2Vyc1xuICAgICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgICAgdmFyIHRhZyA9IHRoaXMudGFnc1t0aGlzLnRhZ3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBzaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbGxlZ2FsIHJ1bGUnLCBydWxlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3RhZyA9IG1ha2VTdHlsZVRhZygpO1xuXG4gICAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuXG4gICAgICAgIF90YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSArIChzb3VyY2VNYXAgfHwgJycpKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3RyKys7XG5cbiAgICAgIGlmICh0aGlzLmN0ciAlIDY1MDAwID09PSAwKSB7XG4gICAgICAgIHRoaXMudGFncy5wdXNoKG1ha2VTdHlsZVRhZygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW5vdWdoICdzcGVjIGNvbXBsaWFuY2UnIHRvIGJlIGFibGUgdG8gZXh0cmFjdCB0aGUgcnVsZXMgbGF0ZXJcbiAgICAgIC8vIGluIG90aGVyIHdvcmRzLCBqdXN0IHRoZSBydWxlXG4gICAgICB0aGlzLnNoZWV0LnB1c2gocnVsZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmICh0aGlzLmlzQnJvd3Nlcikge1xuICAgICAgdGhpcy50YWdzLmZvckVhY2goZnVuY3Rpb24gKHRhZykge1xuICAgICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy50YWdzID0gW107XG4gICAgICB0aGlzLmN0ciA9IDA7IC8vIHRvZG8gLSBsb29rIGZvciByZW1uYW50cyBpbiBkb2N1bWVudC5zdHlsZVNoZWV0c1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBzaW1wbGVyIG9uIHNlcnZlclxuICAgICAgdGhpcy5zaGVldCA9IFtdO1xuICAgIH1cblxuICAgIHRoaXMuaW5qZWN0ZWQgPSBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoKTsgLy8g8J+agFxuXG5zaGVldC5pbmplY3QoKTtcbnZhciBzdHlsaXNPcHRpb25zID0ge1xuICBrZXlmcmFtZTogZmFsc2Vcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0eWxpc09wdGlvbnMuY29tcHJlc3MgPSBmYWxzZTtcbn1cblxudmFyIHN0eWxpcyA9IG5ldyBTdHlsaXMoc3R5bGlzT3B0aW9ucyk7XG52YXIgZXh0ZXJuYWxTdHlsaXNQbHVnaW5zID0gW107XG52YXIgdXNlID0gc3R5bGlzLnVzZTtcblxuZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gIHNoZWV0Lmluc2VydChydWxlLCBjdXJyZW50U291cmNlTWFwKTtcbn1cblxudmFyIGluc2VydGlvblBsdWdpbiA9IHN0eWxpc1J1bGVTaGVldChpbnNlcnRSdWxlKTtcbnZhciB1c2VTdHlsaXNQbHVnaW4gPSBmdW5jdGlvbiB1c2VTdHlsaXNQbHVnaW4ocGx1Z2luKSB7XG4gIGV4dGVybmFsU3R5bGlzUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gIHVzZShudWxsKShleHRlcm5hbFN0eWxpc1BsdWdpbnMpKGluc2VydGlvblBsdWdpbik7XG59O1xudmFyIHJlZ2lzdGVyZWQgPSB7fTtcbnZhciBpbnNlcnRlZCA9IHt9O1xudmFyIGN1cnJlbnRTb3VyY2VNYXAgPSAnJztcbnN0eWxpcy51c2UoaW5zZXJ0aW9uUGx1Z2luKTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihpbnRlcnBvbGF0aW9uLCBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uKSB7XG4gIGlmIChpbnRlcnBvbGF0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiBpbnRlcnBvbGF0aW9uKSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gJyc7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICBpZiAoaW50ZXJwb2xhdGlvbltTVFlMRVNfS0VZXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGludGVycG9sYXRpb25bVEFSR0VUX0tFWV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IHNlbGVjdG9ycyBjYW4gb25seSBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYmFiZWwtcGx1Z2luLWVtb3Rpb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gXCIuXCIgKyBpbnRlcnBvbGF0aW9uW1RBUkdFVF9LRVldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIHRoaXMgPT09IHVuZGVmaW5lZCA/IGludGVycG9sYXRpb24oKSA6IGludGVycG9sYXRpb24odGhpcy5tZXJnZWRQcm9wcywgdGhpcy5jb250ZXh0KSwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbik7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0Zyb21PYmplY3QuY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgICAgIHJldHVybiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID09PSBmYWxzZSAmJiBjYWNoZWQgIT09IHVuZGVmaW5lZCA/IGNhY2hlZCA6IGludGVycG9sYXRpb247XG4gIH1cbn1cblxudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gJyc7XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYga2V5LmNoYXJDb2RlQXQoMSkgIT09IDQ1ICYmIC8vIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICFpc05hTih2YWx1ZSkgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIG9iamVjdFRvU3RyaW5nQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuXG5mdW5jdGlvbiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG9iaikge1xuICBpZiAob2JqZWN0VG9TdHJpbmdDYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZ0NhY2hlLmdldChvYmopO1xuICB9XG5cbiAgdmFyIHN0cmluZyA9ICcnO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICBvYmouZm9yRWFjaChmdW5jdGlvbiAoaW50ZXJwb2xhdGlvbikge1xuICAgICAgc3RyaW5nICs9IGhhbmRsZUludGVycG9sYXRpb24uY2FsbCh0aGlzLCBpbnRlcnBvbGF0aW9uLCBmYWxzZSk7XG4gICAgfSwgdGhpcyk7XG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkW29ialtrZXldXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IGtleSArIFwie1wiICsgcmVnaXN0ZXJlZFtvYmpba2V5XV0gKyBcIn1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShrZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIG9ialtrZXldKSArIFwiO1wiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcgKz0ga2V5ICsgXCJ7XCIgKyBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgb2JqW2tleV0sIGZhbHNlKSArIFwifVwiO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9XG5cbiAgb2JqZWN0VG9TdHJpbmdDYWNoZS5zZXQob2JqLCBzdHJpbmcpO1xuICByZXR1cm4gc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBpc0xhc3RDaGFyRG90KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLmNoYXJDb2RlQXQoc3RyaW5nLmxlbmd0aCAtIDEpID09PSA0NjsgLy8gLlxufVxuXG52YXIgaGFzaDtcbnZhciBuYW1lO1xudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbl0rKVxccypbO1xcbl0vZztcblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVzKHN0cmluZ3MpIHtcbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgPSBoYW5kbGVJbnRlcnBvbGF0aW9uLmNhbGwodGhpcywgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlcyA9IHN0cmluZ3NbMF07XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgaW50ZXJwb2xhdGlvbnMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGludGVycG9sYXRpb25zW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGludGVycG9sYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGludGVycG9sYXRpb24sIGkpIHtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbi5jYWxsKHRoaXMsIGludGVycG9sYXRpb24sIGlzTGFzdENoYXJEb3Qoc3R5bGVzKSk7XG5cbiAgICBpZiAoc3RyaW5nTW9kZSA9PT0gdHJ1ZSAmJiBzdHJpbmdzW2kgKyAxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdHlsZXMgKz0gc3RyaW5nc1tpICsgMV07XG4gICAgfVxuICB9LCB0aGlzKTtcbiAgc3R5bGVzID0gc3R5bGVzLnJlcGxhY2UobGFiZWxQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gsIHAxKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gXCItXCIgKyBwMTtcbiAgICByZXR1cm4gJyc7XG4gIH0pO1xuICBoYXNoID0gaGFzaFN0cmluZyhzdHlsZXMgKyBpZGVudGlmaWVyTmFtZSk7XG4gIG5hbWUgPSBoYXNoICsgaWRlbnRpZmllck5hbWU7XG4gIHJldHVybiBzdHlsZXM7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBzb3VyY2VNYXBSZWdFeCA9IC9cXC9cXCojXFxzc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtcXFMrXFxzK1xcKlxcLy87XG4gIHZhciBvbGRTdHlsaXMgPSBzdHlsaXM7XG5cbiAgc3R5bGlzID0gZnVuY3Rpb24gc3R5bGlzKHNlbGVjdG9yLCBzdHlsZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gc291cmNlTWFwUmVnRXguZXhlYyhzdHlsZXMpO1xuICAgIGN1cnJlbnRTb3VyY2VNYXAgPSByZXN1bHQgPyByZXN1bHRbMF0gOiAnJztcbiAgICBvbGRTdHlsaXMoc2VsZWN0b3IsIHN0eWxlcyk7XG4gICAgY3VycmVudFNvdXJjZU1hcCA9ICcnO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjc3MoKSB7XG4gIHZhciBzdHlsZXMgPSBjcmVhdGVTdHlsZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgdmFyIHNlbGVjdG9yID0gXCJjc3MtXCIgKyBuYW1lO1xuXG4gIGlmIChyZWdpc3RlcmVkW3NlbGVjdG9yXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmVnaXN0ZXJlZFtzZWxlY3Rvcl0gPSBzdHlsZXM7XG4gIH1cblxuICBpZiAoaW5zZXJ0ZWRbaGFzaF0gPT09IHVuZGVmaW5lZCkge1xuICAgIHN0eWxpcyhcIi5cIiArIHNlbGVjdG9yLCBzdHlsZXMpO1xuICAgIGluc2VydGVkW2hhc2hdID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn1cbmZ1bmN0aW9uIGtleWZyYW1lcygpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB2YXIgYW5pbWF0aW9uID0gXCJhbmltYXRpb24tXCIgKyBuYW1lO1xuXG4gIGlmIChpbnNlcnRlZFtoYXNoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGlzKCcnLCBcIkBrZXlmcmFtZXMgXCIgKyBhbmltYXRpb24gKyBcIntcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gYW5pbWF0aW9uO1xufVxuZnVuY3Rpb24gaW5qZWN0R2xvYmFsKCkge1xuICB2YXIgc3R5bGVzID0gY3JlYXRlU3R5bGVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIHN0eWxlcyk7XG4gICAgaW5zZXJ0ZWRbaGFzaF0gPSB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBmb250RmFjZSgpIHtcbiAgdmFyIHN0eWxlcyA9IGNyZWF0ZVN0eWxlcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgaWYgKGluc2VydGVkW2hhc2hdID09PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXMoJycsIFwiQGZvbnQtZmFjZXtcIiArIHN0eWxlcyArIFwifVwiKTtcbiAgICBpbnNlcnRlZFtoYXNoXSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChjbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbmZ1bmN0aW9uIG1lcmdlKGNsYXNzTmFtZSwgc291cmNlTWFwKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMsIHNvdXJjZU1hcCk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzbmFtZXMoKSB7XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciBuZXh0ID0gY2xzICYmIGNscyArICcgJyB8fCBjbHM7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBjbHMgPSBuZXh0ICsgY2xhc3NuYW1lcyhhcmcoKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgY2xzID0gbmV4dCArIGNsYXNzbmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBhcmcpIHtcbiAgICAgICAgICAgICAgaWYgKGFyZ1trXSkge1xuICAgICAgICAgICAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICAgICAgICAgICAgY2xzICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgY2xzID0gbmV4dCArIGFyZztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59XG5cbmZ1bmN0aW9uIGN4KCkge1xuICByZXR1cm4gbWVyZ2UoY2xhc3NuYW1lcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xufVxuZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgaWRzLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgc2hlZXQuZmx1c2goKTtcbiAgaW5zZXJ0ZWQgPSB7fTtcbiAgcmVnaXN0ZXJlZCA9IHt9O1xuICBzaGVldC5pbmplY3QoKTtcbn1cblxuZXhwb3J0IHsgc2hlZXQsIHVzZVN0eWxpc1BsdWdpbiwgcmVnaXN0ZXJlZCwgaW5zZXJ0ZWQsIGNzcywga2V5ZnJhbWVzLCBpbmplY3RHbG9iYWwsIGZvbnRGYWNlLCBnZXRSZWdpc3RlcmVkU3R5bGVzLCBtZXJnZSwgY3gsIGh5ZHJhdGUsIGZsdXNoIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsIihmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyAobW9kdWxlWydleHBvcnRzJ10gPSBmYWN0b3J5KCkpIDpcblx0XHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZVsnYW1kJ10gPyBkZWZpbmUoZmFjdG9yeSgpKSA6XG5cdFx0XHQod2luZG93WydzdHlsaXNSdWxlU2hlZXQnXSA9IGZhY3RvcnkoKSlcbn0oZnVuY3Rpb24gKCkge1xuXG5cdCd1c2Ugc3RyaWN0J1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5zZXJ0UnVsZSkge1xuXHRcdHZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nXG5cdFx0dmFyIG5lZWRsZSA9IGRlbGltaXRlcisnfSdcblxuXHRcdGZ1bmN0aW9uIHRvU2hlZXQgKGJsb2NrKSB7XG5cdFx0XHRpZiAoYmxvY2spXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aW5zZXJ0UnVsZShibG9jayArICd9Jylcblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHR9XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gcnVsZVNoZWV0IChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBhdCwgZGVwdGgpIHtcblx0XHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0XHQvLyBwcm9wZXJ0eVxuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gQGltcG9ydFxuXHRcdFx0XHRcdGlmIChkZXB0aCA9PT0gMCAmJiBjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDY0KVxuXHRcdFx0XHRcdFx0aW5zZXJ0UnVsZShjb250ZW50KVxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIHNlbGVjdG9yXG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRpZiAoYXQgPT09IDApXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdC8vIGF0LXJ1bGVcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdHN3aXRjaCAoYXQpIHtcblx0XHRcdFx0XHRcdC8vIEBmb250LWZhY2UsIEBwYWdlXG5cdFx0XHRcdFx0XHRjYXNlIDEwMjpcblx0XHRcdFx0XHRcdGNhc2UgMTEyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5zZXJ0UnVsZShzZWxlY3RvcnNbMF0rY29udGVudCksICcnXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY29udGVudCArIGRlbGltaXRlclxuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAtMjpcblx0XHRcdFx0XHRjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSkpXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG4vKipcbiAqIFNpbXBsZSwgbGlnaHR3ZWlnaHQgbW9kdWxlIGFzc2lzdGluZyB3aXRoIHRoZSBkZXRlY3Rpb24gYW5kIGNvbnRleHQgb2ZcbiAqIFdvcmtlci4gSGVscHMgYXZvaWQgY2lyY3VsYXIgZGVwZW5kZW5jaWVzIGFuZCBhbGxvd3MgY29kZSB0byByZWFzb24gYWJvdXRcbiAqIHdoZXRoZXIgb3Igbm90IHRoZXkgYXJlIGluIGEgV29ya2VyLCBldmVuIGlmIHRoZXkgbmV2ZXIgaW5jbHVkZSB0aGUgbWFpblxuICogYFJlYWN0V29ya2VyYCBkZXBlbmRlbmN5LlxuICovXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG5cbiAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG5cbiAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG5cbiAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuXG4gIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuXG4gIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET00gLy8gRm9yIG5vdywgdGhpcyBpcyB0cnVlIC0gbWlnaHQgY2hhbmdlIGluIHRoZSBmdXR1cmUuXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZShvYmplY3QpIHtcbiAgdmFyIGRvYyA9IG9iamVjdCA/IG9iamVjdC5vd25lckRvY3VtZW50IHx8IG9iamVjdCA6IGRvY3VtZW50O1xuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICByZXR1cm4gISEob2JqZWN0ICYmICh0eXBlb2YgZGVmYXVsdFZpZXcuTm9kZSA9PT0gJ2Z1bmN0aW9uJyA/IG9iamVjdCBpbnN0YW5jZW9mIGRlZmF1bHRWaWV3Lk5vZGUgOiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVUeXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2Ygb2JqZWN0Lm5vZGVOYW1lID09PSAnc3RyaW5nJykpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTm9kZTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqIFxuICovXG5cbi8qZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gIGlmICh4ID09PSB5KSB7XG4gICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAvLyBBZGRlZCB0aGUgbm9uemVybyB5IGNoZWNrIHRvIG1ha2UgRmxvdyBoYXBweSwgYnV0IGl0IGlzIHJlZHVuZGFudFxuICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hhbGxvd0VxdWFsOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBhZGRMZWFkaW5nU2xhc2ggPSBleHBvcnRzLmFkZExlYWRpbmdTbGFzaCA9IGZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59O1xuXG52YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn07XG5cbnZhciBoYXNCYXNlbmFtZSA9IGV4cG9ydHMuaGFzQmFzZW5hbWUgPSBmdW5jdGlvbiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcHJlZml4ICsgJyhcXFxcL3xcXFxcP3wjfCQpJywgJ2knKS50ZXN0KHBhdGgpO1xufTtcblxudmFyIHN0cmlwQmFzZW5hbWUgPSBleHBvcnRzLnN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbnZhciBzdHJpcFRyYWlsaW5nU2xhc2ggPSBleHBvcnRzLnN0cmlwVHJhaWxpbmdTbGFzaCA9IGZ1bmN0aW9uIHN0cmlwVHJhaWxpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdChwYXRoLmxlbmd0aCAtIDEpID09PSAnLycgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG59O1xuXG52YXIgcGFyc2VQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGF0aG5hbWUgPSBwYXRoIHx8ICcvJztcbiAgdmFyIHNlYXJjaCA9ICcnO1xuICB2YXIgaGFzaCA9ICcnO1xuXG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gcGF0aDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghYmFzZW5hbWUgfHwgKDAsIF9QYXRoVXRpbHMuaGFzQmFzZW5hbWUpKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSAoMCwgX1BhdGhVdGlscy5zdHJpcEJhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IF9QYXRoVXRpbHMuY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICB2YXIgbG9jYXRpb24gPSBoaXN0b3J5LmVudHJpZXNbbmV4dEluZGV4XTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBjYW5HbyA9IGZ1bmN0aW9uIGNhbkdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gaGlzdG9yeS5pbmRleCArIG47XG4gICAgcmV0dXJuIG5leHRJbmRleCA+PSAwICYmIG5leHRJbmRleCA8IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gIH07XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIHZhciBzZXRQcm9tcHQgPSBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpO1xuXG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvbXB0ID09PSBuZXh0UHJvbXB0KSBwcm9tcHQgPSBudWxsO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGNvbmZpcm1UcmFuc2l0aW9uVG8gPSBmdW5jdGlvbiBjb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGNhbGxiYWNrKSB7XG4gICAgLy8gVE9ETzogSWYgYW5vdGhlciB0cmFuc2l0aW9uIHN0YXJ0cyB3aGlsZSB3ZSdyZSBzdGlsbCBjb25maXJtaW5nXG4gICAgLy8gdGhlIHByZXZpb3VzIG9uZSwgd2UgbWF5IGVuZCB1cCBpbiBhIHdlaXJkIHN0YXRlLiBGaWd1cmUgb3V0IHRoZVxuICAgIC8vIGJlc3Qgd2F5IHRvIGhhbmRsZSB0aGlzLlxuICAgIGlmIChwcm9tcHQgIT0gbnVsbCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHR5cGVvZiBwcm9tcHQgPT09ICdmdW5jdGlvbicgPyBwcm9tcHQobG9jYXRpb24sIGFjdGlvbikgOiBwcm9tcHQ7XG5cbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGdldFVzZXJDb25maXJtYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBnZXRVc2VyQ29uZmlybWF0aW9uKHJlc3VsdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoZmFsc2UsICdBIGhpc3RvcnkgbmVlZHMgYSBnZXRVc2VyQ29uZmlybWF0aW9uIGZ1bmN0aW9uIGluIG9yZGVyIHRvIHVzZSBhIHByb21wdCBtZXNzYWdlJyk7XG5cbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICB2YXIgYXBwZW5kTGlzdGVuZXIgPSBmdW5jdGlvbiBhcHBlbmRMaXN0ZW5lcihmbikge1xuICAgIHZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbiAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgIGlmIChpc0FjdGl2ZSkgZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaXNBY3RpdmUgPSBmYWxzZTtcbiAgICAgIGxpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0gIT09IGxpc3RlbmVyO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXI7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9ICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmXG4gICAgU3ltYm9sLmZvciAmJlxuICAgIFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSkgfHxcbiAgICAweGVhYzc7XG5cbiAgdmFyIGlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmXG4gICAgICBvYmplY3QgIT09IG51bGwgJiZcbiAgICAgIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjFcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBiYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwiZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnRcIiksQT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxDPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLGVhPXJlcXVpcmUoXCJmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50XCIpLGZhPXJlcXVpcmUoXCJmYmpzL2xpYi9zaGFsbG93RXF1YWxcIiksaGE9cmVxdWlyZShcImZianMvbGliL2NvbnRhaW5zTm9kZVwiKSxqYT1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlPYmplY3RcIik7XG5mdW5jdGlvbiBEKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsYz1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxkPTA7ZDxiO2QrKyljKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2QrMV0pO2I9RXJyb3IoYytcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9YmE/dm9pZCAwOkQoXCIyMjdcIik7XG5mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixoLGcsayl7dGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITE7dGhpcy5fY2F1Z2h0RXJyb3I9bnVsbDt2YXIgdj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyx2KX1jYXRjaChsKXt0aGlzLl9jYXVnaHRFcnJvcj1sLHRoaXMuX2hhc0NhdWdodEVycm9yPSEwfX1cbnZhciBFPXtfY2F1Z2h0RXJyb3I6bnVsbCxfaGFzQ2F1Z2h0RXJyb3I6ITEsX3JldGhyb3dFcnJvcjpudWxsLF9oYXNSZXRocm93RXJyb3I6ITEsaW52b2tlR3VhcmRlZENhbGxiYWNrOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtrYS5hcHBseShFLGFyZ3VtZW50cyl9LGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjpmdW5jdGlvbihhLGIsYyxkLGUsZixoLGcsayl7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2suYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKEUuaGFzQ2F1Z2h0RXJyb3IoKSl7dmFyIHY9RS5jbGVhckNhdWdodEVycm9yKCk7RS5faGFzUmV0aHJvd0Vycm9yfHwoRS5faGFzUmV0aHJvd0Vycm9yPSEwLEUuX3JldGhyb3dFcnJvcj12KX19LHJldGhyb3dDYXVnaHRFcnJvcjpmdW5jdGlvbigpe3JldHVybiBtYS5hcHBseShFLGFyZ3VtZW50cyl9LGhhc0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIEUuX2hhc0NhdWdodEVycm9yfSxjbGVhckNhdWdodEVycm9yOmZ1bmN0aW9uKCl7aWYoRS5faGFzQ2F1Z2h0RXJyb3Ipe3ZhciBhPVxuRS5fY2F1Z2h0RXJyb3I7RS5fY2F1Z2h0RXJyb3I9bnVsbDtFLl9oYXNDYXVnaHRFcnJvcj0hMTtyZXR1cm4gYX1EKFwiMTk4XCIpfX07ZnVuY3Rpb24gbWEoKXtpZihFLl9oYXNSZXRocm93RXJyb3Ipe3ZhciBhPUUuX3JldGhyb3dFcnJvcjtFLl9yZXRocm93RXJyb3I9bnVsbDtFLl9oYXNSZXRocm93RXJyb3I9ITE7dGhyb3cgYTt9fXZhciBuYT1udWxsLG9hPXt9O1xuZnVuY3Rpb24gcGEoKXtpZihuYSlmb3IodmFyIGEgaW4gb2Epe3ZhciBiPW9hW2FdLGM9bmEuaW5kZXhPZihhKTstMTxjP3ZvaWQgMDpEKFwiOTZcIixhKTtpZighcWFbY10pe2IuZXh0cmFjdEV2ZW50cz92b2lkIDA6RChcIjk3XCIsYSk7cWFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0saD1iLGc9ZDtyYS5oYXNPd25Qcm9wZXJ0eShnKT9EKFwiOTlcIixnKTp2b2lkIDA7cmFbZ109Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmc2Eoa1tlXSxoLGcpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHNhKGYucmVnaXN0cmF0aW9uTmFtZSxoLGcpLGU9ITApOmU9ITE7ZT92b2lkIDA6RChcIjk4XCIsZCxhKX19fX1cbmZ1bmN0aW9uIHNhKGEsYixjKXt0YVthXT9EKFwiMTAwXCIsYSk6dm9pZCAwO3RhW2FdPWI7dWFbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgcWE9W10scmE9e30sdGE9e30sdWE9e307ZnVuY3Rpb24gdmEoYSl7bmE/RChcIjEwMVwiKTp2b2lkIDA7bmE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSk7cGEoKX1mdW5jdGlvbiB3YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtvYS5oYXNPd25Qcm9wZXJ0eShjKSYmb2FbY109PT1kfHwob2FbY10/RChcIjEwMlwiLGMpOnZvaWQgMCxvYVtjXT1kLGI9ITApfWImJnBhKCl9XG52YXIgeGE9T2JqZWN0LmZyZWV6ZSh7cGx1Z2luczpxYSxldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6cmEscmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6dGEscmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczp1YSxwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOm51bGwsaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjp2YSxpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6d2F9KSxDYT1udWxsLERhPW51bGwsRWE9bnVsbDtmdW5jdGlvbiBGYShhLGIsYyxkKXtiPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PUVhKGQpO0UuaW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yKGIsYyx2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBHYShhLGIpe251bGw9PWI/RChcIjMwXCIpOnZvaWQgMDtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gSGEoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIElhPW51bGw7XG5mdW5jdGlvbiBKYShhLGIpe2lmKGEpe3ZhciBjPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGQ9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShjKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2UrKylGYShhLGIsY1tlXSxkW2VdKTtlbHNlIGMmJkZhKGEsYixjLGQpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIEthKGEpe3JldHVybiBKYShhLCEwKX1mdW5jdGlvbiBMYShhKXtyZXR1cm4gSmEoYSwhMSl9dmFyIE1hPXtpbmplY3RFdmVudFBsdWdpbk9yZGVyOnZhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp3YX07XG5mdW5jdGlvbiBOYShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPUNhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2MmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIyMzFcIixiLHR5cGVvZiBjKTp2b2lkIDA7XG5yZXR1cm4gY31mdW5jdGlvbiBPYShhLGIpe251bGwhPT1hJiYoSWE9R2EoSWEsYSkpO2E9SWE7SWE9bnVsbDthJiYoYj9IYShhLEthKTpIYShhLExhKSxJYT9EKFwiOTVcIik6dm9pZCAwLEUucmV0aHJvd0NhdWdodEVycm9yKCkpfWZ1bmN0aW9uIFBhKGEsYixjLGQpe2Zvcih2YXIgZT1udWxsLGY9MDtmPHFhLmxlbmd0aDtmKyspe3ZhciBoPXFhW2ZdO2gmJihoPWguZXh0cmFjdEV2ZW50cyhhLGIsYyxkKSkmJihlPUdhKGUsaCkpfU9hKGUsITEpfXZhciBRYT1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246TWEsZ2V0TGlzdGVuZXI6TmEscnVuRXZlbnRzSW5CYXRjaDpPYSxydW5FeHRyYWN0ZWRFdmVudHNJbkJhdGNoOlBhfSksUmE9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksRj1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK1JhLFNhPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrUmE7XG5mdW5jdGlvbiBUYShhKXtpZihhW0ZdKXJldHVybiBhW0ZdO2Zvcig7IWFbRl07KWlmKGEucGFyZW50Tm9kZSlhPWEucGFyZW50Tm9kZTtlbHNlIHJldHVybiBudWxsO2E9YVtGXTtyZXR1cm4gNT09PWEudGFnfHw2PT09YS50YWc/YTpudWxsfWZ1bmN0aW9uIFVhKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTtEKFwiMzNcIil9ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbU2FdfHxudWxsfXZhciBYYT1PYmplY3QuZnJlZXplKHtwcmVjYWNoZUZpYmVyTm9kZTpmdW5jdGlvbihhLGIpe2JbRl09YX0sZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGU6VGEsZ2V0SW5zdGFuY2VGcm9tTm9kZTpmdW5jdGlvbihhKXthPWFbRl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnP251bGw6YX0sZ2V0Tm9kZUZyb21JbnN0YW5jZTpVYSxnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlOlZhLHVwZGF0ZUZpYmVyUHJvcHM6ZnVuY3Rpb24oYSxiKXthW1NhXT1ifX0pO1xuZnVuY3Rpb24gTChhKXtkbyBhPWFbXCJyZXR1cm5cIl07d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9ZnVuY3Rpb24gYmIoYSxiLGMpe2Zvcih2YXIgZD1bXTthOylkLnB1c2goYSksYT1MKGEpO2ZvcihhPWQubGVuZ3RoOzA8YS0tOyliKGRbYV0sXCJjYXB0dXJlZFwiLGMpO2ZvcihhPTA7YTxkLmxlbmd0aDthKyspYihkW2FdLFwiYnViYmxlZFwiLGMpfWZ1bmN0aW9uIGNiKGEsYixjKXtpZihiPU5hKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gZGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyYmYmIoYS5fdGFyZ2V0SW5zdCxjYixhKX1cbmZ1bmN0aW9uIGViKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe3ZhciBiPWEuX3RhcmdldEluc3Q7Yj1iP0woYik6bnVsbDtiYihiLGNiLGEpfX1mdW5jdGlvbiBmYihhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1OYShhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9R2EoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9R2EoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIGdiKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmZmIoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIGhiKGEpe0hhKGEsZGIpfVxuZnVuY3Rpb24gaWIoYSxiLGMsZCl7aWYoYyYmZClhOnt2YXIgZT1jO2Zvcih2YXIgZj1kLGg9MCxnPWU7ZztnPUwoZykpaCsrO2c9MDtmb3IodmFyIGs9ZjtrO2s9TChrKSlnKys7Zm9yKDswPGgtZzspZT1MKGUpLGgtLTtmb3IoOzA8Zy1oOylmPUwoZiksZy0tO2Zvcig7aC0tOyl7aWYoZT09PWZ8fGU9PT1mLmFsdGVybmF0ZSlicmVhayBhO2U9TChlKTtmPUwoZil9ZT1udWxsfWVsc2UgZT1udWxsO2Y9ZTtmb3IoZT1bXTtjJiZjIT09Zjspe2g9Yy5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2UucHVzaChjKTtjPUwoYyl9Zm9yKGM9W107ZCYmZCE9PWY7KXtoPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1oJiZoPT09ZilicmVhaztjLnB1c2goZCk7ZD1MKGQpfWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspZmIoZVtkXSxcImJ1YmJsZWRcIixhKTtmb3IoYT1jLmxlbmd0aDswPGEtLTspZmIoY1thXSxcImNhcHR1cmVkXCIsYil9XG52YXIgamI9T2JqZWN0LmZyZWV6ZSh7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczpoYixhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDpmdW5jdGlvbihhKXtIYShhLGViKX0sYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOmZ1bmN0aW9uKGEpe0hhKGEsZ2IpfX0pLGtiPW51bGw7ZnVuY3Rpb24gbGIoKXsha2ImJm0uY2FuVXNlRE9NJiYoa2I9XCJ0ZXh0Q29udGVudFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50P1widGV4dENvbnRlbnRcIjpcImlubmVyVGV4dFwiKTtyZXR1cm4ga2J9dmFyIE09e19yb290Om51bGwsX3N0YXJ0VGV4dDpudWxsLF9mYWxsYmFja1RleHQ6bnVsbH07XG5mdW5jdGlvbiBtYigpe2lmKE0uX2ZhbGxiYWNrVGV4dClyZXR1cm4gTS5fZmFsbGJhY2tUZXh0O3ZhciBhLGI9TS5fc3RhcnRUZXh0LGM9Yi5sZW5ndGgsZCxlPW5iKCksZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgaD1jLWE7Zm9yKGQ9MTtkPD1oJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtNLl9mYWxsYmFja1RleHQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKTtyZXR1cm4gTS5fZmFsbGJhY2tUZXh0fWZ1bmN0aW9uIG5iKCl7cmV0dXJuXCJ2YWx1ZVwiaW4gTS5fcm9vdD9NLl9yb290LnZhbHVlOk0uX3Jvb3RbbGIoKV19XG52YXIgb2I9XCJkaXNwYXRjaENvbmZpZyBfdGFyZ2V0SW5zdCBuYXRpdmVFdmVudCBpc0RlZmF1bHRQcmV2ZW50ZWQgaXNQcm9wYWdhdGlvblN0b3BwZWQgX2Rpc3BhdGNoTGlzdGVuZXJzIF9kaXNwYXRjaEluc3RhbmNlc1wiLnNwbGl0KFwiIFwiKSxwYj17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6Qy50aGF0UmV0dXJuc051bGwsZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP0MudGhhdFJldHVybnNUcnVlOkMudGhhdFJldHVybnNGYWxzZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNGYWxzZTtyZXR1cm4gdGhpc31cbkEoTi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1DLnRoYXRSZXR1cm5zVHJ1ZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1DLnRoYXRSZXR1cm5zVHJ1ZX0saXNQZXJzaXN0ZW50OkMudGhhdFJldHVybnNGYWxzZSxcbmRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxiO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO2ZvcihhPTA7YTxvYi5sZW5ndGg7YSsrKXRoaXNbb2JbYV1dPW51bGx9fSk7Ti5JbnRlcmZhY2U9cGI7Ti5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7QShlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9QSh7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtxYihjKTtyZXR1cm4gY307cWIoTik7XG5mdW5jdGlvbiByYihhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1mdW5jdGlvbiBzYihhKXthIGluc3RhbmNlb2YgdGhpcz92b2lkIDA6RChcIjIyM1wiKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gcWIoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9cmI7YS5yZWxlYXNlPXNifXZhciB0Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksdWI9Ti5leHRlbmQoe2RhdGE6bnVsbH0pLHZiPVs5LDEzLDI3LDMyXSx3Yj1tLmNhblVzZURPTSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3cseGI9bnVsbDttLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoeGI9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciB5Yj1tLmNhblVzZURPTSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIXhiLHpiPW0uY2FuVXNlRE9NJiYoIXdifHx4YiYmODx4YiYmMTE+PXhiKSxBYj1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxCYj17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcInRvcENvbXBvc2l0aW9uRW5kXCIsXCJ0b3BLZXlQcmVzc1wiLFwidG9wVGV4dElucHV0XCIsXCJ0b3BQYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvbkVuZCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uU3RhcnQgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25VcGRhdGUgdG9wS2V5RG93biB0b3BLZXlQcmVzcyB0b3BLZXlVcCB0b3BNb3VzZURvd25cIi5zcGxpdChcIiBcIil9fSxLYj0hMTtcbmZ1bmN0aW9uIExiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlVcFwiOnJldHVybi0xIT09dmIuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJ0b3BLZXlEb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwidG9wS2V5UHJlc3NcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcEJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBNYihhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBOYj0hMTtmdW5jdGlvbiBPYihhLGIpe3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gTWIoYik7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO0tiPSEwO3JldHVybiBBYjtjYXNlIFwidG9wVGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1BYiYmS2I/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gUGIoYSxiKXtpZihOYilyZXR1cm5cInRvcENvbXBvc2l0aW9uRW5kXCI9PT1hfHwhd2ImJkxiKGEsYik/KGE9bWIoKSxNLl9yb290PW51bGwsTS5fc3RhcnRUZXh0PW51bGwsTS5fZmFsbGJhY2tUZXh0PW51bGwsTmI9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcFBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcInRvcENvbXBvc2l0aW9uRW5kXCI6cmV0dXJuIHpiP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIFFiPXtldmVudFR5cGVzOkJiLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dm9pZCAwO3ZhciBmPXZvaWQgMDtpZih3YiliOntzd2l0Y2goYSl7Y2FzZSBcInRvcENvbXBvc2l0aW9uU3RhcnRcIjplPUJiLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjplPUJiLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcInRvcENvbXBvc2l0aW9uVXBkYXRlXCI6ZT1CYi5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWU9dm9pZCAwfWVsc2UgTmI/TGIoYSxjKSYmKGU9QmIuY29tcG9zaXRpb25FbmQpOlwidG9wS2V5RG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZT1CYi5jb21wb3NpdGlvblN0YXJ0KTtlPyh6YiYmKE5ifHxlIT09QmIuY29tcG9zaXRpb25TdGFydD9lPT09QmIuY29tcG9zaXRpb25FbmQmJk5iJiYoZj1tYigpKTooTS5fcm9vdD1kLE0uX3N0YXJ0VGV4dD1uYigpLE5iPSEwKSksZT10Yi5nZXRQb29sZWQoZSxcbmIsYyxkKSxmP2UuZGF0YT1mOihmPU1iKGMpLG51bGwhPT1mJiYoZS5kYXRhPWYpKSxoYihlKSxmPWUpOmY9bnVsbDsoYT15Yj9PYihhLGMpOlBiKGEsYykpPyhiPXViLmdldFBvb2xlZChCYi5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsaGIoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWY/YjpudWxsPT09Yj9mOltmLGJdfX0sUmI9bnVsbCxTYj1udWxsLFRiPW51bGw7ZnVuY3Rpb24gVWIoYSl7aWYoYT1EYShhKSl7UmImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPUNhKGEuc3RhdGVOb2RlKTtSYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19dmFyIFZiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1JiPWF9fTtmdW5jdGlvbiBXYihhKXtTYj9UYj9UYi5wdXNoKGEpOlRiPVthXTpTYj1hfVxuZnVuY3Rpb24gWGIoKXtyZXR1cm4gbnVsbCE9PVNifHxudWxsIT09VGJ9ZnVuY3Rpb24gWWIoKXtpZihTYil7dmFyIGE9U2IsYj1UYjtUYj1TYj1udWxsO1ViKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylVYihiW2FdKX19dmFyIFpiPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpWYixlbnF1ZXVlU3RhdGVSZXN0b3JlOldiLG5lZWRzU3RhdGVSZXN0b3JlOlhiLHJlc3RvcmVTdGF0ZUlmTmVlZGVkOllifSk7ZnVuY3Rpb24gJGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBhYyhhLGIsYyl7cmV0dXJuIGEoYixjKX1mdW5jdGlvbiBiYygpe312YXIgY2M9ITE7ZnVuY3Rpb24gZGMoYSxiKXtpZihjYylyZXR1cm4gYShiKTtjYz0hMDt0cnl7cmV0dXJuICRiKGEsYil9ZmluYWxseXtjYz0hMSxYYigpJiYoYmMoKSxZYigpKX19XG52YXIgZWM9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gZmMoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFlY1thLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gZ2MoYSl7YT1hLnRhcmdldHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1cbmZ1bmN0aW9uIGhjKGEsYil7aWYoIW0uY2FuVXNlRE9NfHxiJiYhKFwiYWRkRXZlbnRMaXN0ZW5lclwiaW4gZG9jdW1lbnQpKXJldHVybiExO2E9XCJvblwiK2E7Yj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gaWMoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIGpjKGEpe3ZhciBiPWljKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMuZ2V0LmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtjLnNldC5jYWxsKHRoaXMsYSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KSx7Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1udWxsO2RlbGV0ZSBhW2JdfX19XG5mdW5jdGlvbiBrYyhhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9amMoYSkpfWZ1bmN0aW9uIGxjKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1pYyhhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfVxudmFyIG1jPWJhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLE89XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLG5jPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNhbGxcIik6NjAxMDQscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5yZXR1cm5cIik6NjAxMDUscWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscmM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxzYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHRjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdWM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxcbndjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIHljKGEpe2lmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14YyYmYVt4Y118fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6YyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSByYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHFjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIG9jOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBwYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBBYyhhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxOmNhc2UgMjpjYXNlIDU6dmFyIGM9YS5fZGVidWdPd25lcixkPWEuX2RlYnVnU291cmNlO3ZhciBlPXpjKGEpO3ZhciBmPW51bGw7YyYmKGY9emMoYykpO2M9ZDtlPVwiXFxuICAgIGluIFwiKyhlfHxcIlVua25vd25cIikrKGM/XCIgKGF0IFwiK2MuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLyxcIlwiKStcIjpcIitjLmxpbmVOdW1iZXIrXCIpXCI6Zj9cIiAoY3JlYXRlZCBieSBcIitmK1wiKVwiOlwiXCIpO2JyZWFrIGE7ZGVmYXVsdDplPVwiXCJ9Yis9ZTthPWFbXCJyZXR1cm5cIl19d2hpbGUoYSk7cmV0dXJuIGJ9XG52YXIgQmM9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLENjPXt9LERjPXt9O2Z1bmN0aW9uIEVjKGEpe2lmKERjLmhhc093blByb3BlcnR5KGEpKXJldHVybiEwO2lmKENjLmhhc093blByb3BlcnR5KGEpKXJldHVybiExO2lmKEJjLnRlc3QoYSkpcmV0dXJuIERjW2FdPSEwO0NjW2FdPSEwO3JldHVybiExfVxuZnVuY3Rpb24gRmMoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gR2MoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8RmMoYSxiLGMsZCkpcmV0dXJuITA7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yn12YXIgVj17fTtcImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwwLCExLGEsbnVsbCl9KTtcbltbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtWW2JdPW5ldyBVKGIsMSwhMSxhWzFdLG51bGwpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLG51bGwpfSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMywhMCxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw0LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1xuW1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSw2LCExLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7dmFyIEhjPS9bXFwtXFw6XShbYS16XSkvZztmdW5jdGlvbiBTYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxcblNjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShIYyxTYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVGMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoR2MoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0VjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gVmMoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9V2MobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBYYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlRjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBZYyhhLGIpe1hjKGEsYik7dmFyIGM9V2MoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9aYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZaYyhhLGIudHlwZSxXYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uICRjKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gWmMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gV2MoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBhZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBiZChhLGIsYyl7YT1OLmdldFBvb2xlZChhZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1diKGMpO2hiKGEpO3JldHVybiBhfXZhciBjZD1udWxsLGRkPW51bGw7ZnVuY3Rpb24gZWQoYSl7T2EoYSwhMSl9XG5mdW5jdGlvbiBmZChhKXt2YXIgYj1VYShhKTtpZihsYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBnZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBoZD0hMTttLmNhblVzZURPTSYmKGhkPWhjKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGlkKCl7Y2QmJihjZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCksZGQ9Y2Q9bnVsbCl9ZnVuY3Rpb24gamQoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmZkKGRkKSYmKGE9YmQoZGQsYSxnYyhhKSksZGMoZWQsYSkpfWZ1bmN0aW9uIGtkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhpZCgpLGNkPWIsZGQ9YyxjZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixqZCkpOlwidG9wQmx1clwiPT09YSYmaWQoKX1cbmZ1bmN0aW9uIGxkKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGZkKGRkKX1mdW5jdGlvbiBtZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGZkKGIpfWZ1bmN0aW9uIG5kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGZkKGIpfVxudmFyIG9kPXtldmVudFR5cGVzOmFkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aGQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1VhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1nZDpmYyhlKT9oZD9mPW5kOihmPWxkLGg9a2QpOihnPWUubm9kZU5hbWUsIWd8fFwiaW5wdXRcIiE9PWcudG9Mb3dlckNhc2UoKXx8XCJjaGVja2JveFwiIT09ZS50eXBlJiZcInJhZGlvXCIhPT1lLnR5cGV8fChmPW1kKSk7aWYoZiYmKGY9ZihhLGIpKSlyZXR1cm4gYmQoZixjLGQpO2gmJmgoYSxlLGIpO1widG9wQmx1clwiPT09YSYmbnVsbCE9YiYmKGE9Yi5fd3JhcHBlclN0YXRlfHxlLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJlpjKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LHBkPU4uZXh0ZW5kKHt2aWV3Om51bGwsXG5kZXRhaWw6bnVsbH0pLHFkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiByZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPXFkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gc2QoKXtyZXR1cm4gcmR9XG52YXIgdGQ9cGQuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnNkLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfX0pLHVkPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcInRvcE1vdXNlT3V0XCIsXCJ0b3BNb3VzZU92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX19LHZkPXtldmVudFR5cGVzOnVkLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxcbmIsYyxkKXtpZihcInRvcE1vdXNlT3ZlclwiPT09YSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fFwidG9wTW91c2VPdXRcIiE9PWEmJlwidG9wTW91c2VPdmVyXCIhPT1hKXJldHVybiBudWxsO3ZhciBlPWQud2luZG93PT09ZD9kOihlPWQub3duZXJEb2N1bWVudCk/ZS5kZWZhdWx0Vmlld3x8ZS5wYXJlbnRXaW5kb3c6d2luZG93O1widG9wTW91c2VPdXRcIj09PWE/KGE9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP1RhKGIpOm51bGwpOmE9bnVsbDtpZihhPT09YilyZXR1cm4gbnVsbDt2YXIgZj1udWxsPT1hP2U6VWEoYSk7ZT1udWxsPT1iP2U6VWEoYik7dmFyIGg9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlTGVhdmUsYSxjLGQpO2gudHlwZT1cIm1vdXNlbGVhdmVcIjtoLnRhcmdldD1mO2gucmVsYXRlZFRhcmdldD1lO2M9dGQuZ2V0UG9vbGVkKHVkLm1vdXNlRW50ZXIsYixjLGQpO2MudHlwZT1cIm1vdXNlZW50ZXJcIjtjLnRhcmdldD1lO2MucmVsYXRlZFRhcmdldD1cbmY7aWIoaCxjLGEsYik7cmV0dXJuW2gsY119fTtmdW5jdGlvbiB3ZChhKXt2YXIgYj1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7YltcInJldHVyblwiXTspYj1iW1wicmV0dXJuXCJdO2Vsc2V7aWYoMCE9PShiLmVmZmVjdFRhZyYyKSlyZXR1cm4gMTtmb3IoO2JbXCJyZXR1cm5cIl07KWlmKGI9YltcInJldHVyblwiXSwwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxfXJldHVybiAzPT09Yi50YWc/MjozfWZ1bmN0aW9uIHhkKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/Mj09PXdkKGEpOiExfWZ1bmN0aW9uIHlkKGEpezIhPT13ZChhKT9EKFwiMTg4XCIpOnZvaWQgMH1cbmZ1bmN0aW9uIHpkKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXJldHVybiBiPXdkKGEpLDM9PT1iP0QoXCIxODhcIik6dm9pZCAwLDE9PT1iP251bGw6YTtmb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Y1tcInJldHVyblwiXSxmPWU/ZS5hbHRlcm5hdGU6bnVsbDtpZighZXx8IWYpYnJlYWs7aWYoZS5jaGlsZD09PWYuY2hpbGQpe2Zvcih2YXIgaD1lLmNoaWxkO2g7KXtpZihoPT09YylyZXR1cm4geWQoZSksYTtpZihoPT09ZClyZXR1cm4geWQoZSksYjtoPWguc2libGluZ31EKFwiMTg4XCIpfWlmKGNbXCJyZXR1cm5cIl0hPT1kW1wicmV0dXJuXCJdKWM9ZSxkPWY7ZWxzZXtoPSExO2Zvcih2YXIgZz1lLmNoaWxkO2c7KXtpZihnPT09Yyl7aD0hMDtjPWU7ZD1mO2JyZWFrfWlmKGc9PT1kKXtoPSEwO2Q9ZTtjPWY7YnJlYWt9Zz1nLnNpYmxpbmd9aWYoIWgpe2ZvcihnPWYuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZjtkPWU7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1mO2M9ZTticmVha31nPWcuc2libGluZ31oP1xudm9pZCAwOkQoXCIxODlcIil9fWMuYWx0ZXJuYXRlIT09ZD9EKFwiMTkwXCIpOnZvaWQgMH0zIT09Yy50YWc/RChcIjE4OFwiKTp2b2lkIDA7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBBZChhKXthPXpkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gQmQoYSl7YT16ZChhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkJiY0IT09Yi50YWcpYi5jaGlsZFtcInJldHVyblwiXT1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm4gbnVsbDtiPWJbXCJyZXR1cm5cIl19Yi5zaWJsaW5nW1wicmV0dXJuXCJdPWJbXCJyZXR1cm5cIl07Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfXZhciBDZD1OLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksRGQ9Ti5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxFZD1wZC5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO1xuZnVuY3Rpb24gRmQoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgR2Q9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LEhkPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxJZD1wZC5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9R2RbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9RmQoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP0hkW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9GZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9GZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLEpkPXRkLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSxLZD1wZC5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpzZH0pLExkPU4uZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLE1kPXRkLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksTmQ9e30sT2Q9e307ZnVuY3Rpb24gUGQoYSxiKXt2YXIgYz1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxkPVwib25cIitjO2M9XCJ0b3BcIitjO2I9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmQsY2FwdHVyZWQ6ZCtcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltjXSxpc0ludGVyYWN0aXZlOmJ9O05kW2FdPWI7T2RbY109Yn1cblwiYmx1ciBjYW5jZWwgY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZG91YmxlQ2xpY2sgZHJhZ0VuZCBkcmFnU3RhcnQgZHJvcCBmb2N1cyBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbW91c2VEb3duIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSByYXRlQ2hhbmdlIHJlc2V0IHNlZWtlZCBzdWJtaXQgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtQZChhLCEwKX0pO1xuXCJhYm9ydCBhbmltYXRpb25FbmQgYW5pbWF0aW9uSXRlcmF0aW9uIGFuaW1hdGlvblN0YXJ0IGNhblBsYXkgY2FuUGxheVRocm91Z2ggZHJhZyBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBwbGF5aW5nIHByb2dyZXNzIHNjcm9sbCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvZ2dsZSB0b3VjaE1vdmUgdHJhbnNpdGlvbkVuZCB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7UGQoYSwhMSl9KTtcbnZhciBRZD17ZXZlbnRUeXBlczpOZCxpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGU6ZnVuY3Rpb24oYSl7YT1PZFthXTtyZXR1cm4gdm9pZCAwIT09YSYmITA9PT1hLmlzSW50ZXJhY3RpdmV9LGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9T2RbYV07aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmlmKDA9PT1GZChjKSlyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5RG93blwiOmNhc2UgXCJ0b3BLZXlVcFwiOmE9SWQ7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpjYXNlIFwidG9wRm9jdXNcIjphPUVkO2JyZWFrO2Nhc2UgXCJ0b3BDbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwidG9wRG91YmxlQ2xpY2tcIjpjYXNlIFwidG9wTW91c2VEb3duXCI6Y2FzZSBcInRvcE1vdXNlTW92ZVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6Y2FzZSBcInRvcE1vdXNlT3V0XCI6Y2FzZSBcInRvcE1vdXNlT3ZlclwiOmNhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmE9XG50ZDticmVhaztjYXNlIFwidG9wRHJhZ1wiOmNhc2UgXCJ0b3BEcmFnRW5kXCI6Y2FzZSBcInRvcERyYWdFbnRlclwiOmNhc2UgXCJ0b3BEcmFnRXhpdFwiOmNhc2UgXCJ0b3BEcmFnTGVhdmVcIjpjYXNlIFwidG9wRHJhZ092ZXJcIjpjYXNlIFwidG9wRHJhZ1N0YXJ0XCI6Y2FzZSBcInRvcERyb3BcIjphPUpkO2JyZWFrO2Nhc2UgXCJ0b3BUb3VjaENhbmNlbFwiOmNhc2UgXCJ0b3BUb3VjaEVuZFwiOmNhc2UgXCJ0b3BUb3VjaE1vdmVcIjpjYXNlIFwidG9wVG91Y2hTdGFydFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcEFuaW1hdGlvbkVuZFwiOmNhc2UgXCJ0b3BBbmltYXRpb25JdGVyYXRpb25cIjpjYXNlIFwidG9wQW5pbWF0aW9uU3RhcnRcIjphPUNkO2JyZWFrO2Nhc2UgXCJ0b3BUcmFuc2l0aW9uRW5kXCI6YT1MZDticmVhaztjYXNlIFwidG9wU2Nyb2xsXCI6YT1wZDticmVhaztjYXNlIFwidG9wV2hlZWxcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BDb3B5XCI6Y2FzZSBcInRvcEN1dFwiOmNhc2UgXCJ0b3BQYXN0ZVwiOmE9RGQ7YnJlYWs7ZGVmYXVsdDphPVxuTn1iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO2hiKGIpO3JldHVybiBifX0sUmQ9UWQuaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlLFNkPVtdO2Z1bmN0aW9uIFRkKGEpe3ZhciBiPWEudGFyZ2V0SW5zdDtkb3tpZighYil7YS5hbmNlc3RvcnMucHVzaChiKTticmVha312YXIgYztmb3IoYz1iO2NbXCJyZXR1cm5cIl07KWM9Y1tcInJldHVyblwiXTtjPTMhPT1jLnRhZz9udWxsOmMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoIWMpYnJlYWs7YS5hbmNlc3RvcnMucHVzaChiKTtiPVRhKGMpfXdoaWxlKGIpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKWI9YS5hbmNlc3RvcnNbY10sUGEoYS50b3BMZXZlbFR5cGUsYixhLm5hdGl2ZUV2ZW50LGdjKGEubmF0aXZlRXZlbnQpKX12YXIgVWQ9ITA7ZnVuY3Rpb24gVmQoYSl7VWQ9ISFhfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCExKX1mdW5jdGlvbiBZZChhLGIsYyl7aWYoIWMpcmV0dXJuIG51bGw7YT0oUmQoYSk/V2Q6WGQpLmJpbmQobnVsbCxhKTtjLmFkZEV2ZW50TGlzdGVuZXIoYixhLCEwKX1mdW5jdGlvbiBXZChhLGIpe2FjKFhkLGEsYil9XG5mdW5jdGlvbiBYZChhLGIpe2lmKFVkKXt2YXIgYz1nYyhiKTtjPVRhKGMpO251bGwhPT1jJiZcIm51bWJlclwiPT09dHlwZW9mIGMudGFnJiYyIT09d2QoYykmJihjPW51bGwpO2lmKFNkLmxlbmd0aCl7dmFyIGQ9U2QucG9wKCk7ZC50b3BMZXZlbFR5cGU9YTtkLm5hdGl2ZUV2ZW50PWI7ZC50YXJnZXRJbnN0PWM7YT1kfWVsc2UgYT17dG9wTGV2ZWxUeXBlOmEsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfTt0cnl7ZGMoVGQsYSl9ZmluYWxseXthLnRvcExldmVsVHlwZT1udWxsLGEubmF0aXZlRXZlbnQ9bnVsbCxhLnRhcmdldEluc3Q9bnVsbCxhLmFuY2VzdG9ycy5sZW5ndGg9MCwxMD5TZC5sZW5ndGgmJlNkLnB1c2goYSl9fX1cbnZhciBaZD1PYmplY3QuZnJlZXplKHtnZXQgX2VuYWJsZWQoKXtyZXR1cm4gVWR9LHNldEVuYWJsZWQ6VmQsaXNFbmFibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIFVkfSx0cmFwQnViYmxlZEV2ZW50OlcsdHJhcENhcHR1cmVkRXZlbnQ6WWQsZGlzcGF0Y2hFdmVudDpYZH0pO2Z1bmN0aW9uICRkKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7Y1tcIm1zXCIrYV09XCJNU1wiK2I7Y1tcIk9cIithXT1cIm9cIitiLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGN9XG52YXIgYWU9e2FuaW1hdGlvbmVuZDokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjokZChcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OiRkKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOiRkKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sYmU9e30sY2U9e307bS5jYW5Vc2VET00mJihjZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBhZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBhZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBhZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO1xuZnVuY3Rpb24gZGUoYSl7aWYoYmVbYV0pcmV0dXJuIGJlW2FdO2lmKCFhZVthXSlyZXR1cm4gYTt2YXIgYj1hZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBjZSlyZXR1cm4gYmVbYV09YltjXTtyZXR1cm4gYX1cbnZhciBlZT17dG9wQW5pbWF0aW9uRW5kOmRlKFwiYW5pbWF0aW9uZW5kXCIpLHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpkZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSx0b3BBbmltYXRpb25TdGFydDpkZShcImFuaW1hdGlvbnN0YXJ0XCIpLHRvcEJsdXI6XCJibHVyXCIsdG9wQ2FuY2VsOlwiY2FuY2VsXCIsdG9wQ2hhbmdlOlwiY2hhbmdlXCIsdG9wQ2xpY2s6XCJjbGlja1wiLHRvcENsb3NlOlwiY2xvc2VcIix0b3BDb21wb3NpdGlvbkVuZDpcImNvbXBvc2l0aW9uZW5kXCIsdG9wQ29tcG9zaXRpb25TdGFydDpcImNvbXBvc2l0aW9uc3RhcnRcIix0b3BDb21wb3NpdGlvblVwZGF0ZTpcImNvbXBvc2l0aW9udXBkYXRlXCIsdG9wQ29udGV4dE1lbnU6XCJjb250ZXh0bWVudVwiLHRvcENvcHk6XCJjb3B5XCIsdG9wQ3V0OlwiY3V0XCIsdG9wRG91YmxlQ2xpY2s6XCJkYmxjbGlja1wiLHRvcERyYWc6XCJkcmFnXCIsdG9wRHJhZ0VuZDpcImRyYWdlbmRcIix0b3BEcmFnRW50ZXI6XCJkcmFnZW50ZXJcIix0b3BEcmFnRXhpdDpcImRyYWdleGl0XCIsdG9wRHJhZ0xlYXZlOlwiZHJhZ2xlYXZlXCIsXG50b3BEcmFnT3ZlcjpcImRyYWdvdmVyXCIsdG9wRHJhZ1N0YXJ0OlwiZHJhZ3N0YXJ0XCIsdG9wRHJvcDpcImRyb3BcIix0b3BGb2N1czpcImZvY3VzXCIsdG9wSW5wdXQ6XCJpbnB1dFwiLHRvcEtleURvd246XCJrZXlkb3duXCIsdG9wS2V5UHJlc3M6XCJrZXlwcmVzc1wiLHRvcEtleVVwOlwia2V5dXBcIix0b3BMb2FkOlwibG9hZFwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcE1vdXNlRG93bjpcIm1vdXNlZG93blwiLHRvcE1vdXNlTW92ZTpcIm1vdXNlbW92ZVwiLHRvcE1vdXNlT3V0OlwibW91c2VvdXRcIix0b3BNb3VzZU92ZXI6XCJtb3VzZW92ZXJcIix0b3BNb3VzZVVwOlwibW91c2V1cFwiLHRvcFBhc3RlOlwicGFzdGVcIix0b3BTY3JvbGw6XCJzY3JvbGxcIix0b3BTZWxlY3Rpb25DaGFuZ2U6XCJzZWxlY3Rpb25jaGFuZ2VcIix0b3BUZXh0SW5wdXQ6XCJ0ZXh0SW5wdXRcIix0b3BUb2dnbGU6XCJ0b2dnbGVcIix0b3BUb3VjaENhbmNlbDpcInRvdWNoY2FuY2VsXCIsdG9wVG91Y2hFbmQ6XCJ0b3VjaGVuZFwiLHRvcFRvdWNoTW92ZTpcInRvdWNobW92ZVwiLFxudG9wVG91Y2hTdGFydDpcInRvdWNoc3RhcnRcIix0b3BUcmFuc2l0aW9uRW5kOmRlKFwidHJhbnNpdGlvbmVuZFwiKSx0b3BXaGVlbDpcIndoZWVsXCJ9LGZlPXt0b3BBYm9ydDpcImFib3J0XCIsdG9wQ2FuUGxheTpcImNhbnBsYXlcIix0b3BDYW5QbGF5VGhyb3VnaDpcImNhbnBsYXl0aHJvdWdoXCIsdG9wRHVyYXRpb25DaGFuZ2U6XCJkdXJhdGlvbmNoYW5nZVwiLHRvcEVtcHRpZWQ6XCJlbXB0aWVkXCIsdG9wRW5jcnlwdGVkOlwiZW5jcnlwdGVkXCIsdG9wRW5kZWQ6XCJlbmRlZFwiLHRvcEVycm9yOlwiZXJyb3JcIix0b3BMb2FkZWREYXRhOlwibG9hZGVkZGF0YVwiLHRvcExvYWRlZE1ldGFkYXRhOlwibG9hZGVkbWV0YWRhdGFcIix0b3BMb2FkU3RhcnQ6XCJsb2Fkc3RhcnRcIix0b3BQYXVzZTpcInBhdXNlXCIsdG9wUGxheTpcInBsYXlcIix0b3BQbGF5aW5nOlwicGxheWluZ1wiLHRvcFByb2dyZXNzOlwicHJvZ3Jlc3NcIix0b3BSYXRlQ2hhbmdlOlwicmF0ZWNoYW5nZVwiLHRvcFNlZWtlZDpcInNlZWtlZFwiLHRvcFNlZWtpbmc6XCJzZWVraW5nXCIsXG50b3BTdGFsbGVkOlwic3RhbGxlZFwiLHRvcFN1c3BlbmQ6XCJzdXNwZW5kXCIsdG9wVGltZVVwZGF0ZTpcInRpbWV1cGRhdGVcIix0b3BWb2x1bWVDaGFuZ2U6XCJ2b2x1bWVjaGFuZ2VcIix0b3BXYWl0aW5nOlwid2FpdGluZ1wifSxnZT17fSxoZT0wLGllPVwiX3JlYWN0TGlzdGVuZXJzSURcIisoXCJcIitNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtmdW5jdGlvbiBqZShhKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSxpZSl8fChhW2llXT1oZSsrLGdlW2FbaWVdXT17fSk7cmV0dXJuIGdlW2FbaWVdXX1mdW5jdGlvbiBrZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBsZShhLGIpe3ZhciBjPWtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPWtlKGMpfX1mdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiZcInRleHRcIj09PWEudHlwZXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgbmU9bS5jYW5Vc2VET00mJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxvZT17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb250ZXh0TWVudSB0b3BGb2N1cyB0b3BLZXlEb3duIHRvcEtleVVwIHRvcE1vdXNlRG93biB0b3BNb3VzZVVwIHRvcFNlbGVjdGlvbkNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LHBlPW51bGwscWU9bnVsbCxyZT1udWxsLHNlPSExO1xuZnVuY3Rpb24gdWUoYSxiKXtpZihzZXx8bnVsbD09cGV8fHBlIT09ZWEoKSlyZXR1cm4gbnVsbDt2YXIgYz1wZTtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZtZShjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06d2luZG93LmdldFNlbGVjdGlvbj8oYz13aW5kb3cuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk6Yz12b2lkIDA7cmV0dXJuIHJlJiZmYShyZSxjKT9udWxsOihyZT1jLGE9Ti5nZXRQb29sZWQob2Uuc2VsZWN0LHFlLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9cGUsaGIoYSksYSl9XG52YXIgd2U9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1kLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCxmO2lmKCEoZj0hZSkpe2E6e2U9amUoZSk7Zj11YS5vblNlbGVjdDtmb3IodmFyIGg9MDtoPGYubGVuZ3RoO2grKyl7dmFyIGc9ZltoXTtpZighZS5oYXNPd25Qcm9wZXJ0eShnKXx8IWVbZ10pe2U9ITE7YnJlYWsgYX19ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1VhKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcInRvcEZvY3VzXCI6aWYoZmMoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpcGU9ZSxxZT1iLHJlPW51bGw7YnJlYWs7Y2FzZSBcInRvcEJsdXJcIjpyZT1xZT1wZT1udWxsO2JyZWFrO2Nhc2UgXCJ0b3BNb3VzZURvd25cIjpzZT0hMDticmVhaztjYXNlIFwidG9wQ29udGV4dE1lbnVcIjpjYXNlIFwidG9wTW91c2VVcFwiOnJldHVybiBzZT0hMSx1ZShjLGQpO2Nhc2UgXCJ0b3BTZWxlY3Rpb25DaGFuZ2VcIjppZihuZSlicmVhaztcbmNhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuIHVlKGMsZCl9cmV0dXJuIG51bGx9fTtNYS5pbmplY3RFdmVudFBsdWdpbk9yZGVyKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gVGFwRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO0NhPVhhLmdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU7RGE9WGEuZ2V0SW5zdGFuY2VGcm9tTm9kZTtFYT1YYS5nZXROb2RlRnJvbUluc3RhbmNlO01hLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7U2ltcGxlRXZlbnRQbHVnaW46UWQsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOnZkLENoYW5nZUV2ZW50UGx1Z2luOm9kLFNlbGVjdEV2ZW50UGx1Z2luOndlLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46UWJ9KTtcbmZ1bmN0aW9uIHhlKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9bnVsbDt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzW1wicmV0dXJuXCJdPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfVxuZnVuY3Rpb24geWUoYSxiLGMpe3ZhciBkPWEuYWx0ZXJuYXRlO251bGw9PT1kPyhkPW5ldyB4ZShhLnRhZyxiLGEua2V5LGEubW9kZSksZC50eXBlPWEudHlwZSxkLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxkLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWQpOihkLnBlbmRpbmdQcm9wcz1iLGQuZWZmZWN0VGFnPTAsZC5uZXh0RWZmZWN0PW51bGwsZC5maXJzdEVmZmVjdD1udWxsLGQubGFzdEVmZmVjdD1udWxsKTtkLmV4cGlyYXRpb25UaW1lPWM7ZC5jaGlsZD1hLmNoaWxkO2QubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7ZC5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtkLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7ZC5zaWJsaW5nPWEuc2libGluZztkLmluZGV4PWEuaW5kZXg7ZC5yZWY9YS5yZWY7cmV0dXJuIGR9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS50eXBlLGU9YS5rZXk7YT1hLnByb3BzO3ZhciBmPXZvaWQgMDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZClmPWQucHJvdG90eXBlJiZkLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PzI6MDtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgZClmPTU7ZWxzZSBzd2l0Y2goZCl7Y2FzZSByYzpyZXR1cm4gQWUoYS5jaGlsZHJlbixiLGMsZSk7Y2FzZSB2YzpmPTExO2J8PTM7YnJlYWs7Y2FzZSBzYzpmPTExO2J8PTI7YnJlYWs7Y2FzZSBvYzpmPTc7YnJlYWs7Y2FzZSBwYzpmPTk7YnJlYWs7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXN3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRjOmY9MTM7YnJlYWs7Y2FzZSB1YzpmPTEyO2JyZWFrO2Nhc2Ugd2M6Zj0xNDticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCI9PT10eXBlb2YgZC50YWcpcmV0dXJuIGI9ZCxiLnBlbmRpbmdQcm9wcz1hLGIuZXhwaXJhdGlvblRpbWU9YyxcbmI7RChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1lbHNlIEQoXCIxMzBcIixudWxsPT1kP2Q6dHlwZW9mIGQsXCJcIil9Yj1uZXcgeGUoZixhLGUsYik7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1jO3JldHVybiBifWZ1bmN0aW9uIEFlKGEsYixjLGQpe2E9bmV3IHhlKDEwLGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gQmUoYSxiLGMpe2E9bmV3IHhlKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7Yj1uZXcgeGUoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9dmFyIERlPW51bGwsRWU9bnVsbDtcbmZ1bmN0aW9uIEZlKGEpe3JldHVybiBmdW5jdGlvbihiKXt0cnl7cmV0dXJuIGEoYil9Y2F0Y2goYyl7fX19ZnVuY3Rpb24gR2UoYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7RGU9RmUoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclJvb3QoYyxhKX0pO0VlPUZlKGZ1bmN0aW9uKGEpe3JldHVybiBiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9KX1jYXRjaChkKXt9cmV0dXJuITB9ZnVuY3Rpb24gSGUoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIERlJiZEZShhKX1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfW5ldyBTZXQ7XG5mdW5jdGlvbiBKZShhKXtyZXR1cm57YmFzZVN0YXRlOmEsZXhwaXJhdGlvblRpbWU6MCxmaXJzdDpudWxsLGxhc3Q6bnVsbCxjYWxsYmFja0xpc3Q6bnVsbCxoYXNGb3JjZVVwZGF0ZTohMSxpc0luaXRpYWxpemVkOiExLGNhcHR1cmVkVmFsdWVzOm51bGx9fWZ1bmN0aW9uIEtlKGEsYil7bnVsbD09PWEubGFzdD9hLmZpcnN0PWEubGFzdD1iOihhLmxhc3QubmV4dD1iLGEubGFzdD1iKTtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5iLmV4cGlyYXRpb25UaW1lKWEuZXhwaXJhdGlvblRpbWU9Yi5leHBpcmF0aW9uVGltZX12YXIgTGU9dm9pZCAwLE1lPXZvaWQgMDtcbmZ1bmN0aW9uIE5lKGEpe0xlPU1lPW51bGw7dmFyIGI9YS5hbHRlcm5hdGUsYz1hLnVwZGF0ZVF1ZXVlO251bGw9PT1jJiYoYz1hLnVwZGF0ZVF1ZXVlPUplKG51bGwpKTtudWxsIT09Yj8oYT1iLnVwZGF0ZVF1ZXVlLG51bGw9PT1hJiYoYT1iLnVwZGF0ZVF1ZXVlPUplKG51bGwpKSk6YT1udWxsO0xlPWM7TWU9YSE9PWM/YTpudWxsfWZ1bmN0aW9uIE9lKGEsYil7TmUoYSk7YT1MZTt2YXIgYz1NZTtudWxsPT09Yz9LZShhLGIpOm51bGw9PT1hLmxhc3R8fG51bGw9PT1jLmxhc3Q/KEtlKGEsYiksS2UoYyxiKSk6KEtlKGEsYiksYy5sYXN0PWIpfWZ1bmN0aW9uIFBlKGEsYixjLGQpe2E9YS5wYXJ0aWFsU3RhdGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YS5jYWxsKGIsYyxkKTphfVxuZnVuY3Rpb24gUWUoYSxiLGMsZCxlLGYpe251bGwhPT1hJiZhLnVwZGF0ZVF1ZXVlPT09YyYmKGM9Yi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmMuYmFzZVN0YXRlLGV4cGlyYXRpb25UaW1lOmMuZXhwaXJhdGlvblRpbWUsZmlyc3Q6Yy5maXJzdCxsYXN0OmMubGFzdCxpc0luaXRpYWxpemVkOmMuaXNJbml0aWFsaXplZCxjYXB0dXJlZFZhbHVlczpjLmNhcHR1cmVkVmFsdWVzLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExfSk7Yy5leHBpcmF0aW9uVGltZT0wO2MuaXNJbml0aWFsaXplZD9hPWMuYmFzZVN0YXRlOihhPWMuYmFzZVN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxjLmlzSW5pdGlhbGl6ZWQ9ITApO2Zvcih2YXIgaD0hMCxnPWMuZmlyc3Qsaz0hMTtudWxsIT09Zzspe3ZhciB2PWcuZXhwaXJhdGlvblRpbWU7aWYodj5mKXt2YXIgbD1jLmV4cGlyYXRpb25UaW1lO2lmKDA9PT1sfHxsPnYpYy5leHBpcmF0aW9uVGltZT12O2t8fChrPSEwLGMuYmFzZVN0YXRlPWEpfWVsc2V7a3x8XG4oYy5maXJzdD1nLm5leHQsbnVsbD09PWMuZmlyc3QmJihjLmxhc3Q9bnVsbCkpO2lmKGcuaXNSZXBsYWNlKWE9UGUoZyxkLGEsZSksaD0hMDtlbHNlIGlmKHY9UGUoZyxkLGEsZSkpYT1oP0Eoe30sYSx2KTpBKGEsdiksaD0hMTtnLmlzRm9yY2VkJiYoYy5oYXNGb3JjZVVwZGF0ZT0hMCk7bnVsbCE9PWcuY2FsbGJhY2smJih2PWMuY2FsbGJhY2tMaXN0LG51bGw9PT12JiYodj1jLmNhbGxiYWNrTGlzdD1bXSksdi5wdXNoKGcpKTtudWxsIT09Zy5jYXB0dXJlZFZhbHVlJiYodj1jLmNhcHR1cmVkVmFsdWVzLG51bGw9PT12P2MuY2FwdHVyZWRWYWx1ZXM9W2cuY2FwdHVyZWRWYWx1ZV06di5wdXNoKGcuY2FwdHVyZWRWYWx1ZSkpfWc9Zy5uZXh0fW51bGwhPT1jLmNhbGxiYWNrTGlzdD9iLmVmZmVjdFRhZ3w9MzI6bnVsbCE9PWMuZmlyc3R8fGMuaGFzRm9yY2VVcGRhdGV8fG51bGwhPT1jLmNhcHR1cmVkVmFsdWVzfHwoYi51cGRhdGVRdWV1ZT1udWxsKTtrfHwoYy5iYXNlU3RhdGU9YSk7XG5yZXR1cm4gYX1mdW5jdGlvbiBSZShhLGIpe3ZhciBjPWEuY2FsbGJhY2tMaXN0O2lmKG51bGwhPT1jKWZvcihhLmNhbGxiYWNrTGlzdD1udWxsLGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXSxlPWQuY2FsbGJhY2s7ZC5jYWxsYmFjaz1udWxsO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBlP0QoXCIxOTFcIixlKTp2b2lkIDA7ZS5jYWxsKGIpfX1cbmZ1bmN0aW9uIFNlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhLGIsYyxkLGUsZil7aWYobnVsbD09PWJ8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKXJldHVybiEwO3ZhciBuPWEuc3RhdGVOb2RlO2E9YS50eXBlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLnNob3VsZENvbXBvbmVudFVwZGF0ZT9uLnNob3VsZENvbXBvbmVudFVwZGF0ZShjLGUsZik6YS5wcm90b3R5cGUmJmEucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFmYShiLGMpfHwhZmEoZCxlKTohMH1mdW5jdGlvbiBoKGEsYil7Yi51cGRhdGVyPXI7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YX1mdW5jdGlvbiBnKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5iLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9ZnVuY3Rpb24gayhhLGIsYyxkKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpcmV0dXJuIGEuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxjLGQpfXZhciB2PWEuY2FjaGVDb250ZXh0LGw9YS5nZXRNYXNrZWRDb250ZXh0LHA9YS5nZXRVbm1hc2tlZENvbnRleHQsej1hLmlzQ29udGV4dENvbnN1bWVyLEI9YS5oYXNDb250ZXh0Q2hhbmdlZCxyPXtpc01vdW50ZWQ6eGQsZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsZCxlKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtlPXZvaWQgMD09PWU/bnVsbDplO3ZhciBmPWMoYSk7T2UoYSx7ZXhwaXJhdGlvblRpbWU6ZixwYXJ0aWFsU3RhdGU6ZCxjYWxsYmFjazplLGlzUmVwbGFjZTohMSxpc0ZvcmNlZDohMSxcbmNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiEwLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZil9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGQpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGU9YyhhKTtPZShhLHtleHBpcmF0aW9uVGltZTplLHBhcnRpYWxTdGF0ZTpudWxsLGNhbGxiYWNrOmQsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiEwLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtiKGEsZSl9fTtyZXR1cm57YWRvcHRDbGFzc0luc3RhbmNlOmgsY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczprLFxuY29uc3RydWN0Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxkPXAoYSksZT16KGEpLGY9ZT9sKGEsZCk6amE7Yz1uZXcgYyhiLGYpO3ZhciBuPW51bGwhPT1jLnN0YXRlJiZ2b2lkIDAhPT1jLnN0YXRlP2Muc3RhdGU6bnVsbDtoKGEsYyk7YS5tZW1vaXplZFN0YXRlPW47Yj1rKGEsYyxiLG4pO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoYS5tZW1vaXplZFN0YXRlPUEoe30sYS5tZW1vaXplZFN0YXRlLGIpKTtlJiZ2KGEsZCxmKTtyZXR1cm4gY30sbW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9YS5hbHRlcm5hdGUsZT1hLnN0YXRlTm9kZSxmPWEucGVuZGluZ1Byb3BzLG49cChhKTtlLnByb3BzPWY7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWphO2UuY29udGV4dD1sKGEsbik7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChjPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGMhPT1lLnN0YXRlJiZyLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGUuc3RhdGU9UWUoZCxhLGMsZSxmLGIpKSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9LHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIpe3ZhciBjPWEudHlwZSxuPWEuc3RhdGVOb2RlO24ucHJvcHM9YS5tZW1vaXplZFByb3BzO24uc3RhdGU9XG5hLm1lbW9pemVkU3RhdGU7dmFyIGg9YS5tZW1vaXplZFByb3BzLHI9YS5wZW5kaW5nUHJvcHMsej1uLmNvbnRleHQscT1wKGEpO3E9bChhLHEpOyhjPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIG4uZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1yfHx6IT09cSkmJmcoYSxuLHIscSk7ej1hLm1lbW9pemVkU3RhdGU7Yj1udWxsIT09YS51cGRhdGVRdWV1ZT9RZShudWxsLGEsYS51cGRhdGVRdWV1ZSxuLHIsYik6ejt2YXIgdT12b2lkIDA7aCE9PXImJih1PWsoYSxuLHIsYikpO2lmKG51bGwhPT11JiZ2b2lkIDAhPT11KXtiPW51bGw9PT1ifHx2b2lkIDA9PT1iP3U6QSh7fSxiLHUpO3ZhciB0PWEudXBkYXRlUXVldWU7XG5udWxsIT09dCYmKHQuYmFzZVN0YXRlPUEoe30sdC5iYXNlU3RhdGUsdSkpfWlmKCEoaCE9PXJ8fHohPT1ifHxCKCl8fG51bGwhPT1hLnVwZGF0ZVF1ZXVlJiZhLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KSwhMTsoaD1mKGEsaCxyLHosYixxKSk/KGN8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxNb3VudCYmbi5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9XG40KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLGQoYSxyKSxlKGEsYikpO24ucHJvcHM9cjtuLnN0YXRlPWI7bi5jb250ZXh0PXE7cmV0dXJuIGh9LHVwZGF0ZUNsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe3ZhciBuPWIudHlwZSx4PWIuc3RhdGVOb2RlO3gucHJvcHM9Yi5tZW1vaXplZFByb3BzO3guc3RhdGU9Yi5tZW1vaXplZFN0YXRlO3ZhciBoPWIubWVtb2l6ZWRQcm9wcyxyPWIucGVuZGluZ1Byb3BzLHE9eC5jb250ZXh0LHU9cChiKTt1PWwoYix1KTsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1yfHxxIT09dSkmJmcoYix4LHIsdSk7cT1iLm1lbW9pemVkU3RhdGU7Yz1udWxsIT09Yi51cGRhdGVRdWV1ZT9RZShhLGIsYi51cGRhdGVRdWV1ZSx4LHIsYyk6cTt2YXIgdD12b2lkIDA7aCE9PXImJih0PWsoYix4LHIsYykpO2lmKG51bGwhPT10JiZ2b2lkIDAhPT10KXtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP3Q6QSh7fSxjLHQpO3ZhciB5PWIudXBkYXRlUXVldWU7bnVsbCE9PXkmJih5LmJhc2VTdGF0ZT1BKHt9LHkuYmFzZVN0YXRlLHQpKX1pZighKGghPT1yfHxxIT09Y3x8QigpfHxudWxsIT09Yi51cGRhdGVRdWV1ZSYmYi51cGRhdGVRdWV1ZS5oYXNGb3JjZVVwZGF0ZSkpcmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZcbnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjA0OCksITE7KHQ9ZihiLGgscixxLGMsdSkpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudFdpbGxVcGRhdGUmJnguY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJnguVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUocixjLHUpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjA0OCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSxkKGIsciksZShiLGMpKTt4LnByb3BzPXI7eC5zdGF0ZT1jO3guY29udGV4dD11O3JldHVybiB0fX19dmFyIFRlPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBVZShhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7dmFyIGQ9dm9pZCAwO2MmJigyIT09Yy50YWc/RChcIjExMFwiKTp2b2lkIDAsZD1jLnN0YXRlTm9kZSk7ZD92b2lkIDA6RChcIjE0N1wiLGEpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM9PT1qYT9kLnJlZnM9e306ZC5yZWZzO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9XCJzdHJpbmdcIiE9PXR5cGVvZiBhP0QoXCIxNDhcIik6dm9pZCAwO2MuX293bmVyP3ZvaWQgMDpEKFwiMjU0XCIsYSl9cmV0dXJuIGF9XG5mdW5jdGlvbiBWZShhLGIpe1widGV4dGFyZWFcIiE9PWEudHlwZSYmRChcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpfVxuZnVuY3Rpb24gV2UoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIsYyl7YT15ZShhLGIsYyk7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGgoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gZyhhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIudHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyxkKSxkLnJlZj1VZShhLGIsYyksZFtcInJldHVyblwiXT1hLGQ7ZD16ZShjLGEubW9kZSxkKTtkLnJlZj1VZShhLGIsYyk7ZFtcInJldHVyblwiXT1hO3JldHVybiBkfWZ1bmN0aW9uIHYoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVxuQ2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10sZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIGwoYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8MTAhPT1iLnRhZylyZXR1cm4gYj1BZShjLGEubW9kZSxkLGYpLGJbXCJyZXR1cm5cIl09YSxiO2I9ZShiLGMsZCk7YltcInJldHVyblwiXT1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPUJlKFwiXCIrYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgbmM6cmV0dXJuIGM9emUoYixhLm1vZGUsYyksYy5yZWY9VWUoYSxudWxsLGIpLGNbXCJyZXR1cm5cIl09YSxjO2Nhc2UgcWM6cmV0dXJuIGI9Q2UoYixhLm1vZGUsYyksYltcInJldHVyblwiXT1hLGJ9aWYoVGUoYil8fHljKGIpKXJldHVybiBiPUFlKGIsXG5hLm1vZGUsYyxudWxsKSxiW1wicmV0dXJuXCJdPWEsYjtWZShhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpnKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgbmM6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1yYz9sKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgcWM6cmV0dXJuIGMua2V5PT09ZT92KGEsYixjLGQpOm51bGx9aWYoVGUoYyl8fHljKGMpKXJldHVybiBudWxsIT09ZT9udWxsOmwoYSxiLGMsZCxudWxsKTtWZShhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIEIoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8XG5udWxsLGcoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBuYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09cmM/bChiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgcWM6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLHYoYixhLGQsZSl9aWYoVGUoZCl8fHljKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGwoYixhLGQsZSxudWxsKTtWZShiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoZSxnLGwsaCl7Zm9yKHZhciByPW51bGwsaz1udWxsLHE9Zyx1PWc9MCx0PW51bGw7bnVsbCE9PXEmJnU8bC5sZW5ndGg7dSsrKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBuPXooZSxxLGxbdV0saCk7aWYobnVsbD09PW4pe251bGw9PT1xJiYocT10KTticmVha31hJiZxJiZudWxsPT09XG5uLmFsdGVybmF0ZSYmYihlLHEpO2c9ZihuLGcsdSk7bnVsbD09PWs/cj1uOmsuc2libGluZz1uO2s9bjtxPXR9aWYodT09PWwubGVuZ3RoKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDt1PGwubGVuZ3RoO3UrKylpZihxPXAoZSxsW3VdLGgpKWc9ZihxLGcsdSksbnVsbD09PWs/cj1xOmsuc2libGluZz1xLGs9cTtyZXR1cm4gcn1mb3IocT1kKGUscSk7dTxsLmxlbmd0aDt1KyspaWYodD1CKHEsZSx1LGxbdV0saCkpe2lmKGEmJm51bGwhPT10LmFsdGVybmF0ZSlxW1wiZGVsZXRlXCJdKG51bGw9PT10LmtleT91OnQua2V5KTtnPWYodCxnLHUpO251bGw9PT1rP3I9dDprLnNpYmxpbmc9dDtrPXR9YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1mdW5jdGlvbiBRKGUsZyxsLGgpe3ZhciByPXljKGwpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiByP0QoXCIxNTBcIik6dm9pZCAwO2w9ci5jYWxsKGwpO251bGw9PWw/RChcIjE1MVwiKTp2b2lkIDA7Zm9yKHZhciBrPVxucj1udWxsLHE9Zyx1PWc9MCx0PW51bGwsbj1sLm5leHQoKTtudWxsIT09cSYmIW4uZG9uZTt1Kyssbj1sLm5leHQoKSl7cS5pbmRleD51Pyh0PXEscT1udWxsKTp0PXEuc2libGluZzt2YXIgSD16KGUscSxuLnZhbHVlLGgpO2lmKG51bGw9PT1IKXtxfHwocT10KTticmVha31hJiZxJiZudWxsPT09SC5hbHRlcm5hdGUmJmIoZSxxKTtnPWYoSCxnLHUpO251bGw9PT1rP3I9SDprLnNpYmxpbmc9SDtrPUg7cT10fWlmKG4uZG9uZSlyZXR1cm4gYyhlLHEpLHI7aWYobnVsbD09PXEpe2Zvcig7IW4uZG9uZTt1Kyssbj1sLm5leHQoKSluPXAoZSxuLnZhbHVlLGgpLG51bGwhPT1uJiYoZz1mKG4sZyx1KSxudWxsPT09az9yPW46ay5zaWJsaW5nPW4saz1uKTtyZXR1cm4gcn1mb3IocT1kKGUscSk7IW4uZG9uZTt1Kyssbj1sLm5leHQoKSlpZihuPUIocSxlLHUsbi52YWx1ZSxoKSxudWxsIT09bil7aWYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PW4ua2V5P3U6bi5rZXkpO1xuZz1mKG4sZyx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1ufWEmJnEuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIHJ9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGcpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXJjJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBuYzphOnt2YXIgaz1mLmtleTtmb3IobD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKWlmKDEwPT09bC50YWc/Zi50eXBlPT09cmM6bC50eXBlPT09Zi50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnR5cGU9PT1yYz9mLnByb3BzLmNoaWxkcmVuOmYucHJvcHMsZyk7ZC5yZWY9VWUoYSxsLGYpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT1cbnJjPyhkPUFlKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGcsZi5rZXkpLGRbXCJyZXR1cm5cIl09YSxhPWQpOihnPXplKGYsYS5tb2RlLGcpLGcucmVmPVVlKGEsZCxmKSxnW1wicmV0dXJuXCJdPWEsYT1nKX1yZXR1cm4gaChhKTtjYXNlIHFjOmE6e2ZvcihsPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSxnKTtkW1wicmV0dXJuXCJdPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1DZShmLGEubW9kZSxnKTtkW1wicmV0dXJuXCJdPWE7YT1kfXJldHVybiBoKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmXG42PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYsZykpOihjKGEsZCksZD1CZShmLGEubW9kZSxnKSksZFtcInJldHVyblwiXT1hLGE9ZCxoKGEpO2lmKFRlKGYpKXJldHVybiByKGEsZCxmLGcpO2lmKHljKGYpKXJldHVybiBRKGEsZCxmLGcpO2wmJlZlKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmKXN3aXRjaChhLnRhZyl7Y2FzZSAyOmNhc2UgMTpnPWEudHlwZSxEKFwiMTUyXCIsZy5kaXNwbGF5TmFtZXx8Zy5uYW1lfHxcIkNvbXBvbmVudFwiKX1yZXR1cm4gYyhhLGQpfX12YXIgWGU9V2UoITApLFllPVdlKCExKTtcbmZ1bmN0aW9uIFplKGEsYixjLGQsZSxmLGgpe2Z1bmN0aW9uIGcoYSxiLGMpe2soYSxiLGMsYi5leHBpcmF0aW9uVGltZSl9ZnVuY3Rpb24gayhhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1llKGIsbnVsbCxjLGQpOlhlKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIHYoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBsKGEsYixjLGQsZSxmKXt2KGEsYik7aWYoIWMmJiFlKXJldHVybiBkJiZ5KGIsITEpLHIoYSxiKTtjPWIuc3RhdGVOb2RlO21jLmN1cnJlbnQ9Yjt2YXIgZz1lP251bGw6Yy5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtlJiYoayhhLGIsbnVsbCxmKSxiLmNoaWxkPW51bGwpO2soYSxiLGcsZik7Yi5tZW1vaXplZFN0YXRlPWMuc3RhdGU7Yi5tZW1vaXplZFByb3BzPWMucHJvcHM7ZCYmeShiLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBwKGEpe3ZhciBiPWEuc3RhdGVOb2RlO1xuYi5wZW5kaW5nQ29udGV4dD90KGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJnQoYSxiLmNvbnRleHQsITEpO1koYSxiLmNvbnRhaW5lckluZm8pfWZ1bmN0aW9uIHooYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDtmb3IobnVsbCE9PWUmJihlW1wicmV0dXJuXCJdPWEpO251bGwhPT1lOyl7c3dpdGNoKGUudGFnKXtjYXNlIDEyOnZhciBmPWUuc3RhdGVOb2RlfDA7aWYoZS50eXBlPT09YiYmMCE9PShmJmMpKXtmb3IoZj1lO251bGwhPT1mOyl7dmFyIGc9Zi5hbHRlcm5hdGU7aWYoMD09PWYuZXhwaXJhdGlvblRpbWV8fGYuZXhwaXJhdGlvblRpbWU+ZClmLmV4cGlyYXRpb25UaW1lPWQsbnVsbCE9PWcmJigwPT09Zy5leHBpcmF0aW9uVGltZXx8Zy5leHBpcmF0aW9uVGltZT5kKSYmKGcuZXhwaXJhdGlvblRpbWU9ZCk7ZWxzZSBpZihudWxsIT09ZyYmKDA9PT1nLmV4cGlyYXRpb25UaW1lfHxnLmV4cGlyYXRpb25UaW1lPmQpKWcuZXhwaXJhdGlvblRpbWU9XG5kO2Vsc2UgYnJlYWs7Zj1mW1wicmV0dXJuXCJdfWY9bnVsbH1lbHNlIGY9ZS5jaGlsZDticmVhaztjYXNlIDEzOmY9ZS50eXBlPT09YS50eXBlP251bGw6ZS5jaGlsZDticmVhaztkZWZhdWx0OmY9ZS5jaGlsZH1pZihudWxsIT09ZilmW1wicmV0dXJuXCJdPWU7ZWxzZSBmb3IoZj1lO251bGwhPT1mOyl7aWYoZj09PWEpe2Y9bnVsbDticmVha31lPWYuc2libGluZztpZihudWxsIT09ZSl7Zj1lO2JyZWFrfWY9ZltcInJldHVyblwiXX1lPWZ9fWZ1bmN0aW9uIEIoYSxiLGMpe3ZhciBkPWIudHlwZS5fY29udGV4dCxlPWIucGVuZGluZ1Byb3BzLGY9Yi5tZW1vaXplZFByb3BzO2lmKCFxKCkmJmY9PT1lKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO3ZhciBsPWUudmFsdWU7Yi5tZW1vaXplZFByb3BzPWU7aWYobnVsbD09PWYpbD0xMDczNzQxODIzO2Vsc2UgaWYoZi52YWx1ZT09PWUudmFsdWUpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYiksXG5yKGEsYik7bD0wfWVsc2V7dmFyIHU9Zi52YWx1ZTtpZih1PT09bCYmKDAhPT11fHwxL3U9PT0xL2wpfHx1IT09dSYmbCE9PWwpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuKXJldHVybiBiLnN0YXRlTm9kZT0wLEcoYikscihhLGIpO2w9MH1lbHNlIGlmKGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKHUsbCk6MTA3Mzc0MTgyMyxsfD0wLDA9PT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKX1lbHNlIHooYixkLGwsYyl9Yi5zdGF0ZU5vZGU9bDtHKGIpO2coYSxiLGUuY2hpbGRyZW4pO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHIoYSxiKXtudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQ/RChcIjE1M1wiKTp2b2lkIDA7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDt2YXIgYz15ZShhLGEucGVuZGluZ1Byb3BzLGEuZXhwaXJhdGlvblRpbWUpO1xuYi5jaGlsZD1jO2ZvcihjW1wicmV0dXJuXCJdPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9eWUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKSxjW1wicmV0dXJuXCJdPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIFE9YS5zaG91bGRTZXRUZXh0Q29udGVudCxuPWEuc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSx4PWIucHVzaEhvc3RDb250ZXh0LFk9Yi5wdXNoSG9zdENvbnRhaW5lcixHPWQucHVzaFByb3ZpZGVyLFI9Yy5nZXRNYXNrZWRDb250ZXh0LFM9Yy5nZXRVbm1hc2tlZENvbnRleHQscT1jLmhhc0NvbnRleHRDaGFuZ2VkLHU9Yy5wdXNoQ29udGV4dFByb3ZpZGVyLHQ9Yy5wdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0LHk9Yy5pbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLEg9ZS5lbnRlckh5ZHJhdGlvblN0YXRlLFdhPWUucmVzZXRIeWRyYXRpb25TdGF0ZSxDYj1lLnRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuYT1TZShjLGYsaCxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRQcm9wcz1ifSxmdW5jdGlvbihhLGIpe2EubWVtb2l6ZWRTdGF0ZT1ifSk7dmFyIEpjPWEuYWRvcHRDbGFzc0luc3RhbmNlLEtjPWEuY2FsbEdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxMYz1hLmNvbnN0cnVjdENsYXNzSW5zdGFuY2UsRGI9YS5tb3VudENsYXNzSW5zdGFuY2UsTWM9YS5yZXN1bWVNb3VudENsYXNzSW5zdGFuY2UsRWI9YS51cGRhdGVDbGFzc0luc3RhbmNlO3JldHVybntiZWdpbldvcms6ZnVuY3Rpb24oYSxiLGMpe2lmKDA9PT1iLmV4cGlyYXRpb25UaW1lfHxiLmV4cGlyYXRpb25UaW1lPmMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOnAoYik7YnJlYWs7Y2FzZSAyOnUoYik7YnJlYWs7Y2FzZSA0OlkoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEzOkcoYil9cmV0dXJuIG51bGx9c3dpdGNoKGIudGFnKXtjYXNlIDA6bnVsbCE9PWE/RChcIjE1NVwiKTp2b2lkIDA7dmFyIGQ9Yi50eXBlLFxuZT1iLnBlbmRpbmdQcm9wcyxmPVMoYik7Zj1SKGIsZik7ZD1kKGUsZik7Yi5lZmZlY3RUYWd8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQucmVuZGVyJiZ2b2lkIDA9PT1kLiQkdHlwZW9mPyhmPWIudHlwZSxiLnRhZz0yLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZC5zdGF0ZSYmdm9pZCAwIT09ZC5zdGF0ZT9kLnN0YXRlOm51bGwsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiYoZT1LYyhiLGQsZSxiLm1lbW9pemVkU3RhdGUpLG51bGwhPT1lJiZ2b2lkIDAhPT1lJiYoYi5tZW1vaXplZFN0YXRlPUEoe30sYi5tZW1vaXplZFN0YXRlLGUpKSksZT11KGIpLEpjKGIsZCksRGIoYixjKSxhPWwoYSxiLCEwLGUsITEsYykpOihiLnRhZz0xLGcoYSxiLGQpLGIubWVtb2l6ZWRQcm9wcz1lLGE9Yi5jaGlsZCk7cmV0dXJuIGE7Y2FzZSAxOnJldHVybiBlPWIudHlwZSxjPWIucGVuZGluZ1Byb3BzLHEoKXx8XG5iLm1lbW9pemVkUHJvcHMhPT1jPyhkPVMoYiksZD1SKGIsZCksZT1lKGMsZCksYi5lZmZlY3RUYWd8PTEsZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMjplPXUoYik7bnVsbD09PWE/bnVsbD09PWIuc3RhdGVOb2RlPyhMYyhiLGIucGVuZGluZ1Byb3BzKSxEYihiLGMpLGQ9ITApOmQ9TWMoYixjKTpkPUViKGEsYixjKTtmPSExO3ZhciBoPWIudXBkYXRlUXVldWU7bnVsbCE9PWgmJm51bGwhPT1oLmNhcHR1cmVkVmFsdWVzJiYoZj1kPSEwKTtyZXR1cm4gbChhLGIsZCxlLGYsYyk7Y2FzZSAzOmE6aWYocChiKSxkPWIudXBkYXRlUXVldWUsbnVsbCE9PWQpe2Y9Yi5tZW1vaXplZFN0YXRlO2U9UWUoYSxiLGQsbnVsbCxudWxsLGMpO2IubWVtb2l6ZWRTdGF0ZT1lO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09ZCYmbnVsbCE9PWQuY2FwdHVyZWRWYWx1ZXMpZD1udWxsO2Vsc2UgaWYoZj09PWUpe1dhKCk7YT1yKGEsYik7YnJlYWsgYX1lbHNlIGQ9XG5lLmVsZW1lbnQ7Zj1iLnN0YXRlTm9kZTsobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKSYmZi5oeWRyYXRlJiZIKGIpPyhiLmVmZmVjdFRhZ3w9MixiLmNoaWxkPVllKGIsbnVsbCxkLGMpKTooV2EoKSxnKGEsYixkKSk7Yi5tZW1vaXplZFN0YXRlPWU7YT1iLmNoaWxkfWVsc2UgV2EoKSxhPXIoYSxiKTtyZXR1cm4gYTtjYXNlIDU6YTp7eChiKTtudWxsPT09YSYmQ2IoYik7ZT1iLnR5cGU7aD1iLm1lbW9pemVkUHJvcHM7ZD1iLnBlbmRpbmdQcm9wcztmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsO2lmKCFxKCkmJmg9PT1kKXtpZihoPWIubW9kZSYxJiZuKGUsZCkpYi5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO2lmKCFofHwxMDczNzQxODIzIT09Yyl7YT1yKGEsYik7YnJlYWsgYX19aD1kLmNoaWxkcmVuO1EoZSxkKT9oPW51bGw6ZiYmUShlLGYpJiYoYi5lZmZlY3RUYWd8PTE2KTt2KGEsYik7MTA3Mzc0MTgyMyE9PWMmJmIubW9kZSYxJiZuKGUsZCk/KGIuZXhwaXJhdGlvblRpbWU9XG4xMDczNzQxODIzLGIubWVtb2l6ZWRQcm9wcz1kLGE9bnVsbCk6KGcoYSxiLGgpLGIubWVtb2l6ZWRQcm9wcz1kLGE9Yi5jaGlsZCl9cmV0dXJuIGE7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmQ2IoYiksYi5tZW1vaXplZFByb3BzPWIucGVuZGluZ1Byb3BzLG51bGw7Y2FzZSA4OmIudGFnPTc7Y2FzZSA3OnJldHVybiBlPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09ZXx8KGU9Yi5tZW1vaXplZFByb3BzKSxkPWUuY2hpbGRyZW4sYi5zdGF0ZU5vZGU9bnVsbD09PWE/WWUoYixiLnN0YXRlTm9kZSxkLGMpOlhlKGIsYS5zdGF0ZU5vZGUsZCxjKSxiLm1lbW9pemVkUHJvcHM9ZSxiLnN0YXRlTm9kZTtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWU/KG51bGw9PT1hP2IuY2hpbGQ9WGUoYixudWxsLGUsYyk6ZyhhLGIsZSksYi5tZW1vaXplZFByb3BzPVxuZSxhPWIuY2hpbGQpOmE9cihhLGIpLGE7Y2FzZSAxNDpyZXR1cm4gYz1iLnR5cGUucmVuZGVyLGM9YyhiLnBlbmRpbmdQcm9wcyxiLnJlZiksZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYi5jaGlsZDtjYXNlIDEwOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLHEoKXx8Yi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTE6cmV0dXJuIGM9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4scSgpfHxudWxsIT09YyYmYi5tZW1vaXplZFByb3BzIT09Yz8oZyhhLGIsYyksYi5tZW1vaXplZFByb3BzPWMsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTM6cmV0dXJuIEIoYSxiLGMpO2Nhc2UgMTI6ZD1iLnR5cGU7Zj1iLnBlbmRpbmdQcm9wczt2YXIgdD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7aD1kLl9jaGFuZ2VkQml0cztpZihxKCl8fDAhPT1ofHx0IT09Zil7Yi5tZW1vaXplZFByb3BzPVxuZjt0PWYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO2lmKHZvaWQgMD09PXR8fG51bGw9PT10KXQ9MTA3Mzc0MTgyMztiLnN0YXRlTm9kZT10OzAhPT0oaCZ0KSYmeihiLGQsaCxjKTtjPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpO3JldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uICRlKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WGUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QWMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk5lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7TmUoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGJmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkFjKGMpO251bGwhPT1jJiZ6YyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmemMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gY2YoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEllJiZJZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZSZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVJlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBnPWQudmFsdWUsaD1kLnN0YWNrO2JmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChnLHtjb21wb25lbnRTdGFjazpudWxsIT09aD9oOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sYmYoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGRmPXt9O1xuZnVuY3Rpb24gZWYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1kZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShkZiksaz1hKGRmKSx2PWEoZGYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxkZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBmZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIix6YyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShqYSksaz1lKCExKSx2PWphO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGphO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGphO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbndkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGhmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24gamYoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGtmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTttYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9eWUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QWMoYSl9O09lKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrNTApLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPndnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3ZlPUljKCktUGM7cmV0dXJuIHhnPSh2ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjt5ZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHZnKXtCYXx8KEJhPSEwLEpiPXZnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bWMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7dGUody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OnRlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBIZSYmSGUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWpmKCksdD1lZihhLHUpLHk9Z2YodSk7dT1oZih1KTt2YXIgSD1mZihhKSxcbldhPVplKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj0kZShhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWFmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9Y2YoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHRlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2sseWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHhnPTIsdmU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHdnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGYpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBnPWsoYyk7Yz12KGMpP2woYyxnKTpnfWVsc2UgYz1qYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWY7T2UoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtoKGQsZSk7cmV0dXJuIGV9ZnVuY3Rpb24gYyhhKXthPUFkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfXZhciBkPWEuZ2V0UHVibGljSW5zdGFuY2U7YT1rZihhKTt2YXIgZT1hLnJlY2FsY3VsYXRlQ3VycmVudFRpbWUsZj1hLmNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIsaD1hLnNjaGVkdWxlV29yayxnPWEubGVnYWN5Q29udGV4dCxcbms9Zy5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCx2PWcuaXNDb250ZXh0UHJvdmlkZXIsbD1nLnByb2Nlc3NDaGlsZENvbnRleHQ7cmV0dXJue2NyZWF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyl7Yj1uZXcgeGUoMyxudWxsLG51bGwsYj8zOjApO2E9e2N1cnJlbnQ6Yixjb250YWluZXJJbmZvOmEscGVuZGluZ0NoaWxkcmVuOm51bGwscGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lOjAsZmluaXNoZWRXb3JrOm51bGwsY29udGV4dDpudWxsLHBlbmRpbmdDb250ZXh0Om51bGwsaHlkcmF0ZTpjLHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOjAsZmlyc3RCYXRjaDpudWxsLG5leHRTY2hlZHVsZWRSb290Om51bGx9O3JldHVybiBiLnN0YXRlTm9kZT1hfSx1cGRhdGVDb250YWluZXI6ZnVuY3Rpb24oYSxjLGQsZyl7dmFyIGg9Yy5jdXJyZW50LGs9ZSgpO2g9ZihoKTtyZXR1cm4gYihhLGMsZCxrLGgsZyl9LHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWU6ZnVuY3Rpb24oYSxcbmMsZCxmLGcpe3ZhciBoPWUoKTtyZXR1cm4gYihhLGMsZCxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxyZXF1ZXN0V29yazphLnJlcXVlc3RXb3JrLGNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb246YS5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLGJhdGNoZWRVcGRhdGVzOmEuYmF0Y2hlZFVwZGF0ZXMsdW5iYXRjaGVkVXBkYXRlczphLnVuYmF0Y2hlZFVwZGF0ZXMsZGVmZXJyZWRVcGRhdGVzOmEuZGVmZXJyZWRVcGRhdGVzLHN5bmNVcGRhdGVzOmEuc3luY1VwZGF0ZXMsaW50ZXJhY3RpdmVVcGRhdGVzOmEuaW50ZXJhY3RpdmVVcGRhdGVzLGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzOmEuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hDb250cm9sbGVkOmEuZmx1c2hDb250cm9sbGVkLGZsdXNoU3luYzphLmZsdXNoU3luYyxnZXRQdWJsaWNSb290SW5zdGFuY2U6ZnVuY3Rpb24oYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGQoYS5jaGlsZC5zdGF0ZU5vZGUpO1xuZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxmaW5kSG9zdEluc3RhbmNlOmMsZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHM6ZnVuY3Rpb24oYSl7YT1CZChhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0saW5qZWN0SW50b0RldlRvb2xzOmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIEdlKEEoe30sYSx7ZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSl9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH19KSl9fX12YXIgbWY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpsZn0pLG5mPW1mJiZsZnx8bWYsb2Y9bmZbXCJkZWZhdWx0XCJdP25mW1wiZGVmYXVsdFwiXTpuZjtcbmZ1bmN0aW9uIHBmKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6cWMsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319dmFyIHFmPVwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cscmY9dm9pZCAwO3JmPXFmP2Z1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfTt2YXIgc2Y9dm9pZCAwLHRmPXZvaWQgMDtcbmlmKG0uY2FuVXNlRE9NKWlmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiByZXF1ZXN0SWRsZUNhbGxiYWNrfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgY2FuY2VsSWRsZUNhbGxiYWNrKXt2YXIgdWY9bnVsbCx2Zj0hMSx3Zj0tMSx4Zj0hMSx5Zj0wLHpmPTMzLEFmPTMzLEJmPXZvaWQgMDtCZj1xZj97ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtcGVyZm9ybWFuY2Uubm93KCk7cmV0dXJuIDA8YT9hOjB9fTp7ZGlkVGltZW91dDohMSx0aW1lUmVtYWluaW5nOmZ1bmN0aW9uKCl7dmFyIGE9eWYtRGF0ZS5ub3coKTtyZXR1cm4gMDxhP2E6MH19O3ZhciBDZj1cIl9fcmVhY3RJZGxlQ2FsbGJhY2skXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oYSl7aWYoYS5zb3VyY2U9PT13aW5kb3cmJmEuZGF0YT09PUNmKXt2Zj0hMTthPXJmKCk7aWYoMD49eWYtYSlpZigtMSE9PVxud2YmJndmPD1hKUJmLmRpZFRpbWVvdXQ9ITA7ZWxzZXt4Znx8KHhmPSEwLHJlcXVlc3RBbmltYXRpb25GcmFtZShEZikpO3JldHVybn1lbHNlIEJmLmRpZFRpbWVvdXQ9ITE7d2Y9LTE7YT11Zjt1Zj1udWxsO251bGwhPT1hJiZhKEJmKX19LCExKTt2YXIgRGY9ZnVuY3Rpb24oYSl7eGY9ITE7dmFyIGI9YS15ZitBZjtiPEFmJiZ6ZjxBZj8oOD5iJiYoYj04KSxBZj1iPHpmP3pmOmIpOnpmPWI7eWY9YStBZjt2Znx8KHZmPSEwLHdpbmRvdy5wb3N0TWVzc2FnZShDZixcIipcIikpfTtzZj1mdW5jdGlvbihhLGIpe3VmPWE7bnVsbCE9YiYmXCJudW1iZXJcIj09PXR5cGVvZiBiLnRpbWVvdXQmJih3Zj1yZigpK2IudGltZW91dCk7eGZ8fCh4Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRGYpKTtyZXR1cm4gMH07dGY9ZnVuY3Rpb24oKXt1Zj1udWxsO3ZmPSExO3dmPS0xfX1lbHNlIHNmPXdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrLHRmPXdpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2s7ZWxzZSBzZj1cbmZ1bmN0aW9uKGEpe3JldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YSh7dGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3JldHVybiBJbmZpbml0eX0sZGlkVGltZW91dDohMX0pfSl9LHRmPWZ1bmN0aW9uKGEpe2NsZWFyVGltZW91dChhKX07ZnVuY3Rpb24gRWYoYSl7dmFyIGI9XCJcIjtiYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbD09YXx8XCJzdHJpbmdcIiE9PXR5cGVvZiBhJiZcIm51bWJlclwiIT09dHlwZW9mIGF8fChiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEZmKGEsYil7YT1BKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RWYoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gR2YoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK2M7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEhmKGEsYil7dmFyIGM9Yi52YWx1ZTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpudWxsIT1jP2M6Yi5kZWZhdWx0VmFsdWUsd2FzTXVsdGlwbGU6ISFiLm11bHRpcGxlfX1mdW5jdGlvbiBJZihhLGIpe251bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjkxXCIpOnZvaWQgMDtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbD09YyYmKGM9Yi5kZWZhdWx0VmFsdWUsYj1iLmNoaWxkcmVuLG51bGwhPWImJihudWxsIT1jP0QoXCI5MlwiKTp2b2lkIDAsQXJyYXkuaXNBcnJheShiKSYmKDE+PWIubGVuZ3RoP3ZvaWQgMDpEKFwiOTNcIiksYj1iWzBdKSxjPVwiXCIrYiksbnVsbD09YyYmKGM9XCJcIikpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlwiXCIrY319XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIudmFsdWU7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1iLmRlZmF1bHRWYWx1ZSYmKGEuZGVmYXVsdFZhbHVlPWIuZGVmYXVsdFZhbHVlKX1mdW5jdGlvbiBMZihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiYoYS52YWx1ZT1iKX12YXIgTWY9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmYoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPZihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmYoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGY9dm9pZCAwLFFmPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1mLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BmPVBmfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BmLmlubmVySFRNTD1cIlxceDNjc3ZnXFx4M2VcIitiK1wiXFx4M2Mvc3ZnXFx4M2VcIjtmb3IoYj1QZi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSZihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIFNmPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsXG5zdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LFRmPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhTZikuZm9yRWFjaChmdW5jdGlvbihhKXtUZi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1NmW2JdPVNmW2FdfSl9KTtcbmZ1bmN0aW9uIFVmKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKTt2YXIgZT1jO3ZhciBmPWJbY107ZT1udWxsPT1mfHxcImJvb2xlYW5cIj09PXR5cGVvZiBmfHxcIlwiPT09Zj9cIlwiOmR8fFwibnVtYmVyXCIhPT10eXBlb2YgZnx8MD09PWZ8fFNmLmhhc093blByb3BlcnR5KGUpJiZTZltlXT8oXCJcIitmKS50cmltKCk6ZitcInB4XCI7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBWZj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gV2YoYSxiLGMpe2ImJihWZlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/RChcIjEzN1wiLGEsYygpKTp2b2lkIDApLG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJihudWxsIT1iLmNoaWxkcmVuP0QoXCI2MFwiKTp2b2lkIDAsXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTD92b2lkIDA6RChcIjYxXCIpKSxudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGU/RChcIjYyXCIsYygpKTp2b2lkIDApfVxuZnVuY3Rpb24gWGYoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBZZj1NZi5odG1sLFpmPUMudGhhdFJldHVybnMoXCJcIik7XG5mdW5jdGlvbiAkZihhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1qZShhKTtiPXVhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXt2YXIgZT1iW2RdO2MuaGFzT3duUHJvcGVydHkoZSkmJmNbZV18fChcInRvcFNjcm9sbFwiPT09ZT9ZZChcInRvcFNjcm9sbFwiLFwic2Nyb2xsXCIsYSk6XCJ0b3BGb2N1c1wiPT09ZXx8XCJ0b3BCbHVyXCI9PT1lPyhZZChcInRvcEZvY3VzXCIsXCJmb2N1c1wiLGEpLFlkKFwidG9wQmx1clwiLFwiYmx1clwiLGEpLGMudG9wQmx1cj0hMCxjLnRvcEZvY3VzPSEwKTpcInRvcENhbmNlbFwiPT09ZT8oaGMoXCJjYW5jZWxcIiwhMCkmJllkKFwidG9wQ2FuY2VsXCIsXCJjYW5jZWxcIixhKSxjLnRvcENhbmNlbD0hMCk6XCJ0b3BDbG9zZVwiPT09ZT8oaGMoXCJjbG9zZVwiLCEwKSYmWWQoXCJ0b3BDbG9zZVwiLFwiY2xvc2VcIixhKSxjLnRvcENsb3NlPSEwKTplZS5oYXNPd25Qcm9wZXJ0eShlKSYmVyhlLGVlW2VdLGEpLGNbZV09ITApfX1cbmZ1bmN0aW9uIGFnKGEsYixjLGQpe2M9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7ZD09PVlmJiYoZD1OZihhKSk7ZD09PVlmP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WGYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZmUpZmUuaGFzT3duUHJvcGVydHkoZikmJlcoZixmZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO2Y9VWMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUZmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOkhmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpmKGEsYyk7Zj1JZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVdmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1VmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZRZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZSZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5SZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHRhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVGMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/R2YoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkdmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVVjKGEsYyk7ZD1VYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9RmYoYSxjKTtkPUZmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SWYoYSxjKTtkPUlmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9V2YoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih0YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodGEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWGMoYSxlKTtYZihjLGQpO2Q9WGYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9VZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UWYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1JmKGEsZyk6VGMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlljKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9HZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5HZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6R2YoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBmZSlmZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGZlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpWYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpIZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmYoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1XZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dGEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjprYyhhKTskYyhhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmtjKGEpO0xmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBtZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgbmc9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDptZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpZYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVZhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTtsYyhkKTtZYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkdmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtWYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG5nKTt2YXIgb2c9bnVsbCxwZz1udWxsO1xuZnVuY3Rpb24gcWcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1xZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgcmc7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnFnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnFnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cWcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHJnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9cmcucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHNnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXNnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgcmc7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG5zZy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgcmc7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307c2cucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHJnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xuc2cucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHFnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdGcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdWcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9b2Yoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpPZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9T2YoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBPZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe29nPVVkO3ZhciBhPWVhKCk7aWYobWUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtwZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtWZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1wZyxiPWVhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmaGEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihtZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbGIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPWxlKGMsYSk7dmFyIGY9bGUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXBnPW51bGw7VmQob2cpO29nPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtTYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHVnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpyZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3VnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtTYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1JmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbU2FdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbWcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnNmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dGZ9KSxDZz1YOyRiPUNnLmJhdGNoZWRVcGRhdGVzO2FjPUNnLmludGVyYWN0aXZlVXBkYXRlcztiYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgc2coYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dGcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3RnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBwZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKGIpcmV0dXJuIFguZmluZEhvc3RJbnN0YW5jZShiKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjEzXCIsT2JqZWN0LmtleXMoYSkpfSxoeWRyYXRlOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITAsYyl9LHJlbmRlcjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIEVnKG51bGwsYSxiLCExLGMpfSx1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjpmdW5jdGlvbihhLGIsYyxkKXtudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXI/RChcIjM4XCIpOnZvaWQgMDtyZXR1cm4gRWcoYSxiLGMsITEsZCl9LHVubW91bnRDb21wb25lbnRBdE5vZGU6ZnVuY3Rpb24oYSl7dGcoYSk/dm9pZCAwOlxuRChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGx9KX0pLCEwKTohMX0sdW5zdGFibGVfY3JlYXRlUG9ydGFsOmZ1bmN0aW9uKCl7cmV0dXJuIEZnLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpfSx1bnN0YWJsZV9iYXRjaGVkVXBkYXRlczpYLmJhdGNoZWRVcGRhdGVzLHVuc3RhYmxlX2RlZmVycmVkVXBkYXRlczpYLmRlZmVycmVkVXBkYXRlcyxmbHVzaFN5bmM6WC5mbHVzaFN5bmMsdW5zdGFibGVfZmx1c2hDb250cm9sbGVkOlguZmx1c2hDb250cm9sbGVkLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntFdmVudFBsdWdpbkh1YjpRYSxFdmVudFBsdWdpblJlZ2lzdHJ5OnhhLEV2ZW50UHJvcGFnYXRvcnM6amIsUmVhY3RDb250cm9sbGVkQ29tcG9uZW50OlpiLFJlYWN0RE9NQ29tcG9uZW50VHJlZTpYYSxcblJlYWN0RE9NRXZlbnRMaXN0ZW5lcjpaZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgc2coYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtYLmluamVjdEludG9EZXZUb29scyh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6VGEsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTt2YXIgSGc9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDpHZ30pLElnPUhnJiZHZ3x8SGc7bW9kdWxlLmV4cG9ydHM9SWdbXCJkZWZhdWx0XCJdP0lnW1wiZGVmYXVsdFwiXTpJZztcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgQUxMX0lOSVRJQUxJWkVSUyA9IFtdO1xudmFyIFJFQURZX0lOSVRJQUxJWkVSUyA9IFtdO1xuXG5mdW5jdGlvbiBpc1dlYnBhY2tSZWFkeShnZXRNb2R1bGVJZHMpIHtcbiAgaWYgKCh0eXBlb2YgX193ZWJwYWNrX21vZHVsZXNfXyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoX193ZWJwYWNrX21vZHVsZXNfXykpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBnZXRNb2R1bGVJZHMoKS5ldmVyeShmdW5jdGlvbiAobW9kdWxlSWQpIHtcbiAgICByZXR1cm4gdHlwZW9mIG1vZHVsZUlkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0gIT09ICd1bmRlZmluZWQnO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZChsb2FkZXIpIHtcbiAgdmFyIHByb21pc2UgPSBsb2FkZXIoKTtcblxuICB2YXIgc3RhdGUgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBsb2FkZWQ6IG51bGwsXG4gICAgZXJyb3I6IG51bGxcbiAgfTtcblxuICBzdGF0ZS5wcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChsb2FkZWQpIHtcbiAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgc3RhdGUubG9hZGVkID0gbG9hZGVkO1xuICAgIHJldHVybiBsb2FkZWQ7XG4gIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5sb2FkaW5nID0gZmFsc2U7XG4gICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gICAgdGhyb3cgZXJyO1xuICB9KTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIGxvYWRNYXAob2JqKSB7XG4gIHZhciBzdGF0ZSA9IHtcbiAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICBsb2FkZWQ6IHt9LFxuICAgIGVycm9yOiBudWxsXG4gIH07XG5cbiAgdmFyIHByb21pc2VzID0gW107XG5cbiAgdHJ5IHtcbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvYWQob2JqW2tleV0pO1xuXG4gICAgICBpZiAoIXJlc3VsdC5sb2FkaW5nKSB7XG4gICAgICAgIHN0YXRlLmxvYWRlZFtrZXldID0gcmVzdWx0LmxvYWRlZDtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcHJvbWlzZXMucHVzaChyZXN1bHQucHJvbWlzZSk7XG5cbiAgICAgIHJlc3VsdC5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICBzdGF0ZS5sb2FkZWRba2V5XSA9IHJlcztcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgc3RhdGUuZXJyb3IgPSBlcnI7XG4gIH1cblxuICBzdGF0ZS5wcm9taXNlID0gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHN0YXRlLmxvYWRpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gcmVzO1xuICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgc3RhdGUubG9hZGluZyA9IGZhbHNlO1xuICAgIHRocm93IGVycjtcbiAgfSk7XG5cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqLmRlZmF1bHQgOiBvYmo7XG59XG5cbmZ1bmN0aW9uIHJlbmRlcihsb2FkZWQsIHByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHJlc29sdmUobG9hZGVkKSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2FkYWJsZUNvbXBvbmVudChsb2FkRm4sIG9wdGlvbnMpIHtcbiAgdmFyIF9jbGFzcywgX3RlbXA7XG5cbiAgaWYgKCFvcHRpb25zLmxvYWRpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlYWN0LWxvYWRhYmxlIHJlcXVpcmVzIGEgYGxvYWRpbmdgIGNvbXBvbmVudCcpO1xuICB9XG5cbiAgdmFyIG9wdHMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBsb2FkZXI6IG51bGwsXG4gICAgbG9hZGluZzogbnVsbCxcbiAgICBkZWxheTogMjAwLFxuICAgIHRpbWVvdXQ6IG51bGwsXG4gICAgcmVuZGVyOiByZW5kZXIsXG4gICAgd2VicGFjazogbnVsbCxcbiAgICBtb2R1bGVzOiBudWxsXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciByZXMgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgaWYgKCFyZXMpIHtcbiAgICAgIHJlcyA9IGxvYWRGbihvcHRzLmxvYWRlcik7XG4gICAgfVxuICAgIHJldHVybiByZXMucHJvbWlzZTtcbiAgfVxuXG4gIEFMTF9JTklUSUFMSVpFUlMucHVzaChpbml0KTtcblxuICBpZiAodHlwZW9mIG9wdHMud2VicGFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFJFQURZX0lOSVRJQUxJWkVSUy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc1dlYnBhY2tSZWFkeShvcHRzLndlYnBhY2spKSB7XG4gICAgICAgIHJldHVybiBpbml0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX3RlbXAgPSBfY2xhc3MgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkYWJsZUNvbXBvbmVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkYWJsZUNvbXBvbmVudChwcm9wcykge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRhYmxlQ29tcG9uZW50KTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICAgIGluaXQoKTtcblxuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIGVycm9yOiByZXMuZXJyb3IsXG4gICAgICAgIHBhc3REZWxheTogZmFsc2UsXG4gICAgICAgIHRpbWVkT3V0OiBmYWxzZSxcbiAgICAgICAgbG9hZGluZzogcmVzLmxvYWRpbmcsXG4gICAgICAgIGxvYWRlZDogcmVzLmxvYWRlZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBMb2FkYWJsZUNvbXBvbmVudC5wcmVsb2FkID0gZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAgICAgIHJldHVybiBpbml0KCk7XG4gICAgfTtcblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5fbW91bnRlZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLmNvbnRleHQubG9hZGFibGUgJiYgQXJyYXkuaXNBcnJheShvcHRzLm1vZHVsZXMpKSB7XG4gICAgICAgIG9wdHMubW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICAgICAgX3RoaXMyLmNvbnRleHQubG9hZGFibGUucmVwb3J0KG1vZHVsZU5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXMubG9hZGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0cy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9wdHMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgcGFzdERlbGF5OiB0cnVlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RlbGF5ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyBwYXN0RGVsYXk6IHRydWUgfSk7XG4gICAgICAgICAgfSwgb3B0cy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvcHRzLnRpbWVvdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyB0aW1lZE91dDogdHJ1ZSB9KTtcbiAgICAgICAgfSwgb3B0cy50aW1lb3V0KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKCFfdGhpczIuX21vdW50ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgIGVycm9yOiByZXMuZXJyb3IsXG4gICAgICAgICAgbG9hZGVkOiByZXMubG9hZGVkLFxuICAgICAgICAgIGxvYWRpbmc6IHJlcy5sb2FkaW5nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF90aGlzMi5fY2xlYXJUaW1lb3V0cygpO1xuICAgICAgfTtcblxuICAgICAgcmVzLnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZSgpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5fbW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0cygpO1xuICAgIH07XG5cbiAgICBMb2FkYWJsZUNvbXBvbmVudC5wcm90b3R5cGUuX2NsZWFyVGltZW91dHMgPSBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0cygpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9kZWxheSk7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgfTtcblxuICAgIExvYWRhYmxlQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5sb2FkaW5nIHx8IHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQob3B0cy5sb2FkaW5nLCB7XG4gICAgICAgICAgaXNMb2FkaW5nOiB0aGlzLnN0YXRlLmxvYWRpbmcsXG4gICAgICAgICAgcGFzdERlbGF5OiB0aGlzLnN0YXRlLnBhc3REZWxheSxcbiAgICAgICAgICB0aW1lZE91dDogdGhpcy5zdGF0ZS50aW1lZE91dCxcbiAgICAgICAgICBlcnJvcjogdGhpcy5zdGF0ZS5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZS5sb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIG9wdHMucmVuZGVyKHRoaXMuc3RhdGUubG9hZGVkLCB0aGlzLnByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gTG9hZGFibGVDb21wb25lbnQ7XG4gIH0oUmVhY3QuQ29tcG9uZW50KSwgX2NsYXNzLmNvbnRleHRUeXBlcyA9IHtcbiAgICBsb2FkYWJsZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHJlcG9ydDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pXG4gIH0sIF90ZW1wO1xufVxuXG5mdW5jdGlvbiBMb2FkYWJsZShvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVMb2FkYWJsZUNvbXBvbmVudChsb2FkLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gTG9hZGFibGVNYXAob3B0cykge1xuICBpZiAodHlwZW9mIG9wdHMucmVuZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMb2FkYWJsZU1hcCByZXF1aXJlcyBhIGByZW5kZXIobG9hZGVkLCBwcm9wcylgIGZ1bmN0aW9uJyk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlTG9hZGFibGVDb21wb25lbnQobG9hZE1hcCwgb3B0cyk7XG59XG5cbkxvYWRhYmxlLk1hcCA9IExvYWRhYmxlTWFwO1xuXG52YXIgQ2FwdHVyZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50Mikge1xuICBfaW5oZXJpdHMoQ2FwdHVyZSwgX1JlYWN0JENvbXBvbmVudDIpO1xuXG4gIGZ1bmN0aW9uIENhcHR1cmUoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcHR1cmUpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgQ2FwdHVyZS5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsb2FkYWJsZToge1xuICAgICAgICByZXBvcnQ6IHRoaXMucHJvcHMucmVwb3J0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBDYXB0dXJlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm9ubHkodGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIENhcHR1cmU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbkNhcHR1cmUucHJvcFR5cGVzID0ge1xuICByZXBvcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbn07XG5DYXB0dXJlLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICBsb2FkYWJsZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByZXBvcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5Mb2FkYWJsZS5DYXB0dXJlID0gQ2FwdHVyZTtcblxuZnVuY3Rpb24gZmx1c2hJbml0aWFsaXplcnMoaW5pdGlhbGl6ZXJzKSB7XG4gIHZhciBwcm9taXNlcyA9IFtdO1xuXG4gIHdoaWxlIChpbml0aWFsaXplcnMubGVuZ3RoKSB7XG4gICAgdmFyIGluaXQgPSBpbml0aWFsaXplcnMucG9wKCk7XG4gICAgcHJvbWlzZXMucHVzaChpbml0KCkpO1xuICB9XG5cbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaW5pdGlhbGl6ZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZsdXNoSW5pdGlhbGl6ZXJzKGluaXRpYWxpemVycyk7XG4gICAgfVxuICB9KTtcbn1cblxuTG9hZGFibGUucHJlbG9hZEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBmbHVzaEluaXRpYWxpemVycyhBTExfSU5JVElBTElaRVJTKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gIH0pO1xufTtcblxuTG9hZGFibGUucHJlbG9hZFJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIFdlIGFsd2F5cyB3aWxsIHJlc29sdmUsIGVycm9ycyBzaG91bGQgYmUgaGFuZGxlZCB3aXRoaW4gbG9hZGluZyBVSXMuXG4gICAgZmx1c2hJbml0aWFsaXplcnMoUkVBRFlfSU5JVElBTElaRVJTKS50aGVuKHJlc29sdmUsIHJlc29sdmUpO1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9hZGFibGU7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICB1cmw6ICcvJyxcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gJy8nXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsICdBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnQnKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT4nKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyb3dzZXJSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2hhc2hiYW5nJywgJ25vc2xhc2gnLCAnc2xhc2gnXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgcmlnaHQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3JlcGxhY2UnLCAndG8nLCAnaW5uZXJSZWYnXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciBocmVmID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmNyZWF0ZUhyZWYodHlwZW9mIHRvID09PSAnc3RyaW5nJyA/IHsgcGF0aG5hbWU6IHRvIH0gOiB0byk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9ICcnICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBwYXRoID0gX29wdGlvbnMkcGF0aCA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29wdGlvbnMkcGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09ICcvJyAmJiB1cmwgPT09ICcnID8gJy8nIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIHJldHVybiBjb21wb25lbnQgPyAvLyBjb21wb25lbnQgcHJvcCBnZXRzIGZpcnN0IHByaW9yaXR5LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsIDogcmVuZGVyID8gLy8gcmVuZGVyIHByb3AgaXMgbmV4dCwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IGNoaWxkcmVuID8gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmLmFyaWFDdXJyZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ3RvJywgJ2V4YWN0JywgJ3N0cmljdCcsICdsb2NhdGlvbicsICdhY3RpdmVDbGFzc05hbWUnLCAnY2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ3N0eWxlJywgJ2lzQWN0aXZlJywgJ2FyaWFDdXJyZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogKHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG8pKSA9PT0gJ29iamVjdCcgPyB0by5wYXRobmFtZSA6IHRvLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbignICcpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBhcmlhQ3VycmVudDogUHJvcFR5cGVzLm9uZU9mKFsncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ3RydWUnXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuICBhcmlhQ3VycmVudDogJ3RydWUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQnO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICdoaXN0b3J5JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1lvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3VcXCdyZSBjdXJyZW50bHkgb246ICcgKyAoJ1wiJyArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyAnXCInKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdXNoID0gX3Byb3BzLnB1c2gsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvO1xuXG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBjcmVhdGVQYXRoLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5L1BhdGhVdGlscyc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxudmFyIG5vcm1hbGl6ZUxvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24ob2JqZWN0KSB7XG4gIHZhciBfb2JqZWN0JHBhdGhuYW1lID0gb2JqZWN0LnBhdGhuYW1lLFxuICAgICAgcGF0aG5hbWUgPSBfb2JqZWN0JHBhdGhuYW1lID09PSB1bmRlZmluZWQgPyAnLycgOiBfb2JqZWN0JHBhdGhuYW1lLFxuICAgICAgX29iamVjdCRzZWFyY2ggPSBvYmplY3Quc2VhcmNoLFxuICAgICAgc2VhcmNoID0gX29iamVjdCRzZWFyY2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRzZWFyY2gsXG4gICAgICBfb2JqZWN0JGhhc2ggPSBvYmplY3QuaGFzaCxcbiAgICAgIGhhc2ggPSBfb2JqZWN0JGhhc2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRoYXNoO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKGxvY2F0aW9uKSA6IG5vcm1hbGl6ZUxvY2F0aW9uKGxvY2F0aW9uKTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj4nLCBtZXRob2ROYW1lKTtcbiAgfTtcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxudmFyIFN0YXRpY1JvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY1JvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKF90aGlzLnByb3BzLmJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdQVVNIJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYmFzZW5hbWUnLCAnY29udGV4dCcsICdsb2NhdGlvbiddKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiAnUE9QJyxcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoJ2dvJyksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoJ2dvQmFjaycpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKCdnb0ZvcndhcmQnKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6ICcnLFxuICBsb2NhdGlvbjogJy8nXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSByZXR1cm47XG5cbiAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoJztcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGgnO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFsnd3JhcHBlZENvbXBvbmVudFJlZiddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHsgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmIH0pKTtcbiAgICAgIH0gfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9ICd3aXRoUm91dGVyKCcgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArICcpJztcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucykpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzKTtcbiAgICBnbG9iYWwuaW5kZXggPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuICB2YXIgY2FsY3VsYXRlUmdiYSA9IGV4cG9ydHMuY2FsY3VsYXRlUmdiYSA9IGZ1bmN0aW9uIGNhbGN1bGF0ZVJnYmEoY29sb3IsIG9wYWNpdHkpIHtcbiAgICBpZiAoY29sb3JbMF0gPT09ICcjJykge1xuICAgICAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgICB9XG5cbiAgICBpZiAoY29sb3IubGVuZ3RoID09PSAzKSB7XG4gICAgICB2YXIgcmVzID0gJyc7XG4gICAgICBjb2xvci5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICByZXMgKz0gYztcbiAgICAgICAgcmVzICs9IGM7XG4gICAgICB9KTtcbiAgICAgIGNvbG9yID0gcmVzO1xuICAgIH1cblxuICAgIHZhciByZ2JWYWx1ZXMgPSBjb2xvci5tYXRjaCgvLnsyfS9nKS5tYXAoZnVuY3Rpb24gKGhleCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KGhleCwgMTYpO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gICAgcmV0dXJuICdyZ2JhKCcgKyByZ2JWYWx1ZXMgKyAnLCAnICsgb3BhY2l0eSArICcpJztcbiAgfTtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ21vZHVsZScsICcuL3NwaW5uZXJzL0JhckxvYWRlcicsICcuL3NwaW5uZXJzL0JlYXRMb2FkZXInLCAnLi9zcGlubmVycy9Cb3VuY2VMb2FkZXInLCAnLi9zcGlubmVycy9DaXJjbGVMb2FkZXInLCAnLi9zcGlubmVycy9DbGlwTG9hZGVyJywgJy4vc3Bpbm5lcnMvQ2xpbWJpbmdCb3hMb2FkZXInLCAnLi9zcGlubmVycy9Eb3RMb2FkZXInLCAnLi9zcGlubmVycy9GYWRlTG9hZGVyJywgJy4vc3Bpbm5lcnMvR3JpZExvYWRlcicsICcuL3NwaW5uZXJzL0hhc2hMb2FkZXInLCAnLi9zcGlubmVycy9Nb29uTG9hZGVyJywgJy4vc3Bpbm5lcnMvUGFjbWFuTG9hZGVyJywgJy4vc3Bpbm5lcnMvUHJvcGFnYXRlTG9hZGVyJywgJy4vc3Bpbm5lcnMvUHVsc2VMb2FkZXInLCAnLi9zcGlubmVycy9SaW5nTG9hZGVyJywgJy4vc3Bpbm5lcnMvUmlzZUxvYWRlcicsICcuL3NwaW5uZXJzL1JvdGF0ZUxvYWRlcicsICcuL3NwaW5uZXJzL1NjYWxlTG9hZGVyJywgJy4vc3Bpbm5lcnMvU3luY0xvYWRlciddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkobW9kdWxlLCByZXF1aXJlKCcuL3NwaW5uZXJzL0JhckxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0JlYXRMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9Cb3VuY2VMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9DaXJjbGVMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9DbGlwTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvQ2xpbWJpbmdCb3hMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9Eb3RMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9GYWRlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvR3JpZExvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL0hhc2hMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9Nb29uTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUGFjbWFuTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUHJvcGFnYXRlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUHVsc2VMb2FkZXInKSwgcmVxdWlyZSgnLi9zcGlubmVycy9SaW5nTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvUmlzZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1JvdGF0ZUxvYWRlcicpLCByZXF1aXJlKCcuL3NwaW5uZXJzL1NjYWxlTG9hZGVyJyksIHJlcXVpcmUoJy4vc3Bpbm5lcnMvU3luY0xvYWRlcicpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLCBnbG9iYWwuQmFyTG9hZGVyLCBnbG9iYWwuQmVhdExvYWRlciwgZ2xvYmFsLkJvdW5jZUxvYWRlciwgZ2xvYmFsLkNpcmNsZUxvYWRlciwgZ2xvYmFsLkNsaXBMb2FkZXIsIGdsb2JhbC5DbGltYmluZ0JveExvYWRlciwgZ2xvYmFsLkRvdExvYWRlciwgZ2xvYmFsLkZhZGVMb2FkZXIsIGdsb2JhbC5HcmlkTG9hZGVyLCBnbG9iYWwuSGFzaExvYWRlciwgZ2xvYmFsLk1vb25Mb2FkZXIsIGdsb2JhbC5QYWNtYW5Mb2FkZXIsIGdsb2JhbC5Qcm9wYWdhdGVMb2FkZXIsIGdsb2JhbC5QdWxzZUxvYWRlciwgZ2xvYmFsLlJpbmdMb2FkZXIsIGdsb2JhbC5SaXNlTG9hZGVyLCBnbG9iYWwuUm90YXRlTG9hZGVyLCBnbG9iYWwuU2NhbGVMb2FkZXIsIGdsb2JhbC5TeW5jTG9hZGVyKTtcbiAgICBnbG9iYWwuaW5kZXggPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKG1vZHVsZSwgX0JhckxvYWRlciwgX0JlYXRMb2FkZXIsIF9Cb3VuY2VMb2FkZXIsIF9DaXJjbGVMb2FkZXIsIF9DbGlwTG9hZGVyLCBfQ2xpbWJpbmdCb3hMb2FkZXIsIF9Eb3RMb2FkZXIsIF9GYWRlTG9hZGVyLCBfR3JpZExvYWRlciwgX0hhc2hMb2FkZXIsIF9Nb29uTG9hZGVyLCBfUGFjbWFuTG9hZGVyLCBfUHJvcGFnYXRlTG9hZGVyLCBfUHVsc2VMb2FkZXIsIF9SaW5nTG9hZGVyLCBfUmlzZUxvYWRlciwgX1JvdGF0ZUxvYWRlciwgX1NjYWxlTG9hZGVyLCBfU3luY0xvYWRlcikge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIF9CYXJMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmFyTG9hZGVyKTtcblxuICB2YXIgX0JlYXRMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmVhdExvYWRlcik7XG5cbiAgdmFyIF9Cb3VuY2VMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQm91bmNlTG9hZGVyKTtcblxuICB2YXIgX0NpcmNsZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DaXJjbGVMb2FkZXIpO1xuXG4gIHZhciBfQ2xpcExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGlwTG9hZGVyKTtcblxuICB2YXIgX0NsaW1iaW5nQm94TG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NsaW1iaW5nQm94TG9hZGVyKTtcblxuICB2YXIgX0RvdExvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Eb3RMb2FkZXIpO1xuXG4gIHZhciBfRmFkZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GYWRlTG9hZGVyKTtcblxuICB2YXIgX0dyaWRMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfR3JpZExvYWRlcik7XG5cbiAgdmFyIF9IYXNoTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hhc2hMb2FkZXIpO1xuXG4gIHZhciBfTW9vbkxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Nb29uTG9hZGVyKTtcblxuICB2YXIgX1BhY21hbkxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYWNtYW5Mb2FkZXIpO1xuXG4gIHZhciBfUHJvcGFnYXRlTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3BhZ2F0ZUxvYWRlcik7XG5cbiAgdmFyIF9QdWxzZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QdWxzZUxvYWRlcik7XG5cbiAgdmFyIF9SaW5nTG9hZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JpbmdMb2FkZXIpO1xuXG4gIHZhciBfUmlzZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SaXNlTG9hZGVyKTtcblxuICB2YXIgX1JvdGF0ZUxvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Sb3RhdGVMb2FkZXIpO1xuXG4gIHZhciBfU2NhbGVMb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2NhbGVMb2FkZXIpO1xuXG4gIHZhciBfU3luY0xvYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jTG9hZGVyKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQmFyTG9hZGVyOiBfQmFyTG9hZGVyMi5kZWZhdWx0LFxuICAgIEJlYXRMb2FkZXI6IF9CZWF0TG9hZGVyMi5kZWZhdWx0LFxuICAgIEJvdW5jZUxvYWRlcjogX0JvdW5jZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBDaXJjbGVMb2FkZXI6IF9DaXJjbGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgQ2xpcExvYWRlcjogX0NsaXBMb2FkZXIyLmRlZmF1bHQsXG4gICAgQ2xpbWJpbmdCb3hMb2FkZXI6IF9DbGltYmluZ0JveExvYWRlcjIuZGVmYXVsdCxcbiAgICBEb3RMb2FkZXI6IF9Eb3RMb2FkZXIyLmRlZmF1bHQsXG4gICAgRmFkZUxvYWRlcjogX0ZhZGVMb2FkZXIyLmRlZmF1bHQsXG4gICAgR3JpZExvYWRlcjogX0dyaWRMb2FkZXIyLmRlZmF1bHQsXG4gICAgSGFzaExvYWRlcjogX0hhc2hMb2FkZXIyLmRlZmF1bHQsXG4gICAgTW9vbkxvYWRlcjogX01vb25Mb2FkZXIyLmRlZmF1bHQsXG4gICAgUGFjbWFuTG9hZGVyOiBfUGFjbWFuTG9hZGVyMi5kZWZhdWx0LFxuICAgIFByb3BhZ2F0ZUxvYWRlcjogX1Byb3BhZ2F0ZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBQdWxzZUxvYWRlcjogX1B1bHNlTG9hZGVyMi5kZWZhdWx0LFxuICAgIFJpbmdMb2FkZXI6IF9SaW5nTG9hZGVyMi5kZWZhdWx0LFxuICAgIFJpc2VMb2FkZXI6IF9SaXNlTG9hZGVyMi5kZWZhdWx0LFxuICAgIFJvdGF0ZUxvYWRlcjogX1JvdGF0ZUxvYWRlcjIuZGVmYXVsdCxcbiAgICBTY2FsZUxvYWRlcjogX1NjYWxlTG9hZGVyMi5kZWZhdWx0LFxuICAgIFN5bmNMb2FkZXI6IF9TeW5jTG9hZGVyMi5kZWZhdWx0XG4gIH07XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnLCAnLi4vaGVscGVycyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpLCByZXF1aXJlKCcuLi9oZWxwZXJzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSwgZ2xvYmFsLmhlbHBlcnMpO1xuICAgIGdsb2JhbC5CYXJMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UsIF9oZWxwZXJzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcbiAgZXhwb3J0cy5Mb2FkZXIgPSB1bmRlZmluZWQ7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGxvbmcgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7bGVmdDotMzUlO3JpZ2h0OjEwMCV9NjAle2xlZnQ6MTAwJTtyaWdodDotOTAlfTEwMCV7bGVmdDoxMDAlO3JpZ2h0Oi05MCV9Jyk7XG5cbiAgdmFyIHNob3J0ID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle2xlZnQ6LTIwMCU7cmlnaHQ6MTAwJX02MCV7bGVmdDoxMDclO3JpZ2h0Oi04JX0xMDAle2xlZnQ6MTA3JTtyaWdodDotOCV9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGV4cG9ydHMuTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgvKiNfX1BVUkVfXyovKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuaGVpZ2h0LCAncHg7b3ZlcmZsb3c6aGlkZGVuO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7YmFja2dyb3VuZC1jbGlwOnBhZGRpbmctYm94O2Rpc3BsYXk6YmxvY2s7Ym9yZGVyLXJhZGl1czoycHg7d2lsbC1jaGFuZ2U6bGVmdCxyaWdodDthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCBpID09PSAxID8gbG9uZyA6IHNob3J0LCAnIDIuMXMgJywgaSA9PT0gMiA/ICcxLjE1cycgOiAnJywgJyAnLCBpID09PSAxID8gJ2N1YmljLWJlemllcigwLjY1LCAwLjgxNSwgMC43MzUsIDAuMzk1KScgOiAnY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKScsICcgaW5maW5pdGU7fScpXG4gICAgICAgICk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKC8qI19fUFVSRV9fKi8oMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsIF90aGlzLnByb3BzLndpZHRoLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLmhlaWdodCwgJ3B4O292ZXJmbG93OmhpZGRlbjtiYWNrZ3JvdW5kLWNvbG9yOicsICgwLCBfaGVscGVycy5jYWxjdWxhdGVSZ2JhKShfdGhpcy5wcm9wcy5jb2xvciwgMC4yKSwgJztiYWNrZ3JvdW5kLWNsaXA6cGFkZGluZy1ib3g7fScpXG4gICAgICAgICk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgd2lkdGg6IDEwMCxcbiAgICBoZWlnaHQ6IDRcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICd3aWR0aCcsICdoZWlnaHQnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5CZWF0TG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgYmVhdCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc1MCV7dHJhbnNmb3JtOnNjYWxlKDAuNzUpO29wYWNpdHk6MC4yfTEwMCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7ZGlzcGxheTppbmxpbmUtYmxvY2s7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb246JywgYmVhdCwgJyAwLjdzICcsIGkgJSAyID8gJzBzJyA6ICcwLjM1cycsICcgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Cb3VuY2VMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBib3VuY2UgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCUsMTAwJXt0cmFuc2Zvcm06c2NhbGUoMCl9NTAle3RyYW5zZm9ybTpzY2FsZSgxLjApfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO2JvcmRlci1yYWRpdXM6MTAwJTtvcGFjaXR5OjAuNjt0b3A6MDtsZWZ0OjA7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO2FuaW1hdGlvbjonLCBib3VuY2UsICcgMi4xcyAnLCBpID09PSAxID8gJzFzJyA6ICcwcycsICcgaW5maW5pdGUgZWFzZS1pbi1vdXQ7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDYwXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLkNpcmNsZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIGNpcmNsZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfTUwJXt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplICogKDEgLSBpIC8gMTApLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSAqICgxIC0gaSAvIDEwKSwgJ3B4O2JvcmRlcjoxcHggc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czoxMDAlO3RyYW5zaXRpb246MnM7Ym9yZGVyLWJvdHRvbTpub25lO2JvcmRlci1yaWdodDpub25lO3RvcDonLCBpICogMC43ICogMi41LCAnJTtsZWZ0OicsIGkgKiAwLjM1ICogMi41LCAnJTthbmltYXRpb24tZmlsbC1tb2RlOlxcJ1xcJzthbmltYXRpb246JywgY2lyY2xlLCAnIDFzICcsIGkgKiAwLjIsICdzIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogNTBcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuQ2xpbWJpbmdCb3hMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBjbGltYmluZ0JveCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTFlbSkgcm90YXRlKC00NWRlZyl9NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgwLC0xZW0pIHJvdGF0ZSgtNTBkZWcpfTIwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDFlbSwtMmVtKSByb3RhdGUoNDdkZWcpfTI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDFlbSwtMmVtKSByb3RhdGUoNDVkZWcpfTMwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDFlbSwtMmVtKSByb3RhdGUoNDBkZWcpfTQ1JXt0cmFuc2Zvcm06dHJhbnNsYXRlKDJlbSwtM2VtKSByb3RhdGUoMTM3ZGVnKX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgyZW0sLTNlbSkgcm90YXRlKDEzNWRlZyl9NTUle3RyYW5zZm9ybTp0cmFuc2xhdGUoMmVtLC0zZW0pIHJvdGF0ZSgxMzBkZWcpfTcwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDNlbSwtNGVtKSByb3RhdGUoMjE3ZGVnKX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZSgzZW0sLTRlbSkgcm90YXRlKDIyMGRlZyl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTFlbSkgcm90YXRlKC0yMjVkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtib3R0b206LTAuMWVtO2hlaWdodDoxZW07d2lkdGg6MWVtO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czoxNSU7Ym9yZGVyOjAuMjVlbSBzb2xpZCAnLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsLTFlbSkgcm90YXRlKC00NWRlZyk7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO2FuaW1hdGlvbjonLCBjbGltYmluZ0JveCwgJyAyLjVzIGluZmluaXRlIGN1YmljLWJlemllciguNzksMCwuNDcsLjk3KTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6NTAlO2xlZnQ6NTAlO21hcmdpbi10b3A6LTIuN2VtO21hcmdpbi1sZWZ0Oi0yLjdlbTt3aWR0aDo1LjRlbTtoZWlnaHQ6NS40ZW07Zm9udC1zaXplOicsIF90aGlzLnByb3BzLnNpemUsICc7fScpO1xuICAgICAgfSwgX3RoaXMuaGlsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6Ny4xZW07aGVpZ2h0OjcuMWVtO3RvcDoxLjdlbTtsZWZ0OjEuN2VtO2JvcmRlci1sZWZ0OjAuMjVlbSBzb2xpZCAnLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt9Jyk7XG4gICAgICB9LCBfdGhpcy5jb250YWluZXIgPSAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjcuMWVtO2hlaWdodDo3LjFlbTt9JyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLmNvbnRhaW5lciB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgpIH0pLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmhpbGwoKSB9KVxuICAgICAgICAgIClcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNVxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5DbGlwTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvLyBUaGlzIHJldHVybnMgYW4gYW5pbWF0aW9uXG4gIHZhciBjbGlwID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGUoMGRlZykgc2NhbGUoMSl9NTAle3RyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKSBzY2FsZSgwLjgpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpIHNjYWxlKDEpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQ6dHJhbnNwYXJlbnQgIWltcG9ydGFudDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDtib3JkZXItcmFkaXVzOjEwMCU7Ym9yZGVyOjJweCBzb2xpZDtib3JkZXItY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLWJvdHRvbS1jb2xvcjp0cmFuc3BhcmVudDtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246JywgY2xpcCwgJyAwLjc1cyAwcyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgpIH0pIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDM1XG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZSddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLkRvdExvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJvdGF0ZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcxMDAle3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX0nKTtcblxuICB2YXIgYm91bmNlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAlLDEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4wKX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7dG9wOicsIGkgJSAyID8gJzAnIDogJ2F1dG8nLCAnO2JvdHRvbTonLCBpICUgMiA/ICdhdXRvJyA6ICcwJywgJztoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDIsICdweDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplIC8gMiwgJ3B4O2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7Ym9yZGVyLXJhZGl1czoxMDAlO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uOicsIGJvdW5jZSwgJyAycyAnLCBpID09PSAyID8gJy0xcycgOiAnMHMnLCAnIGluZmluaXRlIGxpbmVhcjt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3twb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbjonLCByb3RhdGUsICcgMnMgMHMgaW5maW5pdGUgbGluZWFyO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MFxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5GYWRlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgZmFkZSA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc1MCV7b3BhY2l0eTowLjN9MTAwJXtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDonLCBfdGhpcy5wcm9wcy5oZWlnaHQsICdweDt3aWR0aDonLCBfdGhpcy5wcm9wcy53aWR0aCwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJztib3JkZXItcmFkaXVzOicsIF90aGlzLnByb3BzLnJhZGl1cywgJzt0cmFuc2l0aW9uOjJzO2FuaW1hdGlvbi1maWxsLW1vZGU6XFwnYm90aFxcJzthbmltYXRpb246JywgZmFkZSwgJyAxLjJzICcsIGkgKiAwLjEyLCAncyBpbmZpbml0ZSBlYXNlLWluLW91dDt9Jyk7XG4gICAgICB9LCBfdGhpcy5yYWRpdXMgPSAyMCwgX3RoaXMucXVhcnRlciA9IF90aGlzLnJhZGl1cyAvIDIgKyBfdGhpcy5yYWRpdXMgLyA1LjUsIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZTowO3RvcDonLCBfdGhpcy5yYWRpdXMsICdweDtsZWZ0OicsIF90aGlzLnJhZGl1cywgJ3B4O3dpZHRoOicsIF90aGlzLnJhZGl1cyAqIDMsICdweDtoZWlnaHQ6JywgX3RoaXMucmFkaXVzICogMywgJ3B4O30nKTtcbiAgICAgIH0sIF90aGlzLmEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoMSksICc7dG9wOicsIF90aGlzLnJhZGl1cywgJztsZWZ0OjA7Jyk7XG4gICAgICB9LCBfdGhpcy5iID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDIpLCAnO3RvcDonLCBfdGhpcy5xdWFydGVyLCAnO2xlZnQ6JywgX3RoaXMucXVhcnRlciwgJzt0cmFuc2Zvcm06cm90YXRlKC00NWRlZyk7Jyk7XG4gICAgICB9LCBfdGhpcy5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDMpLCAnO3RvcDowO2xlZnQ6JywgX3RoaXMucmFkaXVzLCAnO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSg0KSwgJzt0b3A6JywgLV90aGlzLnF1YXJ0ZXIsICc7bGVmdDonLCBfdGhpcy5xdWFydGVyLCAnO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSg1KSwgJzt0b3A6JywgLV90aGlzLnJhZGl1cywgJztsZWZ0OjA7Jyk7XG4gICAgICB9LCBfdGhpcy5mID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLnN0eWxlKDYpLCAnO3RvcDonLCAtX3RoaXMucXVhcnRlciwgJztsZWZ0OicsIC1fdGhpcy5xdWFydGVyLCAnO3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKTsnKTtcbiAgICAgIH0sIF90aGlzLmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuc3R5bGUoNyksICc7dG9wOjA7bGVmdDonLCAtX3RoaXMucmFkaXVzLCAnO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpOycpO1xuICAgICAgfSwgX3RoaXMuaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5zdHlsZSg4KSwgJzt0b3A6JywgX3RoaXMucXVhcnRlciwgJztsZWZ0OicsIC1fdGhpcy5xdWFydGVyLCAnO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmEoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYigpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5jKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmQoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuZSgpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5mKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmcoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuaCgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIGhlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgd2lkdGg6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgcmFkaXVzOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlclxuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIGhlaWdodDogMTUsXG4gICAgd2lkdGg6IDUsXG4gICAgbWFyZ2luOiAnMnB4JyxcbiAgICByYWRpdXM6IDJcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdoZWlnaHQnLCAnd2lkdGgnLCAnbWFyZ2luJywgJ3JhZGl1cyddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLkdyaWRMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciBncmlkID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7dHJhbnNmb3JtOnNjYWxlKDAuNSk7b3BhY2l0eTowLjd9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSk7b3BhY2l0eToxfScpO1xuXG4gIHZhciByYW5kb20gPSBmdW5jdGlvbiByYW5kb20odG9wKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiB0b3A7XG4gIH07XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChyYW5kKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJztoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJzttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTthbmltYXRpb24tZmlsbC1tb2RlOlxcJ2JvdGhcXCc7YW5pbWF0aW9uOicsIGdyaWQsICcgJywgcmFuZCAvIDEwMCArIDAuNiwgJ3MgJywgcmFuZCAvIDEwMCAtIDAuMiwgJ3MgaW5maW5pdGUgZWFzZTt9Jyk7XG4gICAgICB9LCBfdGhpcy53cmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3t3aWR0aDonLCBwYXJzZUZsb2F0KF90aGlzLnByb3BzLnNpemUpICogMyArIHBhcnNlRmxvYXQoX3RoaXMucHJvcHMubWFyZ2luKSAqIDYsICdweDtmb250LXNpemU6MDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUocmFuZG9tKDEwMCkpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZShyYW5kb20oMTAwKSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKHJhbmRvbSgxMDApKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnLCAnLi4vaGVscGVycyddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpLCByZXF1aXJlKCcuLi9oZWxwZXJzJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSwgZ2xvYmFsLmhlbHBlcnMpO1xuICAgIGdsb2JhbC5IYXNoTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlLCBfaGVscGVycykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy50aGlja25lc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplIC8gNTtcbiAgICAgIH0sIF90aGlzLmxhdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChfdGhpcy5wcm9wcy5zaXplIC0gX3RoaXMudGhpY2tuZXNzKCkpIC8gMjtcbiAgICAgIH0sIF90aGlzLm9mZnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmxhdCgpIC0gX3RoaXMudGhpY2tuZXNzKCk7XG4gICAgICB9LCBfdGhpcy5jb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfaGVscGVycy5jYWxjdWxhdGVSZ2JhKShfdGhpcy5wcm9wcy5jb2xvciwgMC43NSk7XG4gICAgICB9LCBfdGhpcy5iZWZvcmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7d2lkdGg6JywgX3RoaXMudGhpY2tuZXNzKCksICdweDtib3gtc2hhZG93OicsIF90aGlzLmxhdCgpLCAncHggJywgLV90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9MzUle3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtib3gtc2hhZG93OjAgJywgLV90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywwICcsIF90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJ303MCV7d2lkdGg6JywgX3RoaXMudGhpY2tuZXNzKCksICdweDtib3gtc2hhZG93OicsIC1fdGhpcy5sYXQoKSwgJ3B4ICcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9MTAwJXtib3gtc2hhZG93OicsIF90aGlzLmxhdCgpLCAncHggJywgLV90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9Jyk7XG4gICAgICB9LCBfdGhpcy5hZnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXtoZWlnaHQ6JywgX3RoaXMudGhpY2tuZXNzKCksICdweDtib3gtc2hhZG93OicsIF90aGlzLm9mZnNldCgpLCAncHggJywgX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIC1fdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICd9MzUle2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7Ym94LXNoYWRvdzonLCBfdGhpcy5vZmZzZXQoKSwgJ3B4IDAgJywgX3RoaXMuY29sb3IoKSwgJywnLCAtX3RoaXMub2Zmc2V0KCksICdweCAwICcsIF90aGlzLmNvbG9yKCksICd9NzAle2hlaWdodDonLCBfdGhpcy50aGlja25lc3MoKSwgJ3B4O2JveC1zaGFkb3c6JywgX3RoaXMub2Zmc2V0KCksICdweCAnLCAtX3RoaXMubGF0KCksICdweCAnLCBfdGhpcy5jb2xvcigpLCAnLCcsIC1fdGhpcy5vZmZzZXQoKSwgJ3B4ICcsIF90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJ30xMDAle2JveC1zaGFkb3c6JywgX3RoaXMub2Zmc2V0KCksICdweCAnLCBfdGhpcy5sYXQoKSwgJ3B4ICcsIF90aGlzLmNvbG9yKCksICcsJywgLV90aGlzLm9mZnNldCgpLCAncHggJywgLV90aGlzLmxhdCgpLCAncHggJywgX3RoaXMuY29sb3IoKSwgJ30nKTtcbiAgICAgIH0sIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXCdcXCc7dG9wOjUwJTtsZWZ0OjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUgLyA1LCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUgLyA1LCAncHg7Ym9yZGVyLXJhZGl1czonLCBfdGhpcy5wcm9wcy5zaXplIC8gMTAsICdweDt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7YW5pbWF0aW9uLWZpbGwtbW9kZTpub25lO2FuaW1hdGlvbjonLCBpID09PSAxID8gX3RoaXMuYmVmb3JlKCkgOiBfdGhpcy5hZnRlcigpLCAnIDJzIGluZmluaXRlO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O3RyYW5zZm9ybTpyb3RhdGUoMTY1ZGVnKTt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIHNpemU6IDUwLFxuICAgIGNvbG9yOiAnIzAwMDAwMCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuTW9vbkxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIG1vb24gPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMTAwJXt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5tb29uU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLnNpemUgLyA3O1xuICAgICAgfSwgX3RoaXMuYmFsbFN0eWxlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7d2lkdGg6Jywgc2l6ZSwgJ3B4O2hlaWdodDonLCBzaXplLCAncHg7Ym9yZGVyLXJhZGl1czoxMDAlO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUgKyBfdGhpcy5tb29uU2l6ZSgpICogMiwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplICsgX3RoaXMubW9vblNpemUoKSAqIDIsICdweDthbmltYXRpb246JywgbW9vbiwgJyAwLjZzIDBzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO30nKTtcbiAgICAgIH0sIF90aGlzLmJhbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbFN0eWxlKF90aGlzLm1vb25TaXplKCkpLCAnO2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7b3BhY2l0eTowLjg7cG9zaXRpb246YWJzb2x1dGU7dG9wOicsIF90aGlzLnByb3BzLnNpemUgLyAyIC0gX3RoaXMubW9vblNpemUoKSAvIDIsICdweDthbmltYXRpb246JywgbW9vbiwgJyAwLjZzIDBzIGluZmluaXRlIGxpbmVhcjthbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzOycpO1xuICAgICAgfSwgX3RoaXMuY2lyY2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ2NvbXBvc2VzOicsIF90aGlzLmJhbGxTdHlsZShfdGhpcy5wcm9wcy5zaXplKSwgJztib3JkZXI6JywgX3RoaXMubW9vblNpemUoKSwgJ3B4IHNvbGlkICcsIF90aGlzLnByb3BzLmNvbG9yLCAnO29wYWNpdHk6MC4xOycpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGwoKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuY2lyY2xlKCkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MFxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5QYWNtYW5Mb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIC8vIFRoaXMgcmV0dXJucyBhbiBhbmltYXRpb25cbiAgdmFyIHBhY21hbiA9IFsoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgtNDRkZWcpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSg0NGRlZyl9JyldO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuYmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCc3NSV7b3BhY2l0eTowLjd9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlKCcsIC00ICogX3RoaXMucHJvcHMuc2l6ZSwgJ3B4LCcsIC1fdGhpcy5wcm9wcy5zaXplIC8gNCwgJ3B4KX0nKTtcbiAgICAgIH0sIF90aGlzLmJhbGxTdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOjEwcHg7aGVpZ2h0OjEwcHg7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKDAsJywgLV90aGlzLnByb3BzLnNpemUgLyA0LCAncHgpO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoyNXB4O2xlZnQ6MTAwcHg7YW5pbWF0aW9uOicsIF90aGlzLmJhbGwoKSwgJyAxcyAnLCBpICogMC4yNSwgJ3MgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGhpcy5zMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnByb3BzLnNpemUgKyAncHggc29saWQgdHJhbnNwYXJlbnQnO1xuICAgICAgfSwgX3RoaXMuczIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm9wcy5zaXplICsgJ3B4IHNvbGlkICcgKyBfdGhpcy5wcm9wcy5jb2xvcjtcbiAgICAgIH0sIF90aGlzLnBhY21hblN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXItcmlnaHQ6JywgX3RoaXMuczEoKSwgJztib3JkZXItdG9wOicsIGkgPT09IDAgPyBfdGhpcy5zMSgpIDogX3RoaXMuczIoKSwgJztib3JkZXItbGVmdDonLCBfdGhpcy5zMigpLCAnO2JvcmRlci1ib3R0b206JywgaSA9PT0gMCA/IF90aGlzLnMyKCkgOiBfdGhpcy5zMSgpLCAnO2JvcmRlci1yYWRpdXM6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O3Bvc2l0aW9uOmFic29sdXRlO2FuaW1hdGlvbjonLCBwYWNtYW5baV0sICcgMC44cyBpbmZpbml0ZSBlYXNlLWluLW91dDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1zaXplOjA7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7fScpO1xuICAgICAgfSwgX3RoaXMucGFjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMucGFjbWFuU3R5bGUoMCk7XG4gICAgICB9LCBfdGhpcy5tYW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMucGFjbWFuU3R5bGUoMSksICc7cG9zaXRpb246YWJzb2x1dGU7Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMucGFjKCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLm1hbigpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsU3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLmJhbGxTdHlsZSgzKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuYmFsbFN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5iYWxsU3R5bGUoNSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gICAgbWFyZ2luOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xuICB9O1xuXG4gIExvYWRlci5kZWZhdWx0UHJvcHMgPSB7XG4gICAgbG9hZGluZzogdHJ1ZSxcbiAgICBjb2xvcjogJyMwMDAwMDAnLFxuICAgIHNpemU6IDI1LFxuICAgIG1hcmdpbjogJzJweCdcbiAgfTtcblxuICB2YXIgQ29tcG9uZW50ID0gKDAsIF9yZWNvbXBvc2Uub25seVVwZGF0ZUZvcktleXMpKFsnbG9hZGluZycsICdjb2xvcicsICdzaXplJywgJ21hcmdpbiddKShMb2FkZXIpO1xuICBDb21wb25lbnQuZGVmYXVsdFByb3BzID0gTG9hZGVyLmRlZmF1bHRQcm9wcztcbiAgZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xufSk7IiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZWFjdCcsICdwcm9wLXR5cGVzJywgJ2Vtb3Rpb24nLCAncmVjb21wb3NlJ10sIGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdyZWFjdCcpLCByZXF1aXJlKCdwcm9wLXR5cGVzJyksIHJlcXVpcmUoJ2Vtb3Rpb24nKSwgcmVxdWlyZSgncmVjb21wb3NlJykpO1xuICB9IGVsc2Uge1xuICAgIHZhciBtb2QgPSB7XG4gICAgICBleHBvcnRzOiB7fVxuICAgIH07XG4gICAgZmFjdG9yeShtb2QuZXhwb3J0cywgZ2xvYmFsLnJlYWN0LCBnbG9iYWwucHJvcFR5cGVzLCBnbG9iYWwuZW1vdGlvbiwgZ2xvYmFsLnJlY29tcG9zZSk7XG4gICAgZ2xvYmFsLlByb3BhZ2F0ZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLy8gMS41IDQuNSA3LjVcbiAgdmFyIGRpc3RhbmNlID0gWzEsIDMsIDVdO1xuXG4gIHZhciBwcm9wYWdhdGUgPSBbKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVsyXSwgJ3JlbSkgc2NhbGUoMC41KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX01MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLScsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtJywgZGlzdGFuY2VbMV0sICdyZW0pIHNjYWxlKDAuNil9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NzUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0nLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpLCAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMjUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzBdLCAncmVtKSBzY2FsZSgwLjc1KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTk1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcmVtKSBzY2FsZSgxKX0nKSwgKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzI1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVswXSwgJ3JlbSkgc2NhbGUoMC43NSl9NTAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKCcsIGRpc3RhbmNlWzFdLCAncmVtKSBzY2FsZSgwLjYpfTc1JXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX05NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMHJlbSkgc2NhbGUoMSl9JyksICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcyNSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMF0sICdyZW0pIHNjYWxlKDAuNzUpfTUwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgnLCBkaXN0YW5jZVsxXSwgJ3JlbSkgc2NhbGUoMC42KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoJywgZGlzdGFuY2VbMl0sICdyZW0pIHNjYWxlKDAuNSl9OTUle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDByZW0pIHNjYWxlKDEpfScpXTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246YWJzb2x1dGU7Zm9udC1zaXplOicsIF90aGlzLnByb3BzLnNpemUgLyAzLCAncHg7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7YmFja2dyb3VuZDonLCBfdGhpcy5wcm9wcy5jb2xvciwgJztib3JkZXItcmFkaXVzOjUwJTthbmltYXRpb246JywgcHJvcGFnYXRlW2ldLCAnIDEuNXMgIGluZmluaXRlO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7fScpO1xuICAgICAgfSwgX3RoaXMud3JhcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7cG9zaXRpb246cmVsYXRpdmU7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6IHRoaXMud3JhcHBlcigpIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDApIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg0KSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNSkgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgc2l6ZTogMTUsXG4gICAgY29sb3I6ICcjMDAwMDAwJ1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5QdWxzZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLy8gVGhpcyByZXR1cm5zIGFuIGFuaW1hdGlvblxuICB2YXIgcHVsc2UgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX00NSV7dHJhbnNmb3JtOnNjYWxlKDAuMSk7b3BhY2l0eTowLjd9ODAle3RyYW5zZm9ybTpzY2FsZSgxKTtvcGFjaXR5OjF9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne2JhY2tncm91bmQtY29sb3I6JywgX3RoaXMucHJvcHMuY29sb3IsICc7d2lkdGg6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O2hlaWdodDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7bWFyZ2luOicsIF90aGlzLnByb3BzLm1hcmdpbiwgJztib3JkZXItcmFkaXVzOjEwMCU7ZGlzcGxheTppbmxpbmUtYmxvY2s7YW5pbWF0aW9uOicsIHB1bHNlLCAnIDAuNzVzICcsIGkgKiAwLjEyLCAncyBpbmZpbml0ZSBjdWJpYy1iZXppZXIoLjIsLjY4LC4xOCwxLjA4KTthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBzaXplOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nXG4gIH07XG5cbiAgTG9hZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgICBsb2FkaW5nOiB0cnVlLFxuICAgIGNvbG9yOiAnIzAwMDAwMCcsXG4gICAgc2l6ZTogMTUsXG4gICAgbWFyZ2luOiAnMnB4J1xuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnLCAnbWFyZ2luJ10pKExvYWRlcik7XG4gIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgPSBMb2FkZXIuZGVmYXVsdFByb3BzO1xuICBleHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG59KTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWydleHBvcnRzJywgJ3JlYWN0JywgJ3Byb3AtdHlwZXMnLCAnZW1vdGlvbicsICdyZWNvbXBvc2UnXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ3JlYWN0JyksIHJlcXVpcmUoJ3Byb3AtdHlwZXMnKSwgcmVxdWlyZSgnZW1vdGlvbicpLCByZXF1aXJlKCdyZWNvbXBvc2UnKSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vZCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9XG4gICAgfTtcbiAgICBmYWN0b3J5KG1vZC5leHBvcnRzLCBnbG9iYWwucmVhY3QsIGdsb2JhbC5wcm9wVHlwZXMsIGdsb2JhbC5lbW90aW9uLCBnbG9iYWwucmVjb21wb3NlKTtcbiAgICBnbG9iYWwuUmluZ0xvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHJpZ2h0ID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpyb3RhdGVYKDBkZWcpIHJvdGF0ZVkoMGRlZykgcm90YXRlWigwZGVnKX0xMDAle3RyYW5zZm9ybTpyb3RhdGVYKDE4MGRlZykgcm90YXRlWSgzNjBkZWcpIHJvdGF0ZVooMzYwZGVnKX0nKTtcblxuICB2YXIgbGVmdCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06cm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZyl9MTAwJXt0cmFuc2Zvcm06cm90YXRlWCgzNjBkZWcpIHJvdGF0ZVkoMTgwZGVnKSByb3RhdGVaKDM2MGRlZyl9Jyk7XG5cbiAgdmFyIExvYWRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKExvYWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBMb2FkZXIoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExvYWRlcik7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBMb2FkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihMb2FkZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdHlsZSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDtib3JkZXI6JywgX3RoaXMucHJvcHMuc2l6ZSAvIDEwLCAncHggc29saWQgJywgX3RoaXMucHJvcHMuY29sb3IsICc7b3BhY2l0eTowLjQ7Ym9yZGVyLXJhZGl1czoxMDAlO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7cGVyc3BlY3RpdmU6ODAwcHg7YW5pbWF0aW9uOicsIGkgPT09IDEgPyByaWdodCA6IGxlZnQsICcgMnMgMHMgaW5maW5pdGUgbGluZWFyO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgne3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O3Bvc2l0aW9uOnJlbGF0aXZlO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiB0aGlzLndyYXBwZXIoKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSlcbiAgICAgICAgKSA6IG51bGw7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIExvYWRlcjtcbiAgfShfcmVhY3QyLmRlZmF1bHQuQ29tcG9uZW50KTtcblxuICBMb2FkZXIucHJvcFR5cGVzID0ge1xuICAgIGxvYWRpbmc6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgICBjb2xvcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gICAgc2l6ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiA2MFxuICB9O1xuXG4gIHZhciBDb21wb25lbnQgPSAoMCwgX3JlY29tcG9zZS5vbmx5VXBkYXRlRm9yS2V5cykoWydsb2FkaW5nJywgJ2NvbG9yJywgJ3NpemUnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5SaXNlTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgcmlzZUFtb3VudCA9IDMwO1xuXG4gIHZhciBldmVuID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZSgxLjEpfTI1JXt0cmFuc2xhdGVZKC0nLCByaXNlQW1vdW50LCAncHgpfTUwJXt0cmFuc2Zvcm06c2NhbGUoMC40KX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoJywgcmlzZUFtb3VudCwgJ3B4KX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApIHNjYWxlKDEuMCl9Jyk7XG5cbiAgdmFyIG9kZCA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCcwJXt0cmFuc2Zvcm06c2NhbGUoMC40KX0yNSV7dHJhbnNsYXRlWSgnLCByaXNlQW1vdW50LCAncHgpfTUwJXt0cmFuc2Zvcm06c2NhbGUoMS4xKX03NSV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoJywgLXJpc2VBbW91bnQsICdweCl9MTAwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKSBzY2FsZSgwLjc1KX0nKTtcblxuICB2YXIgTG9hZGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHMoTG9hZGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIExvYWRlcigpIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9hZGVyKTtcblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IExvYWRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKExvYWRlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0eWxlID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCd7YmFja2dyb3VuZC1jb2xvcjonLCBfdGhpcy5wcm9wcy5jb2xvciwgJzt3aWR0aDonLCBfdGhpcy5wcm9wcy5zaXplLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLnNpemUsICdweDttYXJnaW46JywgX3RoaXMucHJvcHMubWFyZ2luLCAnO2JvcmRlci1yYWRpdXM6MTAwJTtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246JywgaSAlIDIgPT09IDAgPyBldmVuIDogb2RkLCAnIDFzIDBzIGluZmluaXRlIGN1YmljLWJlemllciguMTUsLjQ2LC45LC42KTthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7fScpO1xuICAgICAgfSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExvYWRlciwgW3tcbiAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5sb2FkaW5nID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMSkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDIpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgzKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoNCkgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDUpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5Sb3RhdGVMb2FkZXIgPSBtb2QuZXhwb3J0cztcbiAgfVxufSkodGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsIF9yZWFjdCwgX3Byb3BUeXBlcywgX2Vtb3Rpb24sIF9yZWNvbXBvc2UpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG4gIH0pO1xuXG4gIHZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG4gIHZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgICAgZGVmYXVsdDogb2JqXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cblxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfVxuXG4gIHZhciByb3RhdGUgPSAoMCwgX2Vtb3Rpb24ua2V5ZnJhbWVzKSgnMCV7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX01MCV7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTEwMCV7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tvcGFjaXR5OjAuODtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OicsIGkgJSAyID8gLTI4IDogMjUsICdweDt9Jyk7XG4gICAgICB9LCBfdGhpcy5iYWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7Ym9yZGVyLXJhZGl1czoxMDAlO30nKTtcbiAgICAgIH0sIF90aGlzLndyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoMCwgX2Vtb3Rpb24uY3NzKSgnY29tcG9zZXM6JywgX3RoaXMuYmFsbCgpLCAnO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb246Jywgcm90YXRlLCAnIDFzIDBzIGluZmluaXRlIGN1YmljLWJlemllciguNywtLjEzLC4yMiwuODYpOycpO1xuICAgICAgfSwgX3RoaXMubG9uZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5iYWxsKCksICc7Y29tcG9zZXM6JywgX3RoaXMuc3R5bGUoMSksICc7Jyk7XG4gICAgICB9LCBfdGhpcy5zaG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfZW1vdGlvbi5jc3MpKCdjb21wb3NlczonLCBfdGhpcy5iYWxsKCksICc7Y29tcG9zZXM6JywgX3RoaXMuc3R5bGUoMiksICc7Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogdGhpcy53cmFwcGVyKCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMubG9uZygpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zaG9ydCgpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5TY2FsZUxvYWRlciA9IG1vZC5leHBvcnRzO1xuICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoZXhwb3J0cywgX3JlYWN0LCBfcHJvcFR5cGVzLCBfZW1vdGlvbiwgX3JlY29tcG9zZSkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbiAgfSk7XG5cbiAgdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbiAgdmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgICBkZWZhdWx0OiBvYmpcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuXG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgdmFyIHNjYWxlID0gKDAsIF9lbW90aW9uLmtleWZyYW1lcykoJzAle3RyYW5zZm9ybTpzY2FsZXkoMS4wKX01MCV7dHJhbnNmb3JtOnNjYWxleSgwLjQpfTEwMCV7dHJhbnNmb3JtOnNjYWxleSgxLjApfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLndpZHRoLCAncHg7aGVpZ2h0OicsIF90aGlzLnByb3BzLmhlaWdodCwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7Ym9yZGVyLXJhZGl1czonLCBfdGhpcy5wcm9wcy5yYWRpdXMsICdweDtkaXNwbGF5OmlubGluZS1ibG9jazthbmltYXRpb246Jywgc2NhbGUsICcgMXMgJywgaSAqIDAuMSwgJ3MgaW5maW5pdGUgY3ViaWMtYmV6aWVyKC4yLC42OCwuMTgsMS4wOCk7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoO30nKTtcbiAgICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhMb2FkZXIsIFt7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMubG9hZGluZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDEpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgyKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMykgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDQpIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSg1KSB9KVxuICAgICAgICApIDogbnVsbDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTG9hZGVyO1xuICB9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpO1xuXG4gIExvYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgbG9hZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAgIGNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgICBoZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgICBtYXJnaW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHJhZGl1czogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXJcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBoZWlnaHQ6IDM1LFxuICAgIHdpZHRoOiA0LFxuICAgIG1hcmdpbjogJzJweCcsXG4gICAgcmFkaXVzOiAyXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnaGVpZ2h0JywgJ3dpZHRoJywgJ21hcmdpbicsICdyYWRpdXMnXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbJ2V4cG9ydHMnLCAncmVhY3QnLCAncHJvcC10eXBlcycsICdlbW90aW9uJywgJ3JlY29tcG9zZSddLCBmYWN0b3J5KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncmVhY3QnKSwgcmVxdWlyZSgncHJvcC10eXBlcycpLCByZXF1aXJlKCdlbW90aW9uJyksIHJlcXVpcmUoJ3JlY29tcG9zZScpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9kID0ge1xuICAgICAgZXhwb3J0czoge31cbiAgICB9O1xuICAgIGZhY3RvcnkobW9kLmV4cG9ydHMsIGdsb2JhbC5yZWFjdCwgZ2xvYmFsLnByb3BUeXBlcywgZ2xvYmFsLmVtb3Rpb24sIGdsb2JhbC5yZWNvbXBvc2UpO1xuICAgIGdsb2JhbC5TeW5jTG9hZGVyID0gbW9kLmV4cG9ydHM7XG4gIH1cbn0pKHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzLCBfcmVhY3QsIF9wcm9wVHlwZXMsIF9lbW90aW9uLCBfcmVjb21wb3NlKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxuICB9KTtcblxuICB2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxuICB2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICAgIGRlZmF1bHQ6IG9ialxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICB2YXIgc3luYyA9ICgwLCBfZW1vdGlvbi5rZXlmcmFtZXMpKCczMyV7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTBweCl9NjYle3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMHB4KX0xMDAle3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfScpO1xuXG4gIHZhciBMb2FkZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhMb2FkZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gICAgZnVuY3Rpb24gTG9hZGVyKCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMb2FkZXIpO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gTG9hZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTG9hZGVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3R5bGUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gKDAsIF9lbW90aW9uLmNzcykoJ3tiYWNrZ3JvdW5kLWNvbG9yOicsIF90aGlzLnByb3BzLmNvbG9yLCAnO3dpZHRoOicsIF90aGlzLnByb3BzLnNpemUsICdweDtoZWlnaHQ6JywgX3RoaXMucHJvcHMuc2l6ZSwgJ3B4O21hcmdpbjonLCBfdGhpcy5wcm9wcy5tYXJnaW4sICc7Ym9yZGVyLXJhZGl1czoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2FuaW1hdGlvbjonLCBzeW5jLCAnIDAuNnMgJywgaSAqIDAuMDcsICdzIGluZmluaXRlIGVhc2UtaW4tb3V0O2FuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDt9Jyk7XG4gICAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoTG9hZGVyLCBbe1xuICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxvYWRpbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnLCB7IGNsYXNzTmFtZTogdGhpcy5zdHlsZSgxKSB9KSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgeyBjbGFzc05hbWU6IHRoaXMuc3R5bGUoMikgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsgY2xhc3NOYW1lOiB0aGlzLnN0eWxlKDMpIH0pXG4gICAgICAgICkgOiBudWxsO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBMb2FkZXI7XG4gIH0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7XG5cbiAgTG9hZGVyLnByb3BUeXBlcyA9IHtcbiAgICBsb2FkaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gICAgY29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAgIHNpemU6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAgIG1hcmdpbjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbiAgfTtcblxuICBMb2FkZXIuZGVmYXVsdFByb3BzID0ge1xuICAgIGxvYWRpbmc6IHRydWUsXG4gICAgY29sb3I6ICcjMDAwMDAwJyxcbiAgICBzaXplOiAxNSxcbiAgICBtYXJnaW46ICcycHgnXG4gIH07XG5cbiAgdmFyIENvbXBvbmVudCA9ICgwLCBfcmVjb21wb3NlLm9ubHlVcGRhdGVGb3JLZXlzKShbJ2xvYWRpbmcnLCAnY29sb3InLCAnc2l6ZScsICdtYXJnaW4nXSkoTG9hZGVyKTtcbiAgQ29tcG9uZW50LmRlZmF1bHRQcm9wcyA9IExvYWRlci5kZWZhdWx0UHJvcHM7XG4gIGV4cG9ydHMuZGVmYXVsdCA9IENvbXBvbmVudDtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2luZGV4Jyk7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpLHA9cmVxdWlyZShcImZianMvbGliL2VtcHR5RnVuY3Rpb25cIikscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2xbXCJmb3JcIl0scj1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsdD1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnBvcnRhbFwiKTo2MDEwNix1PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdj1xP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHc9cT9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx4PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx5PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSx6PXE/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsQT1cImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBCKGEpe2Zvcih2YXIgYj1hcmd1bWVudHMubGVuZ3RoLTEsZT1cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudFxceDNkXCIrYSxjPTA7YzxiO2MrKyllKz1cIlxceDI2YXJnc1tdXFx4M2RcIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2MrMV0pO2I9RXJyb3IoZStcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCIpO2IubmFtZT1cIkludmFyaWFudCBWaW9sYXRpb25cIjtiLmZyYW1lc1RvUG9wPTE7dGhyb3cgYjt9XG52YXIgQz17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX07ZnVuY3Rpb24gRChhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxDfUQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307RC5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hP0IoXCI4NVwiKTp2b2lkIDA7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtELnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBFKCl7fVxuRS5wcm90b3R5cGU9RC5wcm90b3R5cGU7ZnVuY3Rpb24gRihhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1uO3RoaXMudXBkYXRlcj1lfHxDfXZhciBHPUYucHJvdG90eXBlPW5ldyBFO0cuY29uc3RydWN0b3I9RjttKEcsRC5wcm90b3R5cGUpO0cuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEg9e2N1cnJlbnQ6bnVsbH0sST1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEo9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEsoYSxiLGUpe3ZhciBjPXZvaWQgMCxkPXt9LGc9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoYyBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KSxiKUkuY2FsbChiLGMpJiYhSi5oYXNPd25Qcm9wZXJ0eShjKSYmKGRbY109YltjXSk7dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zm9yKHZhciBrPUFycmF5KGYpLGw9MDtsPGY7bCsrKWtbbF09YXJndW1lbnRzW2wrMl07ZC5jaGlsZHJlbj1rfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihjIGluIGY9YS5kZWZhdWx0UHJvcHMsZil2b2lkIDA9PT1kW2NdJiYoZFtjXT1mW2NdKTtyZXR1cm57JCR0eXBlb2Y6cix0eXBlOmEsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6SC5jdXJyZW50fX1cbmZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PXJ9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIlxceDNkXCI6XCJcXHgzZDBcIixcIjpcIjpcIlxceDNkMlwifTtyZXR1cm5cIiRcIisoXCJcIithKS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nLE49W107ZnVuY3Rpb24gTyhhLGIsZSxjKXtpZihOLmxlbmd0aCl7dmFyIGQ9Ti5wb3AoKTtkLnJlc3VsdD1hO2Qua2V5UHJlZml4PWI7ZC5mdW5jPWU7ZC5jb250ZXh0PWM7ZC5jb3VudD0wO3JldHVybiBkfXJldHVybntyZXN1bHQ6YSxrZXlQcmVmaXg6YixmdW5jOmUsY29udGV4dDpjLGNvdW50OjB9fWZ1bmN0aW9uIFAoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5OLmxlbmd0aCYmTi5wdXNoKGEpfVxuZnVuY3Rpb24gUShhLGIsZSxjKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcjpjYXNlIHQ6Zz0hMH19aWYoZylyZXR1cm4gZShjLGEsXCJcIj09PWI/XCIuXCIrUihhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaD0wO2g8YS5sZW5ndGg7aCsrKXtkPWFbaF07dmFyIGY9YitSKGQsaCk7Zys9UShkLGYsZSxjKX1lbHNlIGlmKG51bGw9PT1hfHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGE/Zj1udWxsOihmPUEmJmFbQV18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksXG5oPTA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1IoZCxoKyspLGcrPVEoZCxmLGUsYyk7ZWxzZVwib2JqZWN0XCI9PT1kJiYoZT1cIlwiK2EsQihcIjMxXCIsXCJbb2JqZWN0IE9iamVjdF1cIj09PWU/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6ZSxcIlwiKSk7cmV0dXJuIGd9ZnVuY3Rpb24gUihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gUyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBUKGEsYixlKXt2YXIgYz1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1UoYSxjLGUscC50aGF0UmV0dXJuc0FyZ3VtZW50KTpudWxsIT1hJiYoTChhKSYmKGI9ZCsoIWEua2V5fHxiJiZiLmtleT09PWEua2V5P1wiXCI6KFwiXCIrYS5rZXkpLnJlcGxhY2UoTSxcIiRcXHgyNi9cIikrXCIvXCIpK2UsYT17JCR0eXBlb2Y6cix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9KSxjLnB1c2goYSkpfWZ1bmN0aW9uIFUoYSxiLGUsYyxkKXt2YXIgZz1cIlwiO251bGwhPWUmJihnPShcIlwiK2UpLnJlcGxhY2UoTSxcIiRcXHgyNi9cIikrXCIvXCIpO2I9TyhiLGcsYyxkKTtudWxsPT1hfHxRKGEsXCJcIixULGIpO1AoYil9XG52YXIgVj17Q2hpbGRyZW46e21hcDpmdW5jdGlvbihhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgYz1bXTtVKGEsYyxudWxsLGIsZSk7cmV0dXJuIGN9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1PKG51bGwsbnVsbCxiLGUpO251bGw9PWF8fFEoYSxcIlwiLFMsYik7UChiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/MDpRKGEsXCJcIixwLnRoYXRSZXR1cm5zTnVsbCxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtVKGEsYixudWxsLHAudGhhdFJldHVybnNBcmd1bWVudCk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7TChhKT92b2lkIDA6QihcIjE0M1wiKTtyZXR1cm4gYX19LGNyZWF0ZVJlZjpmdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fSxDb21wb25lbnQ6RCxQdXJlQ29tcG9uZW50OkYsY3JlYXRlQ29udGV4dDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOngsXG5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfZGVmYXVsdFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTphLF9jaGFuZ2VkQml0czowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dyxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfSxmb3J3YXJkUmVmOmZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp6LHJlbmRlcjphfX0sRnJhZ21lbnQ6dSxTdHJpY3RNb2RlOnYsdW5zdGFibGVfQXN5bmNNb2RlOnksY3JlYXRlRWxlbWVudDpLLGNsb25lRWxlbWVudDpmdW5jdGlvbihhLGIsZSl7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1ILmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiYoaz1hLnR5cGUuZGVmYXVsdFByb3BzKTtmb3IoYyBpbiBiKUkuY2FsbChiLFxuYykmJiFKLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnIsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9Sy5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50OkwsdmVyc2lvbjpcIjE2LjMuMVwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpILGFzc2lnbjptfX0sVz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OlZ9KSxYPVcmJlZ8fFc7XG5tb2R1bGUuZXhwb3J0cz1YW1wiZGVmYXVsdFwiXT9YW1wiZGVmYXVsdFwiXTpYO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBjcmVhdGVFbGVtZW50LCBjcmVhdGVGYWN0b3J5IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICdmYmpzL2xpYi9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCB7IGNyZWF0ZUNoYW5nZUVtaXR0ZXIgfSBmcm9tICdjaGFuZ2UtZW1pdHRlcic7XG5pbXBvcnQgJCRvYnNlcnZhYmxlIGZyb20gJ3N5bWJvbC1vYnNlcnZhYmxlJztcblxudmFyIHNldFN0YXRpYyA9IGZ1bmN0aW9uIHNldFN0YXRpYyhrZXksIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgQmFzZUNvbXBvbmVudFtrZXldID0gdmFsdWU7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICB9O1xufTtcblxudmFyIHNldERpc3BsYXlOYW1lID0gZnVuY3Rpb24gc2V0RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpIHtcbiAgcmV0dXJuIHNldFN0YXRpYygnZGlzcGxheU5hbWUnLCBkaXNwbGF5TmFtZSk7XG59O1xuXG52YXIgZ2V0RGlzcGxheU5hbWUgPSBmdW5jdGlvbiBnZXREaXNwbGF5TmFtZShDb21wb25lbnQkJDEpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudCQkMTtcbiAgfVxuXG4gIGlmICghQ29tcG9uZW50JCQxKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50JCQxLm5hbWUgfHwgJ0NvbXBvbmVudCc7XG59O1xuXG52YXIgd3JhcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gd3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsIGhvY05hbWUpIHtcbiAgcmV0dXJuIGhvY05hbWUgKyAnKCcgKyBnZXREaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50KSArICcpJztcbn07XG5cbnZhciBtYXBQcm9wcyA9IGZ1bmN0aW9uIG1hcFByb3BzKHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgTWFwUHJvcHMgPSBmdW5jdGlvbiBNYXBQcm9wcyhwcm9wcykge1xuICAgICAgcmV0dXJuIGZhY3RvcnkocHJvcHNNYXBwZXIocHJvcHMpKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdtYXBQcm9wcycpKShNYXBQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBNYXBQcm9wcztcbiAgfTtcbn07XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgaW5oZXJpdHMgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuXG5cblxuXG5cblxuXG5cblxudmFyIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iaiwga2V5cykge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlO1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTtcblxudmFyIHdpdGhQcm9wcyA9IGZ1bmN0aW9uIHdpdGhQcm9wcyhpbnB1dCkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcm9wcywgdHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nID8gaW5wdXQocHJvcHMpIDogaW5wdXQpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhQcm9wcycpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBwaWNrID0gZnVuY3Rpb24gcGljayhvYmosIGtleXMpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgd2l0aFByb3BzT25DaGFuZ2UgPSBmdW5jdGlvbiB3aXRoUHJvcHNPbkNoYW5nZShzaG91bGRNYXBPcktleXMsIHByb3BzTWFwcGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICB2YXIgc2hvdWxkTWFwID0gdHlwZW9mIHNob3VsZE1hcE9yS2V5cyA9PT0gJ2Z1bmN0aW9uJyA/IHNob3VsZE1hcE9yS2V5cyA6IGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKHByb3BzLCBzaG91bGRNYXBPcktleXMpLCBwaWNrKG5leHRQcm9wcywgc2hvdWxkTWFwT3JLZXlzKSk7XG4gICAgfTtcblxuICAgIHZhciBXaXRoUHJvcHNPbkNoYW5nZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoUHJvcHNPbkNoYW5nZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhQcm9wc09uQ2hhbmdlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhQcm9wc09uQ2hhbmdlKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5jb21wdXRlZFByb3BzID0gcHJvcHNNYXBwZXIoX3RoaXMucHJvcHMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoUHJvcHNPbkNoYW5nZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmIChzaG91bGRNYXAodGhpcy5wcm9wcywgbmV4dFByb3BzKSkge1xuICAgICAgICAgIHRoaXMuY29tcHV0ZWRQcm9wcyA9IHByb3BzTWFwcGVyKG5leHRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIFdpdGhQcm9wc09uQ2hhbmdlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLmNvbXB1dGVkUHJvcHMpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUHJvcHNPbkNoYW5nZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFByb3BzT25DaGFuZ2UnKSkoV2l0aFByb3BzT25DaGFuZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFByb3BzT25DaGFuZ2U7XG4gIH07XG59O1xuXG52YXIgbWFwVmFsdWVzID0gZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgZnVuYykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZnVuYyhvYmpba2V5XSwga2V5KTtcbiAgICB9XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xudmFyIHdpdGhIYW5kbGVycyA9IGZ1bmN0aW9uIHdpdGhIYW5kbGVycyhoYW5kbGVycykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICB2YXIgV2l0aEhhbmRsZXJzID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhIYW5kbGVycygpIHtcbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoSGFuZGxlcnMpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyksIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKSB7XG4gICAgICAgIHRoaXMuY2FjaGVkSGFuZGxlcnMgPSB7fTtcbiAgICAgIH07XG5cbiAgICAgIFdpdGhIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5oYW5kbGVycykpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFdpdGhIYW5kbGVycztcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICB2YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdGhpcy5jYWNoZWRIYW5kbGVycyA9IHt9O1xuICAgICAgdGhpcy5oYW5kbGVycyA9IG1hcFZhbHVlcyh0eXBlb2YgaGFuZGxlcnMgPT09ICdmdW5jdGlvbicgPyBoYW5kbGVycyh0aGlzLnByb3BzKSA6IGhhbmRsZXJzLCBmdW5jdGlvbiAoY3JlYXRlSGFuZGxlciwgaGFuZGxlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgY2FjaGVkSGFuZGxlciA9IF90aGlzMi5jYWNoZWRIYW5kbGVyc1toYW5kbGVyTmFtZV07XG4gICAgICAgICAgaWYgKGNhY2hlZEhhbmRsZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRIYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIoX3RoaXMyLnByb3BzKTtcbiAgICAgICAgICBfdGhpczIuY2FjaGVkSGFuZGxlcnNbaGFuZGxlck5hbWVdID0gaGFuZGxlcjtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAnd2l0aEhhbmRsZXJzKCk6IEV4cGVjdGVkIGEgbWFwIG9mIGhpZ2hlci1vcmRlciBmdW5jdGlvbnMuICcgKyAnUmVmZXIgdG8gdGhlIGRvY3MgZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlci5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhIYW5kbGVycycpKShXaXRoSGFuZGxlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aEhhbmRsZXJzO1xuICB9O1xufTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRQcm9wcyhwcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG4gICAgdmFyIERlZmF1bHRQcm9wcyA9IGZ1bmN0aW9uIERlZmF1bHRQcm9wcyhvd25lclByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShvd25lclByb3BzKTtcbiAgICB9O1xuICAgIERlZmF1bHRQcm9wcy5kZWZhdWx0UHJvcHMgPSBwcm9wcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZGVmYXVsdFByb3BzJykpKERlZmF1bHRQcm9wcyk7XG4gICAgfVxuICAgIHJldHVybiBEZWZhdWx0UHJvcHM7XG4gIH07XG59O1xuXG52YXIgb21pdCA9IGZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XG4gIHZhciByZXN0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBbXSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKHJlc3QuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZGVsZXRlIHJlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3Q7XG59O1xuXG52YXIgcmVuYW1lUHJvcCA9IGZ1bmN0aW9uIHJlbmFtZVByb3Aob2xkTmFtZSwgbmV3TmFtZSkge1xuICB2YXIgaG9jID0gbWFwUHJvcHMoZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcztcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgb21pdChwcm9wcywgW29sZE5hbWVdKSwgKF9iYWJlbEhlbHBlcnMkZXh0ZW5kcyA9IHt9LCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbbmV3TmFtZV0gPSBwcm9wc1tvbGROYW1lXSwgX2JhYmVsSGVscGVycyRleHRlbmRzKSk7XG4gIH0pO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncmVuYW1lUHJvcCcpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGhvYztcbn07XG5cbnZhciBrZXlzID0gT2JqZWN0LmtleXM7XG5cblxudmFyIG1hcEtleXMgPSBmdW5jdGlvbiBtYXBLZXlzKG9iaiwgZnVuYykge1xuICByZXR1cm4ga2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXN1bHRbZnVuYyh2YWwsIGtleSldID0gdmFsO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSk7XG59O1xuXG52YXIgcmVuYW1lUHJvcHMgPSBmdW5jdGlvbiByZW5hbWVQcm9wcyhuYW1lTWFwKSB7XG4gIHZhciBob2MgPSBtYXBQcm9wcyhmdW5jdGlvbiAocHJvcHMpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIG9taXQocHJvcHMsIGtleXMobmFtZU1hcCkpLCBtYXBLZXlzKHBpY2socHJvcHMsIGtleXMobmFtZU1hcCkpLCBmdW5jdGlvbiAoXywgb2xkTmFtZSkge1xuICAgICAgcmV0dXJuIG5hbWVNYXBbb2xkTmFtZV07XG4gICAgfSkpO1xuICB9KTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3JlbmFtZVByb3BzJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGZsYXR0ZW5Qcm9wID0gZnVuY3Rpb24gZmxhdHRlblByb3AocHJvcE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBGbGF0dGVuUHJvcCA9IGZ1bmN0aW9uIEZsYXR0ZW5Qcm9wKHByb3BzKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgcHJvcHMsIHByb3BzW3Byb3BOYW1lXSkpO1xuICAgIH07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnZmxhdHRlblByb3AnKSkoRmxhdHRlblByb3ApO1xuICAgIH1cbiAgICByZXR1cm4gRmxhdHRlblByb3A7XG4gIH07XG59O1xuXG52YXIgd2l0aFN0YXRlID0gZnVuY3Rpb24gd2l0aFN0YXRlKHN0YXRlTmFtZSwgc3RhdGVVcGRhdGVyTmFtZSwgaW5pdGlhbFN0YXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoV2l0aFN0YXRlLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFN0YXRlKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbC5hcHBseShfQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IGluaXRpYWxTdGF0ZShfdGhpcy5wcm9wcykgOiBpbml0aWFsU3RhdGVcbiAgICAgICAgfSwgX3RoaXMudXBkYXRlU3RhdGVWYWx1ZSA9IGZ1bmN0aW9uICh1cGRhdGVGbiwgY2FsbGJhY2spIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZVZhbHVlID0gX3JlZi5zdGF0ZVZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgc3RhdGVWYWx1ZTogdHlwZW9mIHVwZGF0ZUZuID09PSAnZnVuY3Rpb24nID8gdXBkYXRlRm4oc3RhdGVWYWx1ZSkgOiB1cGRhdGVGblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LCBjYWxsYmFjayk7XG4gICAgICAgIH0sIF90ZW1wKSwgcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgICB9XG5cbiAgICAgIFdpdGhTdGF0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbc3RhdGVVcGRhdGVyTmFtZV0gPSB0aGlzLnVwZGF0ZVN0YXRlVmFsdWUsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoU3RhdGU7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ3dpdGhTdGF0ZScpKShXaXRoU3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFN0YXRlO1xuICB9O1xufTtcblxudmFyIHdpdGhTdGF0ZUhhbmRsZXJzID0gZnVuY3Rpb24gd2l0aFN0YXRlSGFuZGxlcnMoaW5pdGlhbFN0YXRlLCBzdGF0ZVVwZGF0ZXJzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcblxuICAgIHZhciBXaXRoU3RhdGVIYW5kbGVycyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhXaXRoU3RhdGVIYW5kbGVycywgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhTdGF0ZUhhbmRsZXJzKCkge1xuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFdpdGhTdGF0ZUhhbmRsZXJzKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHZhciBwcm9wc0NoYW5nZWQgPSBuZXh0UHJvcHMgIT09IHRoaXMucHJvcHM7XG4gICAgICAgIC8vIHRoZSBpZGVhIGlzIHRvIHNraXAgcmVuZGVyIGlmIHN0YXRlVXBkYXRlciBoYW5kbGVyIHJldHVybiB1bmRlZmluZWRcbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdG8gY3JlYXRlIG5vIHN0YXRlIHVwZGF0ZSBoYW5kbGVycyB3aXRoIGFjY2VzcyB0byBzdGF0ZSBhbmQgcHJvcHNcbiAgICAgICAgdmFyIHN0YXRlQ2hhbmdlZCA9ICFzaGFsbG93RXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHByb3BzQ2hhbmdlZCB8fCBzdGF0ZUNoYW5nZWQ7XG4gICAgICB9O1xuXG4gICAgICBXaXRoU3RhdGVIYW5kbGVycy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSwgdGhpcy5zdGF0ZVVwZGF0ZXJzKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aFN0YXRlSGFuZGxlcnM7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgdmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgdGhpcy5zdGF0ZVVwZGF0ZXJzID0gbWFwVmFsdWVzKHN0YXRlVXBkYXRlcnMsIGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobWF5QmVFdmVudCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSGF2aW5nIHRoYXQgZnVuY3Rpb25hbCBmb3JtIG9mIHNldFN0YXRlIGNhbiBiZSBjYWxsZWQgYXN5bmNcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHBlcnNpc3QgU3ludGhldGljRXZlbnRcbiAgICAgICAgICBpZiAobWF5QmVFdmVudCAmJiB0eXBlb2YgbWF5QmVFdmVudC5wZXJzaXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBtYXlCZUV2ZW50LnBlcnNpc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoZnVuY3Rpb24gKHN0YXRlLCBwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoc3RhdGUsIHByb3BzKS5hcHBseSh1bmRlZmluZWQsIFttYXlCZUV2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoU3RhdGVIYW5kbGVycycpKShXaXRoU3RhdGVIYW5kbGVycyk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoU3RhdGVIYW5kbGVycztcbiAgfTtcbn07XG5cbnZhciB3aXRoUmVkdWNlciA9IGZ1bmN0aW9uIHdpdGhSZWR1Y2VyKHN0YXRlTmFtZSwgZGlzcGF0Y2hOYW1lLCByZWR1Y2VyLCBpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhSZWR1Y2VyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhSZWR1Y2VyLCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aFJlZHVjZXIoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aFJlZHVjZXIpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgIHN0YXRlVmFsdWU6IF90aGlzLmluaXRpYWxpemVTdGF0ZVZhbHVlKClcbiAgICAgICAgfSwgX3RoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGVWYWx1ZSA9IF9yZWYuc3RhdGVWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN0YXRlVmFsdWU6IHJlZHVjZXIoc3RhdGVWYWx1ZSwgYWN0aW9uKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aFJlZHVjZXIucHJvdG90eXBlLmluaXRpYWxpemVTdGF0ZVZhbHVlID0gZnVuY3Rpb24gaW5pdGlhbGl6ZVN0YXRlVmFsdWUoKSB7XG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKHRoaXMucHJvcHMpIDogaW5pdGlhbFN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiAnQEByZWNvbXBvc2UvSU5JVCcgfSk7XG4gICAgICB9O1xuXG4gICAgICBXaXRoUmVkdWNlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX2JhYmVsSGVscGVycyRleHRlbmRzO1xuXG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCAoX2JhYmVsSGVscGVycyRleHRlbmRzID0ge30sIF9iYWJlbEhlbHBlcnMkZXh0ZW5kc1tzdGF0ZU5hbWVdID0gdGhpcy5zdGF0ZS5zdGF0ZVZhbHVlLCBfYmFiZWxIZWxwZXJzJGV4dGVuZHNbZGlzcGF0Y2hOYW1lXSA9IHRoaXMuZGlzcGF0Y2gsIF9iYWJlbEhlbHBlcnMkZXh0ZW5kcykpKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBXaXRoUmVkdWNlcjtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnd2l0aFJlZHVjZXInKSkoV2l0aFJlZHVjZXIpO1xuICAgIH1cbiAgICByZXR1cm4gV2l0aFJlZHVjZXI7XG4gIH07XG59O1xuXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiBpZGVudGl0eShDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIENvbXBvbmVudCQkMTtcbn07XG5cbnZhciBicmFuY2ggPSBmdW5jdGlvbiBicmFuY2godGVzdCwgbGVmdCkge1xuICB2YXIgcmlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGlkZW50aXR5O1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgbGVmdEZhY3RvcnkgPSB2b2lkIDA7XG4gICAgdmFyIHJpZ2h0RmFjdG9yeSA9IHZvaWQgMDtcbiAgICB2YXIgQnJhbmNoID0gZnVuY3Rpb24gQnJhbmNoKHByb3BzKSB7XG4gICAgICBpZiAodGVzdChwcm9wcykpIHtcbiAgICAgICAgbGVmdEZhY3RvcnkgPSBsZWZ0RmFjdG9yeSB8fCBjcmVhdGVGYWN0b3J5KGxlZnQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgICByZXR1cm4gbGVmdEZhY3RvcnkocHJvcHMpO1xuICAgICAgfVxuICAgICAgcmlnaHRGYWN0b3J5ID0gcmlnaHRGYWN0b3J5IHx8IGNyZWF0ZUZhY3RvcnkocmlnaHQoQmFzZUNvbXBvbmVudCkpO1xuICAgICAgcmV0dXJuIHJpZ2h0RmFjdG9yeShwcm9wcyk7XG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdicmFuY2gnKSkoQnJhbmNoKTtcbiAgICB9XG4gICAgcmV0dXJuIEJyYW5jaDtcbiAgfTtcbn07XG5cbnZhciByZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiByZW5kZXJDb21wb25lbnQoQ29tcG9uZW50JCQxKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoXykge1xuICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShDb21wb25lbnQkJDEpO1xuICAgIHZhciBSZW5kZXJDb21wb25lbnQgPSBmdW5jdGlvbiBSZW5kZXJDb21wb25lbnQocHJvcHMpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzKTtcbiAgICB9O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZW5kZXJDb21wb25lbnQuZGlzcGxheU5hbWUgPSB3cmFwRGlzcGxheU5hbWUoQ29tcG9uZW50JCQxLCAncmVuZGVyQ29tcG9uZW50Jyk7XG4gICAgfVxuICAgIHJldHVybiBSZW5kZXJDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgTm90aGluZyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIGluaGVyaXRzKE5vdGhpbmcsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIE5vdGhpbmcoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTm90aGluZyk7XG4gICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIE5vdGhpbmcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gTm90aGluZztcbn0oQ29tcG9uZW50KTtcblxudmFyIHJlbmRlck5vdGhpbmcgPSBmdW5jdGlvbiByZW5kZXJOb3RoaW5nKF8pIHtcbiAgcmV0dXJuIE5vdGhpbmc7XG59O1xuXG52YXIgc2hvdWxkVXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkVXBkYXRlKHRlc3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFNob3VsZFVwZGF0ZSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICBpbmhlcml0cyhTaG91bGRVcGRhdGUsIF9Db21wb25lbnQpO1xuXG4gICAgICBmdW5jdGlvbiBTaG91bGRVcGRhdGUoKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNob3VsZFVwZGF0ZSk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICB9XG5cbiAgICAgIFNob3VsZFVwZGF0ZS5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcykge1xuICAgICAgICByZXR1cm4gdGVzdCh0aGlzLnByb3BzLCBuZXh0UHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgU2hvdWxkVXBkYXRlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFNob3VsZFVwZGF0ZTtcbiAgICB9KENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnc2hvdWxkVXBkYXRlJykpKFNob3VsZFVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBTaG91bGRVcGRhdGU7XG4gIH07XG59O1xuXG52YXIgcHVyZSA9IGZ1bmN0aW9uIHB1cmUoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgaG9jID0gc2hvdWxkVXBkYXRlKGZ1bmN0aW9uIChwcm9wcywgbmV4dFByb3BzKSB7XG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcyk7XG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAncHVyZScpKShob2MoQmFzZUNvbXBvbmVudCkpO1xuICB9XG5cbiAgcmV0dXJuIGhvYyhCYXNlQ29tcG9uZW50KTtcbn07XG5cbnZhciBvbmx5VXBkYXRlRm9yS2V5cyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JLZXlzKHByb3BLZXlzKSB7XG4gIHZhciBob2MgPSBzaG91bGRVcGRhdGUoZnVuY3Rpb24gKHByb3BzLCBuZXh0UHJvcHMpIHtcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwaWNrKG5leHRQcm9wcywgcHJvcEtleXMpLCBwaWNrKHByb3BzLCBwcm9wS2V5cykpO1xuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvcktleXMnKSkoaG9jKEJhc2VDb21wb25lbnQpKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBob2M7XG59O1xuXG52YXIgb25seVVwZGF0ZUZvclByb3BUeXBlcyA9IGZ1bmN0aW9uIG9ubHlVcGRhdGVGb3JQcm9wVHlwZXMoQmFzZUNvbXBvbmVudCkge1xuICB2YXIgcHJvcFR5cGVzID0gQmFzZUNvbXBvbmVudC5wcm9wVHlwZXM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXByb3BUeXBlcykge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0EgY29tcG9uZW50IHdpdGhvdXQgYW55IGBwcm9wVHlwZXNgIHdhcyBwYXNzZWQgdG8gJyArICdgb25seVVwZGF0ZUZvclByb3BUeXBlcygpYC4gQ2hlY2sgdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoZSAnICsgKCdjb21wb25lbnQgd2l0aCBkaXNwbGF5IG5hbWUgXCInICsgZ2V0RGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCkgKyAnXCIuJykpO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuICAgIH1cbiAgfVxuXG4gIHZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BUeXBlcyB8fCB7fSk7XG4gIHZhciBPbmx5VXBkYXRlRm9yUHJvcFR5cGVzID0gb25seVVwZGF0ZUZvcktleXMocHJvcEtleXMpKEJhc2VDb21wb25lbnQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIHNldERpc3BsYXlOYW1lKHdyYXBEaXNwbGF5TmFtZShCYXNlQ29tcG9uZW50LCAnb25seVVwZGF0ZUZvclByb3BUeXBlcycpKShPbmx5VXBkYXRlRm9yUHJvcFR5cGVzKTtcbiAgfVxuICByZXR1cm4gT25seVVwZGF0ZUZvclByb3BUeXBlcztcbn07XG5cbnZhciB3aXRoQ29udGV4dCA9IGZ1bmN0aW9uIHdpdGhDb250ZXh0KGNoaWxkQ29udGV4dFR5cGVzLCBnZXRDaGlsZENvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuXG4gICAgdmFyIFdpdGhDb250ZXh0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKFdpdGhDb250ZXh0LCBfQ29tcG9uZW50KTtcblxuICAgICAgZnVuY3Rpb24gV2l0aENvbnRleHQoKSB7XG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgV2l0aENvbnRleHQpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwuYXBwbHkoX0NvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRDb250ZXh0KF90aGlzLnByb3BzKTtcbiAgICAgICAgfSwgX3RlbXApLCBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICAgIH1cblxuICAgICAgV2l0aENvbnRleHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkodGhpcy5wcm9wcyk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gV2l0aENvbnRleHQ7XG4gICAgfShDb21wb25lbnQpO1xuXG4gICAgV2l0aENvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSBjaGlsZENvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICd3aXRoQ29udGV4dCcpKShXaXRoQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBXaXRoQ29udGV4dDtcbiAgfTtcbn07XG5cbnZhciBnZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChjb250ZXh0VHlwZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChCYXNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5KEJhc2VDb21wb25lbnQpO1xuICAgIHZhciBHZXRDb250ZXh0ID0gZnVuY3Rpb24gR2V0Q29udGV4dChvd25lclByb3BzLCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShfZXh0ZW5kcyh7fSwgb3duZXJQcm9wcywgY29udGV4dCkpO1xuICAgIH07XG5cbiAgICBHZXRDb250ZXh0LmNvbnRleHRUeXBlcyA9IGNvbnRleHRUeXBlcztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdnZXRDb250ZXh0JykpKEdldENvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gR2V0Q29udGV4dDtcbiAgfTtcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbnZhciBsaWZlY3ljbGUgPSBmdW5jdGlvbiBsaWZlY3ljbGUoc3BlYykge1xuICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICB2YXIgZmFjdG9yeSA9IGNyZWF0ZUZhY3RvcnkoQmFzZUNvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzcGVjLmhhc093blByb3BlcnR5KCdyZW5kZXInKSkge1xuICAgICAgY29uc29sZS5lcnJvcignbGlmZWN5Y2xlKCkgZG9lcyBub3Qgc3VwcG9ydCB0aGUgcmVuZGVyIG1ldGhvZDsgaXRzIGJlaGF2aW9yIGlzIHRvICcgKyAncGFzcyBhbGwgcHJvcHMgYW5kIHN0YXRlIHRvIHRoZSBiYXNlIGNvbXBvbmVudC4nKTtcbiAgICB9XG5cbiAgICB2YXIgTGlmZWN5Y2xlID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgIGluaGVyaXRzKExpZmVjeWNsZSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIExpZmVjeWNsZSgpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlmZWN5Y2xlKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cblxuICAgICAgTGlmZWN5Y2xlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBmYWN0b3J5KF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gTGlmZWN5Y2xlO1xuICAgIH0oQ29tcG9uZW50KTtcblxuICAgIE9iamVjdC5rZXlzKHNwZWMpLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgIHJldHVybiBMaWZlY3ljbGUucHJvdG90eXBlW2hvb2tdID0gc3BlY1tob29rXTtcbiAgICB9KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2V0RGlzcGxheU5hbWUod3JhcERpc3BsYXlOYW1lKEJhc2VDb21wb25lbnQsICdsaWZlY3ljbGUnKSkoTGlmZWN5Y2xlKTtcbiAgICB9XG4gICAgcmV0dXJuIExpZmVjeWNsZTtcbiAgfTtcbn07XG5cbnZhciBpc0NsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudChDb21wb25lbnQkJDEpIHtcbiAgcmV0dXJuIEJvb2xlYW4oQ29tcG9uZW50JCQxICYmIENvbXBvbmVudCQkMS5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudCQkMS5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKTtcbn07XG5cbnZhciB0b0NsYXNzID0gZnVuY3Rpb24gdG9DbGFzcyhiYXNlQ29tcG9uZW50KSB7XG4gIGlmIChpc0NsYXNzQ29tcG9uZW50KGJhc2VDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGJhc2VDb21wb25lbnQ7XG4gIH1cblxuICB2YXIgVG9DbGFzcyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoVG9DbGFzcywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBUb0NsYXNzKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9DbGFzcyk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFRvQ2xhc3MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZUNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoYmFzZUNvbXBvbmVudCwgdGhpcy5wcm9wcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gVG9DbGFzcztcbiAgfShDb21wb25lbnQpO1xuXG4gIFRvQ2xhc3MuZGlzcGxheU5hbWUgPSBnZXREaXNwbGF5TmFtZShiYXNlQ29tcG9uZW50KTtcbiAgVG9DbGFzcy5wcm9wVHlwZXMgPSBiYXNlQ29tcG9uZW50LnByb3BUeXBlcztcbiAgVG9DbGFzcy5jb250ZXh0VHlwZXMgPSBiYXNlQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgVG9DbGFzcy5kZWZhdWx0UHJvcHMgPSBiYXNlQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcblxuICByZXR1cm4gVG9DbGFzcztcbn07XG5cbnZhciBzZXRQcm9wVHlwZXMgPSBmdW5jdGlvbiBzZXRQcm9wVHlwZXMocHJvcFR5cGVzKSB7XG4gIHJldHVybiBzZXRTdGF0aWMoJ3Byb3BUeXBlcycsIHByb3BUeXBlcyk7XG59O1xuXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBmdW5jc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBmdW5jc1swXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGEoYi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH0pO1xufVxuXG52YXIgY3JlYXRlU2luayA9IGZ1bmN0aW9uIGNyZWF0ZVNpbmsoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgaW5oZXJpdHMoU2luaywgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBTaW5rKCkge1xuICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU2luayk7XG4gICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIFNpbmsucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIGNhbGxiYWNrKHRoaXMucHJvcHMpO1xuICAgIH07XG5cbiAgICBTaW5rLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGNhbGxiYWNrKG5leHRQcm9wcyk7XG4gICAgfTtcblxuICAgIFNpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2luaztcbiAgfShDb21wb25lbnQpO1xufTtcblxudmFyIGNvbXBvbmVudEZyb21Qcm9wID0gZnVuY3Rpb24gY29tcG9uZW50RnJvbVByb3AocHJvcE5hbWUpIHtcbiAgdmFyIENvbXBvbmVudCQkMSA9IGZ1bmN0aW9uIENvbXBvbmVudCQkMShwcm9wcykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzW3Byb3BOYW1lXSwgb21pdChwcm9wcywgW3Byb3BOYW1lXSkpO1xuICB9O1xuICBDb21wb25lbnQkJDEuZGlzcGxheU5hbWUgPSAnY29tcG9uZW50RnJvbVByb3AoJyArIHByb3BOYW1lICsgJyknO1xuICByZXR1cm4gQ29tcG9uZW50JCQxO1xufTtcblxudmFyIG5lc3QgPSBmdW5jdGlvbiBuZXN0KCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgQ29tcG9uZW50cyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIENvbXBvbmVudHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgZmFjdG9yaWVzID0gQ29tcG9uZW50cy5tYXAoY3JlYXRlRmFjdG9yeSk7XG4gIHZhciBOZXN0ID0gZnVuY3Rpb24gTmVzdChfcmVmKSB7XG4gICAgdmFyIHByb3BzID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW10pLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gICAgcmV0dXJuIGZhY3Rvcmllcy5yZWR1Y2VSaWdodChmdW5jdGlvbiAoY2hpbGQsIGZhY3RvcnkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KHByb3BzLCBjaGlsZCk7XG4gICAgfSwgY2hpbGRyZW4pO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lcyA9IENvbXBvbmVudHMubWFwKGdldERpc3BsYXlOYW1lKTtcbiAgICBOZXN0LmRpc3BsYXlOYW1lID0gJ25lc3QoJyArIGRpc3BsYXlOYW1lcy5qb2luKCcsICcpICsgJyknO1xuICB9XG5cbiAgcmV0dXJuIE5lc3Q7XG59O1xuXG52YXIgaG9pc3RTdGF0aWNzID0gZnVuY3Rpb24gaG9pc3RTdGF0aWNzKGhpZ2hlck9yZGVyQ29tcG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoQmFzZUNvbXBvbmVudCkge1xuICAgIHZhciBOZXdDb21wb25lbnQgPSBoaWdoZXJPcmRlckNvbXBvbmVudChCYXNlQ29tcG9uZW50KTtcbiAgICBob2lzdE5vblJlYWN0U3RhdGljcyhOZXdDb21wb25lbnQsIEJhc2VDb21wb25lbnQpO1xuICAgIHJldHVybiBOZXdDb21wb25lbnQ7XG4gIH07XG59O1xuXG52YXIgX2NvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogbnVsbCxcbiAgdG9FU09ic2VydmFibGU6IG51bGxcbn07XG5cbnZhciBjb25maWd1cmVPYnNlcnZhYmxlID0gZnVuY3Rpb24gY29uZmlndXJlT2JzZXJ2YWJsZShjKSB7XG4gIF9jb25maWcgPSBjO1xufTtcblxudmFyIGNvbmZpZyA9IHtcbiAgZnJvbUVTT2JzZXJ2YWJsZTogZnVuY3Rpb24gZnJvbUVTT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLmZyb21FU09ic2VydmFibGUgPT09ICdmdW5jdGlvbicgPyBfY29uZmlnLmZyb21FU09ic2VydmFibGUob2JzZXJ2YWJsZSkgOiBvYnNlcnZhYmxlO1xuICB9LFxuICB0b0VTT2JzZXJ2YWJsZTogZnVuY3Rpb24gdG9FU09ic2VydmFibGUoc3RyZWFtKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBfY29uZmlnLnRvRVNPYnNlcnZhYmxlID09PSAnZnVuY3Rpb24nID8gX2NvbmZpZy50b0VTT2JzZXJ2YWJsZShzdHJlYW0pIDogc3RyZWFtO1xuICB9XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcgPSBmdW5jdGlvbiBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wc1RvVmRvbSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgICAgaW5oZXJpdHMoQ29tcG9uZW50RnJvbVN0cmVhbSwgX0NvbXBvbmVudCk7XG5cbiAgICAgIGZ1bmN0aW9uIENvbXBvbmVudEZyb21TdHJlYW0oKSB7XG4gICAgICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnRGcm9tU3RyZWFtKTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsLmFwcGx5KF9Db21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHsgdmRvbTogbnVsbCB9LCBfdGhpcy5wcm9wc0VtaXR0ZXIgPSBjcmVhdGVDaGFuZ2VFbWl0dGVyKCksIF90aGlzLnByb3BzJCA9IGNvbmZpZyQkMS5mcm9tRVNPYnNlcnZhYmxlKChfY29uZmlnJGZyb21FU09ic2VydmEgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciB1bnN1YnNjcmliZSA9IF90aGlzLnByb3BzRW1pdHRlci5saXN0ZW4oZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQocHJvcHMpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlIH07XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY29uZmlnJGZyb21FU09ic2VydmFbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSksIF90aGlzLnZkb20kID0gY29uZmlnJCQxLnRvRVNPYnNlcnZhYmxlKHByb3BzVG9WZG9tKF90aGlzLnByb3BzJCkpLCBfdGVtcCksIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdHJlYW0gb2YgcHJvcHNcblxuXG4gICAgICAvLyBTdHJlYW0gb2YgdmRvbVxuXG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIGNoaWxkIHByb3AgY2hhbmdlcyBzbyB3ZSBrbm93IHdoZW4gdG8gcmUtcmVuZGVyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy52ZG9tJC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQodmRvbSkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHsgdmRvbTogdmRvbSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnByb3BzRW1pdHRlci5lbWl0KHRoaXMucHJvcHMpO1xuICAgICAgfTtcblxuICAgICAgQ29tcG9uZW50RnJvbVN0cmVhbS5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIC8vIFJlY2VpdmUgbmV3IHByb3BzIGZyb20gdGhlIG93bmVyXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQobmV4dFByb3BzKTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICByZXR1cm4gbmV4dFN0YXRlLnZkb20gIT09IHRoaXMuc3RhdGUudmRvbTtcbiAgICAgIH07XG5cbiAgICAgIENvbXBvbmVudEZyb21TdHJlYW0ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIC8vIENhbGwgd2l0aG91dCBhcmd1bWVudHMgdG8gY29tcGxldGUgc3RyZWFtXG4gICAgICAgIHRoaXMucHJvcHNFbWl0dGVyLmVtaXQoKTtcblxuICAgICAgICAvLyBDbGVhbi11cCBzdWJzY3JpcHRpb24gYmVmb3JlIHVuLW1vdW50aW5nXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICB9O1xuXG4gICAgICBDb21wb25lbnRGcm9tU3RyZWFtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLnZkb207XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29tcG9uZW50RnJvbVN0cmVhbTtcbiAgICB9KENvbXBvbmVudCk7XG4gIH07XG59O1xuXG52YXIgY29tcG9uZW50RnJvbVN0cmVhbSA9IGZ1bmN0aW9uIGNvbXBvbmVudEZyb21TdHJlYW0ocHJvcHNUb1Zkb20pIHtcbiAgcmV0dXJuIGNvbXBvbmVudEZyb21TdHJlYW1XaXRoQ29uZmlnKGNvbmZpZykocHJvcHNUb1Zkb20pO1xufTtcblxudmFyIGlkZW50aXR5JDEgPSBmdW5jdGlvbiBpZGVudGl0eSh0KSB7XG4gIHJldHVybiB0O1xufTtcblxudmFyIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyA9IGZ1bmN0aW9uIG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWckJDEpIHtcbiAgdmFyIGNvbXBvbmVudEZyb21TdHJlYW0gPSBjb21wb25lbnRGcm9tU3RyZWFtV2l0aENvbmZpZyh7XG4gICAgZnJvbUVTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMSxcbiAgICB0b0VTT2JzZXJ2YWJsZTogaWRlbnRpdHkkMVxuICB9KTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHZhciBmYWN0b3J5ID0gY3JlYXRlRmFjdG9yeShCYXNlQ29tcG9uZW50KTtcbiAgICAgIHZhciBmcm9tRVNPYnNlcnZhYmxlID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUsXG4gICAgICAgICAgdG9FU09ic2VydmFibGUgPSBjb25maWckJDEudG9FU09ic2VydmFibGU7XG5cbiAgICAgIHJldHVybiBjb21wb25lbnRGcm9tU3RyZWFtKGZ1bmN0aW9uIChwcm9wcyQpIHtcbiAgICAgICAgdmFyIF9yZWY7XG5cbiAgICAgICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0b0VTT2JzZXJ2YWJsZSh0cmFuc2Zvcm0oZnJvbUVTT2JzZXJ2YWJsZShwcm9wcyQpKSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gbmV4dChjaGlsZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLm5leHQoZmFjdG9yeShjaGlsZFByb3BzKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSwgX3JlZjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59O1xuXG52YXIgbWFwUHJvcHNTdHJlYW0gPSBmdW5jdGlvbiBtYXBQcm9wc1N0cmVhbSh0cmFuc2Zvcm0pIHtcbiAgdmFyIGhvYyA9IG1hcFByb3BzU3RyZWFtV2l0aENvbmZpZyhjb25maWcpKHRyYW5zZm9ybSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKEJhc2VDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBzZXREaXNwbGF5TmFtZSh3cmFwRGlzcGxheU5hbWUoQmFzZUNvbXBvbmVudCwgJ21hcFByb3BzU3RyZWFtJykpKGhvYyhCYXNlQ29tcG9uZW50KSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaG9jO1xufTtcblxudmFyIGNyZWF0ZUV2ZW50SGFuZGxlcldpdGhDb25maWcgPSBmdW5jdGlvbiBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyQkMSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29uZmlnJGZyb21FU09ic2VydmE7XG5cbiAgICB2YXIgZW1pdHRlciA9IGNyZWF0ZUNoYW5nZUVtaXR0ZXIoKTtcbiAgICB2YXIgc3RyZWFtID0gY29uZmlnJCQxLmZyb21FU09ic2VydmFibGUoKF9jb25maWckZnJvbUVTT2JzZXJ2YSA9IHtcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IGVtaXR0ZXIubGlzdGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9jb25maWckZnJvbUVTT2JzZXJ2YVskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX2NvbmZpZyRmcm9tRVNPYnNlcnZhKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhhbmRsZXI6IGVtaXR0ZXIuZW1pdCxcbiAgICAgIHN0cmVhbTogc3RyZWFtXG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVFdmVudEhhbmRsZXIgPSBjcmVhdGVFdmVudEhhbmRsZXJXaXRoQ29uZmlnKGNvbmZpZyk7XG5cbi8vIEhpZ2hlci1vcmRlciBjb21wb25lbnQgaGVscGVyc1xuXG5leHBvcnQgeyBtYXBQcm9wcywgd2l0aFByb3BzLCB3aXRoUHJvcHNPbkNoYW5nZSwgd2l0aEhhbmRsZXJzLCBkZWZhdWx0UHJvcHMsIHJlbmFtZVByb3AsIHJlbmFtZVByb3BzLCBmbGF0dGVuUHJvcCwgd2l0aFN0YXRlLCB3aXRoU3RhdGVIYW5kbGVycywgd2l0aFJlZHVjZXIsIGJyYW5jaCwgcmVuZGVyQ29tcG9uZW50LCByZW5kZXJOb3RoaW5nLCBzaG91bGRVcGRhdGUsIHB1cmUsIG9ubHlVcGRhdGVGb3JLZXlzLCBvbmx5VXBkYXRlRm9yUHJvcFR5cGVzLCB3aXRoQ29udGV4dCwgZ2V0Q29udGV4dCwgbGlmZWN5Y2xlLCB0b0NsYXNzLCBzZXRTdGF0aWMsIHNldFByb3BUeXBlcywgc2V0RGlzcGxheU5hbWUsIGNvbXBvc2UsIGdldERpc3BsYXlOYW1lLCB3cmFwRGlzcGxheU5hbWUsIHNoYWxsb3dFcXVhbCwgaXNDbGFzc0NvbXBvbmVudCwgY3JlYXRlU2luaywgY29tcG9uZW50RnJvbVByb3AsIG5lc3QsIGhvaXN0U3RhdGljcywgY29tcG9uZW50RnJvbVN0cmVhbSwgY29tcG9uZW50RnJvbVN0cmVhbVdpdGhDb25maWcsIG1hcFByb3BzU3RyZWFtLCBtYXBQcm9wc1N0cmVhbVdpdGhDb25maWcsIGNyZWF0ZUV2ZW50SGFuZGxlciwgY3JlYXRlRXZlbnRIYW5kbGVyV2l0aENvbmZpZywgY29uZmlndXJlT2JzZXJ2YWJsZSBhcyBzZXRPYnNlcnZhYmxlQ29uZmlnIH07XG4iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvKSB7XG4gIHZhciBmcm9tID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcblxuICB2YXIgdG9QYXJ0cyA9IHRvICYmIHRvLnNwbGl0KCcvJykgfHwgW107XG4gIHZhciBmcm9tUGFydHMgPSBmcm9tICYmIGZyb20uc3BsaXQoJy8nKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdm9pZCAwO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcbiAgfWlmIChtdXN0RW5kQWJzICYmIGZyb21QYXJ0c1swXSAhPT0gJycgJiYgKCFmcm9tUGFydHNbMF0gfHwgIWlzQWJzb2x1dGUoZnJvbVBhcnRzWzBdKSkpIGZyb21QYXJ0cy51bnNoaWZ0KCcnKTtcblxuICB2YXIgcmVzdWx0ID0gZnJvbVBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAoaGFzVHJhaWxpbmdTbGFzaCAmJiByZXN1bHQuc3Vic3RyKC0xKSAhPT0gJy8nKSByZXN1bHQgKz0gJy8nO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc29sdmVQYXRobmFtZTsiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcblx0XHRcdFx0XHQvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG5cdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdHN0eWxlVGFyZ2V0ID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG5cdFx0fVxuXHRcdHJldHVybiBtZW1vW3RhcmdldF1cblx0fTtcbn0pKCk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG4gICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gdmFsdWVFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYikgJiYgYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuZXZlcnkoZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYVR5cGUgPSB0eXBlb2YgYSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYSk7XG4gIHZhciBiVHlwZSA9IHR5cGVvZiBiID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihiKTtcblxuICBpZiAoYVR5cGUgIT09IGJUeXBlKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGFUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSBhLnZhbHVlT2YoKTtcbiAgICB2YXIgYlZhbHVlID0gYi52YWx1ZU9mKCk7XG5cbiAgICBpZiAoYVZhbHVlICE9PSBhIHx8IGJWYWx1ZSAhPT0gYikgcmV0dXJuIHZhbHVlRXF1YWwoYVZhbHVlLCBiVmFsdWUpO1xuXG4gICAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYik7XG5cbiAgICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhS2V5cy5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHdhcm5pbmcgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYXJncykge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuID4gMiA/IGxlbiAtIDIgOiAwKTtcbiAgICBmb3IgKHZhciBrZXkgPSAyOyBrZXkgPCBsZW47IGtleSsrKSB7XG4gICAgICBhcmdzW2tleSAtIDJdID0gYXJndW1lbnRzW2tleV07XG4gICAgfVxuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICdtZXNzYWdlIGFyZ3VtZW50J1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZm9ybWF0Lmxlbmd0aCA8IDEwIHx8ICgvXltzXFxXXSokLykudGVzdChmb3JtYXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdUaGUgd2FybmluZyBmb3JtYXQgc2hvdWxkIGJlIGFibGUgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyAnICtcbiAgICAgICAgJ3dhcm5pbmcuIFBsZWFzZSwgdXNlIGEgbW9yZSBkZXNjcmlwdGl2ZSBmb3JtYXQgdGhhbjogJyArIGZvcm1hdFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCB5b3UgY2FuIHVzZSB0aGlzIHN0YWNrXG4gICAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGNhdGNoKHgpIHt9XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSwgZXZhbCkoXCJ0aGlzXCIpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcclxuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXHJcblx0XHR9KTtcclxuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xyXG5cdH1cclxuXHRyZXR1cm4gbW9kdWxlO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI1NzhhZDY0MDExOTIyOWE4NzYxYzM4MmE1MDM4ZjYyNS5qcGdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcblxyXG5jb25zdCBIb21lID0gKCkgPT4ge1xyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIkhvbWVcIj5cclxuICAgICAgPGgyPlxyXG4gICAgICAgIFdlbGNvbWUgdG8gTW9ydHlwZWRpYSwgdGhlIGhvbWUgb2YgZXZlcnl0aGluZyBSaWNrIGFuZCBNb3J0eSEgRmVlbCBmcmVlIHRvIGxvb2sgYXJvdW5kIGF0IHRoZSBjaGFyYWN0ZXJzLFxyXG4gICAgICAgIGxvY2F0aW9ucywgYW5kIGVwaXNvZGVzLlxyXG4gICAgICA8L2gyPlxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBIb21lXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgUHJvcGFnYXRlTG9hZGVyIH0gZnJvbSAncmVhY3Qtc3Bpbm5lcnMnXHJcblxyXG5jb25zdCBMb2FkZXIgPSBwcm9wcyA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJMb2FkZXJcIj5cclxuICAgIDxQcm9wYWdhdGVMb2FkZXIgc2l6ZT17MjV9IC8+XHJcbiAgPC9kaXY+XHJcbilcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvYWRlclxyXG4iLCJpbXBvcnQgTG9hZGFibGUgZnJvbSAncmVhY3QtbG9hZGFibGUnXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi9Mb2FkZXInXHJcblxyXG5jb25zdCBMb2FkbWFuZyA9IGZ1bmMgPT5cclxuICBMb2FkYWJsZSh7XHJcbiAgICBsb2FkaW5nOiBMb2FkZXIsXHJcbiAgICBsb2FkZXI6IGZ1bmNcclxuICB9KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9hZG1hbmdcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuXHJcbmNvbnN0IE5hdmJhciA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPGhlYWRlcj5cclxuICAgICAgPGgxPk1vcnR5cGVkaWE8L2gxPlxyXG4gICAgICA8bmF2PlxyXG4gICAgICAgIDxsaT5cclxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPkhvbWU8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgICA8bGk+XHJcbiAgICAgICAgICA8TGluayB0bz1cIi9jaGFyYWN0ZXJzXCI+Q2hhcmFjdGVyczwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICAgIDxsaT5cclxuICAgICAgICAgIDxMaW5rIHRvPVwiL2xvY2F0aW9uc1wiPkxvY2F0aW9uczwvTGluaz5cclxuICAgICAgICA8L2xpPlxyXG4gICAgICAgIDxsaT5cclxuICAgICAgICAgIDxMaW5rIHRvPVwiL2VwaXNvZGVzXCI+RXBpc29kZXM8L0xpbms+XHJcbiAgICAgICAgPC9saT5cclxuICAgICAgPC9uYXY+XHJcbiAgICA8L2hlYWRlcj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE5hdmJhclxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXHJcbmltcG9ydCB7IEhhc2hSb3V0ZXIsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcclxuaW1wb3J0IExvYWRtYW5nIGZyb20gJy4uL2NvbXBvbmVudHMvTG9hZG1hbmcnXHJcbmltcG9ydCBIb21lIGZyb20gJy4uL2NvbXBvbmVudHMvSG9tZSdcclxuaW1wb3J0IE5hdmJhciBmcm9tICcuLi9jb21wb25lbnRzL05hdmJhcidcclxuXHJcbmNvbnN0IENoYXJhY3RlcnMgPSBMb2FkbWFuZygoKSA9PiBpbXBvcnQoJy4uL2NvbXBvbmVudHMvQ2hhcmFjdGVycycpKVxyXG5jb25zdCBMb2NhdGlvbnMgPSBMb2FkbWFuZygoKSA9PiBpbXBvcnQoJy4uL2NvbXBvbmVudHMvTG9jYXRpb25zJykpXHJcbmNvbnN0IEVwaXNvZGVzID0gTG9hZG1hbmcoKCkgPT4gaW1wb3J0KCcuLi9jb21wb25lbnRzL0VwaXNvZGVzJykpXHJcbmNvbnN0IFNpbmdsZUNoYXJhY3RlciA9IExvYWRtYW5nKCgpID0+IGltcG9ydCgnLi4vY29tcG9uZW50cy9TaW5nbGVDaGFyYWN0ZXInKSlcclxuY29uc3QgU2luZ2xlTG9jYXRpb24gPSBMb2FkbWFuZygoKSA9PiBpbXBvcnQoJy4uL2NvbXBvbmVudHMvU2luZ2xlTG9jYXRpb24nKSlcclxuY29uc3QgU2luZ2xlRXBpc29kZSA9IExvYWRtYW5nKCgpID0+IGltcG9ydCgnLi4vY29tcG9uZW50cy9TaW5nbGVFcGlzb2RlJykpXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIHJlbmRlciAoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8SGFzaFJvdXRlcj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPE5hdmJhciAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lfSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY2hhcmFjdGVyc1wiIGNvbXBvbmVudD17Q2hhcmFjdGVyc30gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2xvY2F0aW9uc1wiIGNvbXBvbmVudD17TG9jYXRpb25zfSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvZXBpc29kZXNcIiBjb21wb25lbnQ9e0VwaXNvZGVzfSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY2hhcmFjdGVycy86aWRcIiBjb21wb25lbnQ9e1NpbmdsZUNoYXJhY3Rlcn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2xvY2F0aW9ucy86aWRcIiBjb21wb25lbnQ9e1NpbmdsZUxvY2F0aW9ufSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvZXBpc29kZXMvOmlkXCIgY29tcG9uZW50PXtTaW5nbGVFcGlzb2RlfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0hhc2hSb3V0ZXI+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcclxuaW1wb3J0ICcuL3N0eWxlcy9pbmRleC5zdHlsJ1xyXG5pbXBvcnQgQXBwIGZyb20gJy4vY29udGFpbmVycy9BcHAnXHJcblxyXG5SZWFjdERPTS5yZW5kZXIoPEFwcCAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSlcclxuIiwiXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsdXMtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguc3R5bFwiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5zdHlsXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWx1cy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5zdHlsXCIpO1xuXG5cdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cblx0XHR2YXIgbG9jYWxzID0gKGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdHZhciBrZXksIGlkeCA9IDA7XG5cblx0XHRcdGZvcihrZXkgaW4gYSkge1xuXHRcdFx0XHRpZighYiB8fCBhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRpZHgrKztcblx0XHRcdH1cblxuXHRcdFx0Zm9yKGtleSBpbiBiKSBpZHgtLTtcblxuXHRcdFx0cmV0dXJuIGlkeCA9PT0gMDtcblx0XHR9KGNvbnRlbnQubG9jYWxzLCBuZXdDb250ZW50LmxvY2FscykpO1xuXG5cdFx0aWYoIWxvY2FscykgdGhyb3cgbmV3IEVycm9yKCdBYm9ydGluZyBDU1MgSE1SIGR1ZSB0byBjaGFuZ2VkIGNzcy1tb2R1bGVzIGxvY2Fscy4nKTtcblxuXHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0fSk7XG5cblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==